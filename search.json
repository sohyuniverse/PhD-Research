[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Project Description",
    "section": "",
    "text": "In terms of the project on ‘Active Drying’, drying is an equilibrium surface phase transition that occurs when a fluid at liquid-vapour coexistence is in contact with an infinite planar substrate that is sufficiently weakly attractive to the fluid particles, such that the vapour phase prefers to be at the substrate. Surface phase transitions can be first-order or critical, and previous results (see [1, 2]) show that drying is generally a critical surface phase transition.\nPrevious work on ABPs has shown that they can exhibit a first-order wetting transition (see [3]). This effect has been investigated by looking at liquid-vapour ‘slabs’ and droplets, showing consistent results. However, the mechanism by which the wetting transition is traversed does not seem to allow for the possibility of a drying transition. To have a chance of observing this, we need to understand the mechanism by which ABPs interact with a surface.\nThe aggregation effect at a hard wall arises because ABPs become trapped at the wall and cannot diffuse away quickly enough. The project will attempt to induce a drying transition by coupling the ABP velocity vector to the wall-fluid interaction in such a way as to produce a torque that creates an effective wall-fluid repulsion, possibly enabling a drying transition. Our task will be to modify a standard MD simulation package to introduce this torque and then proceed similarly to the Turci and Wilding paper in PRL 2021 (see [4]), to try to observe a drying transition. If evidence for this is seen, then we will try to quantify the character of the transition and analyse its critical properties.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Purpose of this Website",
    "section": "",
    "text": "Purpose of this Website\nAs I ended week 2 on the 27th of September, I thought it would be useful to keep track of the following from next week (week 3):\n\nWhat I did every day (mostly bookmarking or a summary)\nA brief summary of what was discussed in project meetings\nThings I hope to discuss or ask in the next project meeting\nUseful resources as links, since I often don’t keep track of what I bookmarked in Safari\n\nAuthor: Sohyun Park\nSupervisors: Prof. Nigel Wilding, Dr. Francesco Turci",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "notes.html",
    "href": "notes.html",
    "title": "Weekly Notes",
    "section": "",
    "text": "Busy weeks due to starting three teaching modules: Weekly update of my TSR (Teaching Support Roles). Looking back, I wish I could have completed more reading, as there isn’t much to talk about in terms of active matter research for the next project meeting on Monday.",
    "crumbs": [
      "Project Notes",
      "Weekly Notes"
    ]
  },
  {
    "objectID": "notes.html#week-2",
    "href": "notes.html#week-2",
    "title": "Weekly Notes",
    "section": "",
    "text": "Busy weeks due to starting three teaching modules: Weekly update of my TSR (Teaching Support Roles). Looking back, I wish I could have completed more reading, as there isn’t much to talk about in terms of active matter research for the next project meeting on Monday.",
    "crumbs": [
      "Project Notes",
      "Weekly Notes"
    ]
  },
  {
    "objectID": "notes.html#help-sub-commands",
    "href": "notes.html#help-sub-commands",
    "title": "Notes on Active Matter PhD project",
    "section": "",
    "text": "help prints this message help module […] print help message from module(s)"
  },
  {
    "objectID": "notes.html#loadingunloading-sub-commands",
    "href": "notes.html#loadingunloading-sub-commands",
    "title": "Notes on Active Matter PhD project",
    "section": "",
    "text": "load | add module […] load module(s) try-load | try-add module […] Add module(s), do not complain if not found del | unload module […] Remove module(s), do not complain if not found swap | sw | switch m1 m2 unload m1 and load m2 purge unload all modules refresh reload aliases from current list of modules. update reload all currently loaded modules."
  },
  {
    "objectID": "notes.html#listing-searching-sub-commands",
    "href": "notes.html#listing-searching-sub-commands",
    "title": "Notes on Active Matter PhD project",
    "section": "",
    "text": "list List loaded modules list s1 s2 … List loaded modules that match the pattern avail | av List available modules avail | av string List available modules that contain “string”. category | cat List all categories category | cat s1 s2 … List all categories that match the pattern and display their modules overview | ov List all available modules by short names with number of versions overview | ov string List available modules by short names with number of versions that contain “string” spider List all possible modules spider module List all possible version of that module file spider string List all module that contain the “string”. spider name/version Detailed information about that version of the module. whatis module Print whatis information about module keyword | key string Search all name and whatis that contain “string”."
  },
  {
    "objectID": "notes.html#searching-with-lmod",
    "href": "notes.html#searching-with-lmod",
    "title": "Notes on Active Matter PhD project",
    "section": "",
    "text": "All searching (spider, list, avail, keyword) support regular expressions:\n-r spider ‘^p’ Finds all the modules that start with p' orP’ -r spider mpi Finds all modules that have “mpi” in their name. -r spider ’mpi$ Finds all modules that end with “mpi” in their name."
  },
  {
    "objectID": "notes.html#handling-a-collection-of-modules",
    "href": "notes.html#handling-a-collection-of-modules",
    "title": "Notes on Active Matter PhD project",
    "section": "",
    "text": "save | s Save the current list of modules to a user defined “default” collection. save | s name Save the current list of modules to “name” collection. reset The same as “restore system” restore | r Restore modules from the user’s “default” or system default. restore | r name Restore modules from “name” collection. restore system Restore module state to system defaults. savelist List of saved collections. describe | mcc name Describe the contents of a module collection. disable name Disable (i.e. remove) a collection."
  },
  {
    "objectID": "notes.html#deprecated-commands",
    "href": "notes.html#deprecated-commands",
    "title": "Notes on Active Matter PhD project",
    "section": "",
    "text": "getdefault [name] load name collection of modules or user’s “default” if no name given. ===&gt; Use “restore” instead &lt;==== setdefault [name] Save current list of modules to name if given, otherwise save as the default list for you the user. ===&gt; Use “save” instead. &lt;===="
  },
  {
    "objectID": "notes.html#miscellaneous-sub-commands",
    "href": "notes.html#miscellaneous-sub-commands",
    "title": "Notes on Active Matter PhD project",
    "section": "",
    "text": "is-loaded modulefile return a true status if module is loaded is-avail modulefile return a true status if module can be loaded show modulefile show the commands in the module file. use [-a] path Prepend or Append path to MODULEPATH. unuse path remove path from MODULEPATH. tablelist output list of active modules as a lua table."
  },
  {
    "objectID": "notes.html#important-environment-variables",
    "href": "notes.html#important-environment-variables",
    "title": "Notes on Active Matter PhD project",
    "section": "",
    "text": "LMOD_COLORIZE If defined to be “YES” then Lmod prints properties and warning in color.\n---------------------------------------------------------------------------------------------\nLmod Web Sites\nDocumentation: https://lmod.readthedocs.org GitHub: https://github.com/TACC/Lmod SourceForge: https://lmod.sf.net TACC Homepage: https://www.tacc.utexas.edu/research-development/tacc-projects/lmod\nTo report a bug please read https://lmod.readthedocs.io/en/latest/075_bug_reporting.html ———————————————————————————————\n[sp13328@bc4login3(BlueCrystal4) ~]$ module list\nCurrently Loaded Modules: 1) slurm/23.11.6 (S)\nWhere: S: Module is Sticky, requires –force to unload or purge\n[sp13328@bc4login3(BlueCrystal4) ~]$ module avail\n————————– /modules/spack/lmod/linux-rocky8-x86_64/Core ————————— apptainer/1.1.9 gcc/11.4.0 ont-guppy/6.1.7 bcftools/1.19-openblas gcc/12.3.0 (D) openblas/0.3.26 beagle/5.4 gdal/3.8.5 opencv/4.8.0 beast2/2.7.4 gemma/0.98.5 openmpi/4.1.2 bismark/0.24.1 git/2.42.0 openmpi/5.0.3 (D) boost/1.85.0 gmake/4.4.1 openssh/9.7p1 bowtie/1.3.1 gnuplot/6.0.0 p7zip/17.05 bowtie2/2.5.2 gsl/2.7.1 paml/4.10.7 bwa/0.7.17 htslib/1.19.1 plink/1.9-beta6.27-openblas clustal-omega/1.2.4 interproscan/5.63-95.0 pmix/2.2.5 cmake/3.27.9 jags/4.3.2-openblas pmix/3.2.4-2 cuda/11.1.1 jasper/3.0.3 pmix/4.2.4 (D) cuda/12.4.0 (D) kokkos/4.3.01 pugixml/1.13 cudnn/8.9.7.29-12 ldsc/2.0.1-openblas qctool/2.2.0 doxygen/1.9.8 libffi/3.4.6 rclone/1.65.1 eigen/3.4.0 liblas/1.8.1 samtools/1.19.2 fastp/0.23.4 libpng/1.6.39 slurm/23.11.6 (S ,L) fastqc/0.12.1 libspatialindex/1.9.3 spades/3.15.5 fasttree/2.1.11 libtool/2.4.7 star/2.7.11a ffmpeg/6.1.1 mafft/7.505 tk/8.6.11 gatk/4.5.0.0 metal/2020-05-05 trimmomatic/0.39 gcc/6.5.0 mysql/8.0.35 vcftools/0.1.16 gcc/9.5.0 nasm/2.15.05 vmd/1.9.3 gcc/10.5.0 netlib-lapack/3.11.0 zlib/1.3.1\n—————————————– /modules/local —————————————— apps/abaqus/2018 apps/starccm/18.02.008-r8 apps/abaqus/2022 (D) apps/stata/17 apps/amber/24 apps/trimal/1.5 apps/annovar/2024.6 apps/vasp/5.4.4 apps/cgmaptools/0.1.3 apps/vasp/6.3.2 (D) apps/colabfold/1.5.5 apps/vep/112 apps/convsh/1.19.1 apps/vmd/1.9.3 apps/crystal/23 languages/Intel-OneAPI/2022.2.0 apps/cst-studio/2019 languages/Intel-OneAPI/2024.0.2 (D) apps/dorado/0.7.0 languages/R/3.6.2 apps/foldseek/05.2024 languages/R/4.1.2 apps/gaussian/g16 languages/R/4.3.3 apps/gem/1.5.2 languages/R/4.4.1 (D) apps/iqtree/2.0.6 languages/java-sdk/22.0.1 apps/lumerical-fdtd/2023-r1.3 languages/julia/1.10.3 apps/matlab/r2023b languages/perl/5.38.2 apps/matlabengine/23.2.3 languages/python/bioconda apps/mmap/2022.11.06 languages/python/biopython-1.83 apps/molpro/2022.3.0 languages/python/eba apps/mrbayes/3.2.7a languages/python/fair-esm-0.1.0 apps/nastran/2023-4 languages/python/flye apps/opensees/3.6.0 languages/python/ldsc-2.0.1 apps/orca/6.0.0 languages/python/ncl.6.6.2 apps/phylobayes/4.1 languages/python/rosetta-371 apps/plink2/2.00a6LM languages/python/seisbench-0.7.2 apps/powerflow/6-2024 languages/python/tensorflow-2.16.1 apps/regenie/3.6 languages/python/3.12.3 (D) apps/sagemath/10.3 languages/swi-prolog/9.2.5\n—————————— /usr/share/lmod/lmod/modulefiles/Core —————————— lmod settarg\nWhere: S: Module is Sticky, requires –force to unload or purge L: Module is loaded D: Default Module\nIf the avail list is too long consider trying:\n“module –default avail” or “ml -d av” to just list the default modules. “module overview” or “ml ov” to display the number of modules for each name.\nUse “module spider” to find all possible modules and extensions. Use “module keyword key1 key2 …” to search for all possible modules matching any of the “keys”.\n[sp13328@bc4login3(BlueCrystal4) ~]$ module –ignore_cache load “languages/anaconda3/2020” Lmod has detected the following error: The following module(s) are unknown: “languages/anaconda3/2020”\nPlease check the spelling or version number. Also try “module spider …” It is also possible your cache file is out-of-date; it may help to try: $ module –ignore_cache load “languages/anaconda3/2020”\nAlso make sure that all modulefiles written in TCL start with the string #%Module\n[sp13328@bc4login3(BlueCrystal4) ~]$ vim .bash .bash_history .bash_logout .bash_profile .bashrc\n[sp13328@bc4login3(BlueCrystal4) ~]$ vim .bashrc [sp13328@bc4login3(BlueCrystal4) ~]$ ln -s /user/work/\\(USER work\n[sp13328@bc4login3(BlueCrystal4) ~]\\) ls build picalc_pyx_omp.cpython-38-x86_64-linux-gnu.so setup_picalc_pyx_omp.py newprog.py picalc_pyx_omp.pyx work picalc_pyx_omp.c run_picalc_pyx_omp.py [sp13328@bc4login3(BlueCrystal4) ~]$ cd work [sp13328@bc4login3(BlueCrystal4) work]$ ls [sp13328@bc4login3(BlueCrystal4) work]$ user-quota Block Limits | File Limits Filesystem Fileset blocks quota limit in_doubt grace | files quota limit in_doubt grace HOME USR 880K 25G 50G 86.92M none | 24 460800 512000 39 none WORK USR 0 1000G 1.074T 0 none | 1 972800 1024000 0 none [sp13328@bc4login3(BlueCrystal4) work]$ client_loop: send disconnect: Broken pipe\n\n\n\nBusy weeks due to starting three teaching modules: Weekly update of my TSR (Teaching Support Roles). Looking back, I wish I could have done more reading, as there isn’t much to talk about in terms of active matter research for the next project meeting on Monday.\nReading What is a Complex System? by James Ladyman and Karoline Wiesner. The purpose of reading is to understand how systems out of thermodynamic equilibrium (a feature of complex systems) relate to a wide range of concepts associated with complexity.\n• There was a video that helped clarify what is meant by a Markov chain and a stochastic process being stationary: Markov Chains Clearly Explained! Part - 1. His other videos are helpful as well. For example, when I saw \\(P_{ij}^{(n)} = A_{ij}^n\\) from the n-Step Transition Matrix video (Part 3), it was quite surprising. However, the Part 5 video on hidden Markov models wasn’t very helpful, but reading the appendix in the book was sufficient.\n• What I’ve felt from reading this book (currently at p.90) is that it presents a lot of different ideas and has interesting discussions on the history of science, but I only seem to get excited when it starts mentioning the brain. I’m not sure if I’m necessarily interested in quantifying complexity. From the Apple notes on 28/9/2024:\nAs I’m reading through What is a Complex System?, it seems that the description of a complex system arises as we have more representations at different scales of analysis. The concept of ‘complexity’ was destined to arise as the scientific era evolved.\nNon-equilibrium systems arise because we define what systems are in thermodynamic equilibrium, which are idealisations.\nThings that fail to be idealised fall into this dualistic concept: non-equilibrium."
  },
  {
    "objectID": "notes.html#week-3",
    "href": "notes.html#week-3",
    "title": "Weekly Notes",
    "section": "Week 3",
    "text": "Week 3\n\n2024/9/30 Weekly project meeting\n\nThings to discuss\n\nMeeting with Max on Friday at noon (4th of Oct), thinking of going to Budapest Café\n‘Setting Expectations’ document\nTwo conferences to join:\n• The Dao of Complexity workshop\n• The Statistical Physics of Cognition\nSo, a trip to London, how to sort out things with Clarity, and other arrangements.\nSet up RDSF data storage (Though I checked, OneDrive for Business offers 2TB of storage: Overview of OneDrive for Business)\nBrief plan discussion: reading Mary Coe’s thesis, then Understanding Molecular Simulation book\nAre there MSci students working on this project? \n\n\n\n\n2024/10/2 Why are the clouds at the same height when I look at the cloudy sky?\n\n\n\nView from Brandon Hill\n\n\nWhen we observe clouds appearing at the same height, it’s often due to a phenomenon where a particular layer of the atmosphere has the right conditions for cloud formation. In the troposphere (the lowest layer of the atmosphere), clouds form when the air cools to its dew point, causing water vapour to condense into droplets or ice crystals. This typically happens at specific altitudes where temperature and pressure conditions are ideal for condensation.\nClouds that seem to form at the same height are likely part of the same atmospheric layer, known as a cloud base. The cloud base marks the altitude at which rising air reaches its dew point. If the conditions across the sky are uniform, we’ll see many clouds forming at roughly the same altitude, giving the illusion of a flat layer of clouds.\nCloud formation is fundamentally a non-equilibrium process. It results from dynamic atmospheric conditions like rising air currents, changes in temperature and pressure, and the continuous exchange of energy. These factors drive processes such as condensation and evaporation, which are inherently out of equilibrium. This aligns with the behaviour of active matter systems, where each particle consumes energy to move, keeping the system perpetually out of equilibrium.\nTo create an effective repulsion in our ABP simulations, we consider modifying the wall-fluid interactions to induce a torque that reorients particles away from the surface. One approach might be to introduce an anisotropic interaction potential near the wall. When an ABP approaches the surface, this potential could apply a torque that turns the particle’s propulsion direction away from the wall, effectively reducing its tendency to accumulate there.\n\n\n\n2024/10/5 An idea of beginning the introduction\nThis thesis is ultimately about phase transitions. The central question is: what happens during a transition, for example, from water to ice, from a fluid to a superfluid, or from a paramagnet to a ferromagnet? The physics of such transitions is rich and complex. There are a number of different theoretical tools available to understand them. The study begins by examining thermodynamics and extends to the application of statistical mechanics to these transitions. Additionally, statistical field theory, a fully-fledged field theory similar to what is seen in particle physics or general relativity, will be applied. The goal is to use these approaches, along with concepts of symmetry and other properties, to understand different phases of matter.\nFor a long time, understanding phase transitions was a mystery, especially what’s known as a critical point. It’s an interesting situation: we have something as familiar as water, and it was not until the mid-20th century that significant progress was made. The phase behaviour of water can be examined using a pressure-temperature diagram:\n\n\n\nPhase diagram of water (Cmglee n.d.)\n\nCmglee. n.d. “Phase Diagram of Water Simplified.” https://commons.wikimedia.org/wiki/File:Phase_diagram_of_water_simplified.svg.\n\n\n\nOn the horizontal axis is temperature, and on the vertical axis is pressure.\nThe phase diagram for water features three regions: steam, water, and ice.\nThere’s a point called the triple point, where all three phases coexist, and a critical point, which marks the end of the liquid-gas boundary.\n\nWater is essential, as most of us are mostly water, and yet the physics of what happens at this critical point wasn’t understood for the longest time. It’s a system that is incredibly close to us, yet to understand it requires some of the deepest ideas in physics, particularly the renormalisation group.\nIn this sense, phase transitions form a uniquely positioned subject. They are simultaneously very close to our everyday experience and yet require extremely deep ideas to understand properly. Most other areas of physics are typically far removed from daily life. Quantum mechanics operates on microscopic scales, and astrophysics on cosmological scales, both far from what can be intuitively grasped. But here, some really deep, beautiful puzzles are found in the world around us.",
    "crumbs": [
      "Project Notes",
      "Weekly Notes"
    ]
  },
  {
    "objectID": "notes.html#week-1",
    "href": "notes.html#week-1",
    "title": "Weekly notes on active matter PhD project",
    "section": "",
    "text": "By James Ladyman and Karoline Wiesner\nMy final-year MSci project involved the study of a complex system, foreign exchange markets. Each individual currency was treated as a spin in the Ising model, and by applying E.T. Jaynes’s principle of maximum entropy, we discovered the structure of interactions between these entities. Remarkably, this simple model of magnetism can also describe the phase transitions of liquid-gas systems, as they fall into the same universality class. This model has even been extended to study how critical our brain is, giving rise to the field of the critical brain hypothesis. Therefore, many ideas during my research project were derived from neuroscience papers. The financial market and the brain: both are complex systems.\nAbout a year ago, I read a paper published by James Ladyman, a professor of philosophy of science at Bristol, titled ‘What is a Complex System?’ (Ladyman et al., 2013). As I started my PhD at Bristol, my second supervisor, Francesco, mentioned that he also published a book about complexity. It became clear to me that I should read this book.\nChapter 1 presents The Truisms of Complexity Science as follows:\n1. More is different.\n2. Nonliving systems can generate order.\n3. Complexity can come from simplicity.\n4. Coordinated behaviour does not require an overall controller.\n5. Complex systems are often modelled as networks or information processing systems.\n6. There are various kinds of invariance and forms of universal behaviour in complex systems.\n7. Complexity science is computational and probabilistic.\n8. Complexity science involves multiple disciplines.\n9. There is a difference between the order that complex systems produce and the order of the complex systems themselves.\nFeatures that are necessary and sufficient for which kinds of complexity and complex system are as follows:\n1. Numerosity: complex systems involve many interactions among many components.\n2. Disorder and diversity: the interactions in a complex system are not coordinated or controlled centrally, and the components may differ.\n3. Feedback: the interactions in complex systems are iterated so that there is feedback from previous interactions on a time scale relevant to the system’s emergent dynamics.\n4. Non-equilibrium: complex systems are open to the environment and are often driven by something external.\n5. Spontaneous order and self-organisation: complex systems exhibit structure and order that arises out of the interactions among their parts.\n6. Nonlinearity: complex systems exhibit nonlinear dependence on parameters or external drivers.\n7. Robustness: the structure and function of complex systems is stable under relevant perturbations.\n8. Nested structure and modularity: there may be multiple scales of structure, clustering and specialisation of function in complex systems.\n9. History and memory: complex systems often require a very long history to exist and often store information about history.\n10. Adaptive behaviour: complex systems are often able to modify their behaviour depending on the state of the environment and the predictions they make about it."
  },
  {
    "objectID": "index.html#general",
    "href": "index.html#general",
    "title": "Project Description",
    "section": "General",
    "text": "General\nWeekly update of my TSR (Teaching Support Roles)\nDocument search\nUpcoming events by Nonlinear and Complex Physics Group\nCourses to audit\nMPAGS Training Modules\nPhysics PGR SharePoint site: These pages should provide you with a ‘one-stop-shop’ for all of your PGR needs, including information about progress procedures, forms and examinations.\nMyERP",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#it",
    "href": "index.html#it",
    "title": "Project Description",
    "section": "IT",
    "text": "IT\nACRC HPC Documentation and User Guides\nBuying and borrowing IT\nIntroducing HOOMD-blue: HOOMD-blue is a Python package that performs Molecular Dynamics and hard particle Monte Carlo simulations. HOOMD-blue is general and can be used to model nanoparticles, bead-spring polymers, active matter, and many other types of systems.\nData Science and Research Software Engineering Training\nBDDS Python workshops\nQuarto Tutorial",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "mylammps/SECURITY.html",
    "href": "mylammps/SECURITY.html",
    "title": "Security Policy",
    "section": "",
    "text": "Security Policy\nLAMMPS is designed as a user-level application to conduct computer simulations for research using classical mechanics. As such LAMMPS depends to some degrees on users providing correctly formatted input and LAMMPS needs to read and write files based on uncontrolled user input. As a parallel application for use in high-performance computing environments, performance critical steps are also done without checking data.\nLAMMPS also is interfaced to a number of external libraries, including libraries with experimental research software, that are not validated and tested by the LAMMPS developers, so it is easy to import bad behavior from calling functions in one of those libraries.\nThus is is quite easy to crash LAMMPS through malicious input and do all kinds of file system manipulations. And because of that LAMMPS should NEVER be compiled or run as superuser, either from a “root” or “administrator” account directly or indirectly via “sudo” or “su”.\nTherefore what could be seen as a security vulnerability is usually either a user mistake or a bug in the code. Bugs can be reported in the LAMMPS project issue tracker on GitHub.\nTo mitigate issues with using homoglyphs or bidirectional reordering in unicode, which have been demonstrated as a vector to obfuscate and hide malicious changes to the source code, all LAMMPS submissions are checked for unicode characters and only all-ASCII source code is accepted.\n\n\nVersion Updates\nLAMMPS follows a continuous release development model. We aim to keep the development version (develop branch) always fully functional and employ a variety of automatic testing procedures to detect failures of existing functionality from adding or modifying features. Most of those tests are run on pull requests and must be passed before merging to the develop branch. The develop branch is protected, so all changes must be submitted as a pull request and thus cannot avoid the automated tests.\nAdditional tests are run after merging. Before releases are made all tests must have cleared. Then a release tag is applied and the release branch is fast-forwarded to that tag. This is referred to to as a “feature release”. Bug fixes and updates are applied first to the develop branch. Later, they appear in the release branch when the next patch release occurs. For stable releases, backported bug fixes and infrastructure updates are first applied to the maintenance branch and then merged to stable and published as “updates”. For a new stable release the stable branch is updated to the corresponding state of the release branch and a new stable tag is applied in addition to the release tag."
  },
  {
    "objectID": "mylammps/doc/documentation_conventions.html",
    "href": "mylammps/doc/documentation_conventions.html",
    "title": "Outline of LAMMPS documentation file conventions",
    "section": "",
    "text": "This purpose of this document is to provide a point of reference for LAMMPS developers and contributors as to what conventions should be used to structure and format files in the LAMMPS manual.\nLast change: 2022-12-30\n\n\nIn fall 2019, the LAMMPS documentation file format has changed from a home grown markup designed to generate HTML format files only, to [reStructuredText](https://docutils.sourceforge.io/rst.html&gt;. For a transition period all files in the old .txt format were transparently converted to .rst and then processed. The txt2rst tool is still included in the distribution to obtain an initial .rst file for legacy integration into the manual. Since that transition to reStructured text, many of the artifacts of the translation have been removed though, and parts of the documentation refactored and expanded to take advantage of the capabilities reStructuredText and associated tools. The conversion from the source to the final formats (HTML, PDF, and optionally e-book reader formats ePUB and MOBI) is mostly automated and controlled by a Makefile in the doc folder. This makefile assumes that the processing is done on a Unix-like machine and Python 3.5 or later and a matching venv module are available. Additional Python packages (like the Sphinx tool and several extensions) are transparently installed into a virtual environment over the internet using the pip package manager. Further requirements and details are discussed in the manual.\n\n\n\nThe refactoring and improving of the documentation is an ongoing process, so statements in this document may not always be fully up-to-date. When in doubt, contact the LAMMPS developers.\n\n\n\nThe layout and formatting of added files should follow the example of the existing files. Since many of those were initially derived from their former .txt format versions and the manual has been maintained in that format for many years, there is a large degree of consistency already, so comparison with similar files should give you a good idea what kind of information and sections are needed.\n\n\n\nFor headlines we try to follow the conventions posted here: https://documentation-style-guide-sphinx.readthedocs.io/en/latest/style-guide.html#headings It seems to be sufficient to have this consistent only within any single file and it is not (yet) enforced strictly, but making this globally consistent makes it easier to move sections around.\nFile names, folders, paths, (shell) commands, definitions, makefile settings and similar should be formatted as “literals” with double backward quotes bracketing the item: ``path/to/some/file``\nKeywords and options are formatted in italics: *option*\nMathematical expressions, equations, symbols are typeset using either a .. math: block or the :math: role.\nGroups of shell commands or LAMMPS input script or C/C++/Python source code should be typeset into a .. code-block:: section. A syntax highlighting extension for LAMMPS input scripts is provided, so LAMMPS can be used to indicate the language in the code block in addition to bash, c, c++, console, csh, diff',fortran,json,make,perl,powershell,python,sh, ortcl,text, oryaml.  When no syntax style is indicated, no syntax highlighting is performed.  When typesetting commands executed on the shell, please do not prefix commands with a shell prompt and usebashhighlighting, except when the block also shows the output from that command.  In the latter case, please use a dollar sign as the shell prompt andconsole` for syntax highlighting.\nAs an alternative, e.g. to typeset the syntax of file formats a .. parsed-literal:: block can be used, which allows some formatting directives, which means that related characters need to be escaped with a preceding backslash: \\*.\nFor more compact display of alternatives (e.g. compilation or configuration directions for CMake versus GNU make) a .. tabs:: block can be used, followed by multiple .. tab:: blocks, one for each alternative. This is only used for HTML output. For other outputs, the .. tabs:: directive is transparently removed and the individual .. tab:: blocks will be replaced with an `.. admonition::`` block. Thus in PDF and ePUB output those will be realized as sequential and plain notes.\nSpecial remarks can be highlighted with a .. note:: block and strong warnings can be put into a .. warning:: block. For notes with a title, use .. admonition:: title text followed by :class: note.\n\n\n\nWhen adding a new style (e.g. pair style or a compute or a fix) or a new command, it is required to include the corresponding documentation in reStructuredText format. Those are often new files that need to be added. In order to be included in the documentation, those new files need to be referenced in a .. toctree:: block. Most of those use patterns with wild cards, so the addition will be automatic. However, those additions also need to be added to some lists of styles or commands. The make style\\_check command when executed in the doc folder will perform a test and report any missing entries and list the affected files. Any references defined with .. \\_refname: have to be unique across all documentation files and this can be checked for with make anchor\\_check. Finally, a spell-check should be done, which is triggered via make spelling. Any offenses need to be corrected and false positives should be added to the file utils/sphinx-config/false\\_positives.txt.\n\n\n\nWhen adding a new package, the package must be added to the list of packages in the Packages_list.rst file. If additional build instructions need to be followed, a corresponding section should be added to the Build_extras.rst file and linked from the list at the top of the file as well as the equivalent list in the Build_packages.rst file.\nA detailed description of the package and pointers to configuration, included commands and examples, external pages, author information and more should be added to the Packages_details.rst file."
  },
  {
    "objectID": "mylammps/doc/documentation_conventions.html#file-format-and-tools",
    "href": "mylammps/doc/documentation_conventions.html#file-format-and-tools",
    "title": "Outline of LAMMPS documentation file conventions",
    "section": "",
    "text": "In fall 2019, the LAMMPS documentation file format has changed from a home grown markup designed to generate HTML format files only, to [reStructuredText](https://docutils.sourceforge.io/rst.html&gt;. For a transition period all files in the old .txt format were transparently converted to .rst and then processed. The txt2rst tool is still included in the distribution to obtain an initial .rst file for legacy integration into the manual. Since that transition to reStructured text, many of the artifacts of the translation have been removed though, and parts of the documentation refactored and expanded to take advantage of the capabilities reStructuredText and associated tools. The conversion from the source to the final formats (HTML, PDF, and optionally e-book reader formats ePUB and MOBI) is mostly automated and controlled by a Makefile in the doc folder. This makefile assumes that the processing is done on a Unix-like machine and Python 3.5 or later and a matching venv module are available. Additional Python packages (like the Sphinx tool and several extensions) are transparently installed into a virtual environment over the internet using the pip package manager. Further requirements and details are discussed in the manual."
  },
  {
    "objectID": "mylammps/doc/documentation_conventions.html#work-in-progress",
    "href": "mylammps/doc/documentation_conventions.html#work-in-progress",
    "title": "Outline of LAMMPS documentation file conventions",
    "section": "",
    "text": "The refactoring and improving of the documentation is an ongoing process, so statements in this document may not always be fully up-to-date. When in doubt, contact the LAMMPS developers."
  },
  {
    "objectID": "mylammps/doc/documentation_conventions.html#general-structure",
    "href": "mylammps/doc/documentation_conventions.html#general-structure",
    "title": "Outline of LAMMPS documentation file conventions",
    "section": "",
    "text": "The layout and formatting of added files should follow the example of the existing files. Since many of those were initially derived from their former .txt format versions and the manual has been maintained in that format for many years, there is a large degree of consistency already, so comparison with similar files should give you a good idea what kind of information and sections are needed."
  },
  {
    "objectID": "mylammps/doc/documentation_conventions.html#formatting-conventions",
    "href": "mylammps/doc/documentation_conventions.html#formatting-conventions",
    "title": "Outline of LAMMPS documentation file conventions",
    "section": "",
    "text": "For headlines we try to follow the conventions posted here: https://documentation-style-guide-sphinx.readthedocs.io/en/latest/style-guide.html#headings It seems to be sufficient to have this consistent only within any single file and it is not (yet) enforced strictly, but making this globally consistent makes it easier to move sections around.\nFile names, folders, paths, (shell) commands, definitions, makefile settings and similar should be formatted as “literals” with double backward quotes bracketing the item: ``path/to/some/file``\nKeywords and options are formatted in italics: *option*\nMathematical expressions, equations, symbols are typeset using either a .. math: block or the :math: role.\nGroups of shell commands or LAMMPS input script or C/C++/Python source code should be typeset into a .. code-block:: section. A syntax highlighting extension for LAMMPS input scripts is provided, so LAMMPS can be used to indicate the language in the code block in addition to bash, c, c++, console, csh, diff',fortran,json,make,perl,powershell,python,sh, ortcl,text, oryaml.  When no syntax style is indicated, no syntax highlighting is performed.  When typesetting commands executed on the shell, please do not prefix commands with a shell prompt and usebashhighlighting, except when the block also shows the output from that command.  In the latter case, please use a dollar sign as the shell prompt andconsole` for syntax highlighting.\nAs an alternative, e.g. to typeset the syntax of file formats a .. parsed-literal:: block can be used, which allows some formatting directives, which means that related characters need to be escaped with a preceding backslash: \\*.\nFor more compact display of alternatives (e.g. compilation or configuration directions for CMake versus GNU make) a .. tabs:: block can be used, followed by multiple .. tab:: blocks, one for each alternative. This is only used for HTML output. For other outputs, the .. tabs:: directive is transparently removed and the individual .. tab:: blocks will be replaced with an `.. admonition::`` block. Thus in PDF and ePUB output those will be realized as sequential and plain notes.\nSpecial remarks can be highlighted with a .. note:: block and strong warnings can be put into a .. warning:: block. For notes with a title, use .. admonition:: title text followed by :class: note."
  },
  {
    "objectID": "mylammps/doc/documentation_conventions.html#required-steps-when-adding-a-custom-style-to-lammps",
    "href": "mylammps/doc/documentation_conventions.html#required-steps-when-adding-a-custom-style-to-lammps",
    "title": "Outline of LAMMPS documentation file conventions",
    "section": "",
    "text": "When adding a new style (e.g. pair style or a compute or a fix) or a new command, it is required to include the corresponding documentation in reStructuredText format. Those are often new files that need to be added. In order to be included in the documentation, those new files need to be referenced in a .. toctree:: block. Most of those use patterns with wild cards, so the addition will be automatic. However, those additions also need to be added to some lists of styles or commands. The make style\\_check command when executed in the doc folder will perform a test and report any missing entries and list the affected files. Any references defined with .. \\_refname: have to be unique across all documentation files and this can be checked for with make anchor\\_check. Finally, a spell-check should be done, which is triggered via make spelling. Any offenses need to be corrected and false positives should be added to the file utils/sphinx-config/false\\_positives.txt."
  },
  {
    "objectID": "mylammps/doc/documentation_conventions.html#required-additional-steps-when-adding-a-new-package-to-lammps",
    "href": "mylammps/doc/documentation_conventions.html#required-additional-steps-when-adding-a-new-package-to-lammps",
    "title": "Outline of LAMMPS documentation file conventions",
    "section": "",
    "text": "When adding a new package, the package must be added to the list of packages in the Packages_list.rst file. If additional build instructions need to be followed, a corresponding section should be added to the Build_extras.rst file and linked from the list at the top of the file as well as the equivalent list in the Build_packages.rst file.\nA detailed description of the package and pointers to configuration, included commands and examples, external pages, author information and more should be added to the Packages_details.rst file."
  },
  {
    "objectID": "mylammps/lib/kokkos/SECURITY.html",
    "href": "mylammps/lib/kokkos/SECURITY.html",
    "title": "Reporting Security Issues",
    "section": "",
    "text": "Reporting Security Issues\nTo report a security issue, please email lebrungrandt@ornl.gov and crtrott@sandia.gov with a description of the issue, the steps you took to create the issue, affected versions, and, if known, mitigations for the issue.\nOur vulnerability management team will respond within 5 working days of your email. If the issue is confirmed as a vulnerability, we will open a Security Advisory and acknowledge your contributions as part of it. This project follows a 90 day disclosure timeline."
  },
  {
    "objectID": "mylammps/lib/kokkos/CONTRIBUTING.html",
    "href": "mylammps/lib/kokkos/CONTRIBUTING.html",
    "title": "Contributing to Kokkos",
    "section": "",
    "text": "We actively welcome pull requests. 1. Fork the repo and create your branch from develop. 2. If you’ve added code that should be tested, add tests. 3. If you’ve changed APIs, update the documentation. 4. Ensure the test suite passes.\n\n\n\nWe use GitHub issues to track public bugs. Please ensure your description is clear and has sufficient instructions to be able to reproduce the issue.\n\n\n\nBy contributing to Kokkos, you agree that your contributions will be licensed under the LICENSE file in the root directory of this source tree."
  },
  {
    "objectID": "mylammps/lib/kokkos/CONTRIBUTING.html#pull-requests",
    "href": "mylammps/lib/kokkos/CONTRIBUTING.html#pull-requests",
    "title": "Contributing to Kokkos",
    "section": "",
    "text": "We actively welcome pull requests. 1. Fork the repo and create your branch from develop. 2. If you’ve added code that should be tested, add tests. 3. If you’ve changed APIs, update the documentation. 4. Ensure the test suite passes."
  },
  {
    "objectID": "mylammps/lib/kokkos/CONTRIBUTING.html#issues",
    "href": "mylammps/lib/kokkos/CONTRIBUTING.html#issues",
    "title": "Contributing to Kokkos",
    "section": "",
    "text": "We use GitHub issues to track public bugs. Please ensure your description is clear and has sufficient instructions to be able to reproduce the issue."
  },
  {
    "objectID": "mylammps/lib/kokkos/CONTRIBUTING.html#license",
    "href": "mylammps/lib/kokkos/CONTRIBUTING.html#license",
    "title": "Contributing to Kokkos",
    "section": "",
    "text": "By contributing to Kokkos, you agree that your contributions will be licensed under the LICENSE file in the root directory of this source tree."
  },
  {
    "objectID": "mylammps/lib/kokkos/Spack.html",
    "href": "mylammps/lib/kokkos/Spack.html",
    "title": "Kokkos Spack",
    "section": "",
    "text": "Kokkos"
  },
  {
    "objectID": "mylammps/lib/kokkos/Spack.html#getting-started",
    "href": "mylammps/lib/kokkos/Spack.html#getting-started",
    "title": "Kokkos Spack",
    "section": "Getting Started",
    "text": "Getting Started\nMake sure you have downloaded Spack. The easiest way to configure the Spack environment is:\n&gt; source spack/share/spack/setup-env.sh\nwith other scripts available for other shells. You can display information about how to install packages with:\n&gt; spack info kokkos\nThis will print all the information about how to install Kokkos with Spack. For detailed instructions on how to use Spack, see the User Manual."
  },
  {
    "objectID": "mylammps/lib/kokkos/Spack.html#setting-up-spack-avoiding-the-package-cascade",
    "href": "mylammps/lib/kokkos/Spack.html#setting-up-spack-avoiding-the-package-cascade",
    "title": "Kokkos Spack",
    "section": "Setting Up Spack: Avoiding the Package Cascade",
    "text": "Setting Up Spack: Avoiding the Package Cascade\nBy default, Spack doesn’t ‘see’ anything on your system - including things like CMake and CUDA. This can be limited by adding a packages.yaml to your $HOME/.spack folder that includes CMake (and CUDA, if applicable). For example, your packages.yaml file could be:\npackages:\n  cuda:\n    buildable: false\n    externals:\n    - prefix: /opt/local/ppc64le-pwr8-nvidia/cuda/10.1.243\n      spec: cuda@10.1.243\n    - modules:\n      - cuda/10.1.243\n      spec: cuda@10.1.243\n  cmake:\n    buildable: false\n    externals:\n    - prefix: /opt/local/ppc64le/cmake/3.16.8\n      spec: cmake@3.16.8\n    - modules:\n      - cmake/3.16.8\n      spec: cmake@3.16.8\nThe modules entry is only necessary on systems that require loading Modules (i.e. most DOE systems). The buildable flag is useful to make sure Spack crashes if there is a path error, rather than having a type-o and Spack rebuilding everything because cmake isn’t found. You can verify your environment is set up correctly by running spack graph or spack spec. For example:\n&gt; spack graph kokkos +cuda\no  kokkos\n|\\\no |  cuda\n /\no  cmake\nWithout the existing CUDA and CMake being identified in packages.yaml, a (subset!) of the output would be:\no  kokkos\n|\\\n| o  cmake\n| |\\\n| | | |\\\n| | | | | |\\\n| | | | | | | |\\\n| | | | | | | | | |\\\n| | | | | | | o | | |  libarchive\n| | | | | | | |\\ \\ \\ \\\n| | | | | | | | | |\\ \\ \\ \\\n| | | | | | | | | | | | |_|/\n| | | | | | | | | | | |/| |\n| | | | | | | | | | | | | o  curl\n| | |_|_|_|_|_|_|_|_|_|_|/|\n| |/| | | |_|_|_|_|_|_|_|/\n| | | | |/| | | | | | | |\n| | | | o | | | | | | | |  openssl\n| |/| | | | | | | | | | |\n| | | | | | | | | | o | |  libxml2\n| | |_|_|_|_|_|_|_|/| | |\n| | | | | | | | | | |\\ \\ \\\n| o | | | | | | | | | | | |  zlib\n|  / / / / / / / / / / / /\n| o | | | | | | | | | | |  xz\n|  / / / / / / / / / / /\n| o | | | | | | | | | |  rhash\n|  / / / / / / / / / /\n| | | | o | | | | | |  nettle\n| | | | |\\ \\ \\ \\ \\ \\ \\\n| | | o | | | | | | | |  libuv\n| | | | o | | | | | | |  autoconf\n| | |_|/| | | | | | | |\n| | | | |/ / / / / / /\n| o | | | | | | | | |  perl\n| o | | | | | | | | |  gdbm\n| o | | | | | | | | |  readline"
  },
  {
    "objectID": "mylammps/lib/kokkos/Spack.html#configuring-kokkos-as-a-project-dependency",
    "href": "mylammps/lib/kokkos/Spack.html#configuring-kokkos-as-a-project-dependency",
    "title": "Kokkos Spack",
    "section": "Configuring Kokkos as a Project Dependency",
    "text": "Configuring Kokkos as a Project Dependency\nSay you have a project “SuperScience” which needs to use Kokkos. In your package.py file, you would generally include something like:\nclass SuperScience(CMakePackage):\n  ...\n  depends_on(\"kokkos\")\nOften projects want to tweak behavior when using certain features, e.g.\n  depends_on(\"kokkos+cuda\", when=\"+cuda\")\nif your project needs CUDA-specific logic to configure and build. This illustrates the general principle in Spack of “flowing-up”. A user requests a feature in the final app:\n&gt; spack install superscience+cuda\nThis flows upstream to the Kokkos dependency, causing the kokkos+cuda variant to build. The downstream app (SuperScience) tells the upstream app (Kokkos) how to build.\nBecause Kokkos is a performance portability library, it somewhat inverts this principle. Kokkos “flows-down”, telling your application how best to configure for performance. Rather than a downstream app (SuperScience) telling the upstream (Kokkos) what variants to build, a pre-built Kokkos should be telling the downstream app SuperScience what variants to use. Kokkos works best when there is an “expert” configuration installed on your system. Your build should simply request -DKokkos_ROOT=&lt;BEST_KOKKOS_FOR_MY_SYSTEM&gt; and configure appropriately based on the Kokkos it finds.\nKokkos has many, many build variants. Where possible, projects should only depend on a general Kokkos, not specific variants. We recommend instead adding for each system you build on a Kokkos configuration to your packages.yaml file (usually found in ~/.spack for specific users). For a Xeon + Volta system, this could look like:\n kokkos:\n  variants: +cuda +openmp +cuda_lambda +wrapper ^cuda@10.1 cuda_arch=70\n  compiler: [gcc@7.2.0]\nwhich gives the “best” Kokkos configuration as CUDA+OpenMP optimized for a Volta 70 architecture using CUDA 10.1. It also enables support for CUDA Lambdas. The +wrapper option tells Kokkos to build with the special nvcc_wrapper (more below). Note here that we use the built-in cuda_arch variant of Spack to specify the archicture. For a Haswell system, we use\n kokkos:\n  variants: +openmp std=14 target=haswell\n  compiler: [intel@18]\nwhich uses the built-in microarchitecture variants of Spack. Consult the Spack documentation for more details of Spack microarchitectures and CUDA architectures. Spack does not currently provide an AMD GPU microarchitecture option. If building for HIP or an AMD GPU, Kokkos provides an amd_gpu_arch similar to cuda_arch.\n kokkos:\n  variants: +hip amd_gpu_arch=vega900\nWithout an optimal default in your packages.yaml file, it is highly likely that the default Kokkos configuration you get will not be what you want. For example, CUDA is not enabled by default (there is no easy logic to conditionally activate this for CUDA-enabled systems). If you don’t specify a CUDA build variant in a packages.yaml and you build your Kokkos-dependent project:\n&gt; spack install superscience\nyou may end up just getting the default Kokkos (i.e. Serial). Before running spack install &lt;package&gt; we recommend running spack spec &lt;package&gt; to confirm your dependency tree is correct. For example, with Kokkos Kernels:\nkokkos-kernels@3.0%gcc@8.3.0~blas build_type=RelWithDebInfo ~cblas~complex_double~complex_float~cublas~cuda cuda_arch=none ~cusparse~diy+double execspace_cuda=auto execspace_openmp=auto execspace_serial=auto execspace_threads=auto ~float~lapack~lapacke+layoutleft~layoutright memspace_cudaspace=auto memspace_cudauvmspace=auto +memspace_hostspace~mkl+offset_int+offset_size_t~openmp+ordinal_int~ordinal_int64_t~serial~superlu arch=linux-rhel7-skylake_avx512\n    ^cmake@3.16.2%gcc@8.3.0~doc+ncurses+openssl+ownlibs~qt arch=linux-rhel7-skylake_avx512\n        ^kokkos@3.0%gcc@8.3.0~aggressive_vectorization~amdavx~armv80~armv81~armv8_thunderx~armv8_tx2~bdw~bgq build_type=RelWithDebInfo ~carrizo~compiler_warnings+cuda cuda_arch=none +cuda_lambda~cuda_ldg_intrinsic~cuda_relocatable_device_code~cuda_uvm~debug~debug_bounds_check~debug_dualview_modify_check~deprecated_code~diy~epyc~examples~explicit_instantiation~fiji~gfx901~hpx~hpx_async_dispatch~hsw~hwloc~kaveri~kepler30~kepler32~kepler35~kepler37~knc~knl~maxwell50~maxwell52~maxwell53~memkind~numactl+openmp~pascal60~pascal61~power7~power8~power9+profiling~profiling_load_print~pthread~qthread~rocm~ryzen~serial~skx~snb std=14 ~tests~turing75~vega+volta70~volta72+wrapper~wsm arch=linux-rhel7-skylake_avx512\n                ^cuda@10.1%gcc@8.3.0 arch=linux-rhel7-skylake_avx512\n                        ^kokkos-nvcc-wrapper@old%gcc@8.3.0 build_type=RelWithDebInfo +mpi arch=linux-rhel7-skylake_avx512\n                                    ^openmpi@4.0.2%gcc@8.3.0~cuda+cxx_exceptions fabrics=none ~java~legacylaunchers~memchecker patches=073477a76bba780c67c36e959cd3ee6910743e2735c7e76850ffba6791d498e4 ~pmi schedulers=none ~sqlite3~thread_multiple+vt arch=linux-rhel7-skylake_avx512\nThe output can be very verbose, but we can verify the expected kokkos:\nkokkos@3.0%gcc@8.3.0~aggressive_vectorization~amdavx~armv80~armv81~armv8_thunderx~armv8_tx2~bdw~bgq build_type=RelWithDebInfo ~carrizo~compiler_warnings+cuda cuda_arch=none +cuda_lambda~cuda_ldg_intrinsic~cuda_relocatable_device_code~cuda_uvm~debug~debug_bounds_check~debug_dualview_modify_check~deprecated_code~diy~epyc~examples~explicit_instantiation~fiji~gfx901~hpx~hpx_async_dispatch~hsw~hwloc~kaveri~kepler30~kepler32~kepler35~kepler37~knc~knl~maxwell50~maxwell52~maxwell53~memkind~numactl+openmp~pascal60~pascal61~power7~power8~power9+profiling~profiling_load_print~pthread~qthread~rocm~ryzen~serial~skx~snb std=11 ~tests~turing75~vega+volta70~volta72+wrapper~wsm arch=linux-rhel7-skylake_avx512\nWe see that we do have +volta70 and +wrapper, e.g.\n\nSpack Environments\nThe encouraged way to use Spack is with Spack environments (more details here). Rather than installing packages one-at-a-time, you add packages to an environment. After adding all packages, you concretize and install them all. Using environments, one can explicitly add a desired Kokkos for the environment, e.g.\n&gt; spack add kokkos +cuda +cuda_lambda +volta70\n&gt; spack add my_project +my_variant\n&gt; ...\n&gt; spack install\nAll packages within the environment will build against the CUDA-enabled Kokkos, even if they only request a default Kokkos."
  },
  {
    "objectID": "mylammps/lib/kokkos/Spack.html#nvcc-wrapper",
    "href": "mylammps/lib/kokkos/Spack.html#nvcc-wrapper",
    "title": "Kokkos Spack",
    "section": "NVCC Wrapper",
    "text": "NVCC Wrapper\nKokkos is a C++ project, but often builds for the CUDA backend. This is particularly problematic with CMake. At this point, nvcc does not accept all the flags that normally get passed to a C++ compiler. Kokkos provides nvcc_wrapper that identifies correctly as a C++ compiler to CMake and accepts C++ flags, but uses nvcc as the underlying compiler. nvcc itself also uses an underlying host compiler, e.g. GCC.\nIn Spack, the underlying host compiler is specified as below, e.g.:\n&gt; spack install package %gcc@8.0.0\nThis is still valid for Kokkos. To use the special wrapper for CUDA builds, request a desired compiler and simply add the +wrapper variant.\n&gt; spack install kokkos +cuda +wrapper %gcc@7.2.0\nDownstream projects depending on Kokkos need to override their compiler. Kokkos provides the compiler in a kokkos_cxx variable, which points to either nvcc_wrapper when needed or the regular compiler otherwise. Spack projects already do this to use MPI compiler wrappers.\ndef cmake_args(self):\n  options = []\n  ...\n  options.append(\"-DCMAKE_CXX_COMPILER=%s\" % self.spec[\"kokkos\"].kokkos_cxx)\n  ...\n  return options\nNote: nvcc_wrapper works with the MPI compiler wrappers. If building your project with MPI, do NOT set your compiler to nvcc_wrapper. Instead set your compiler to mpicxx and nvcc_wrapper will be used under the hood.\ndef cmake_args(self):\n  options = []\n  ...\n  options.append(\"-DCMAKE_CXX_COMPILER=%s\" % self.spec[\"mpi\"].mpicxx)\n  ...\n  return options\nTo accomplish this, nvcc_wrapper must depend on MPI (even though it uses no MPI). This has the unfortunate consequence that Kokkos CUDA projects not using MPI will implicitly depend on MPI anyway. This behavior is necessary for now, but will hopefully be removed later. When using environments, if MPI is not needed, you can remove the MPI dependency with:\n&gt; spack add kokkos-nvcc-wrapper ~mpi"
  },
  {
    "objectID": "mylammps/lib/kokkos/Spack.html#developing-with-spack",
    "href": "mylammps/lib/kokkos/Spack.html#developing-with-spack",
    "title": "Kokkos Spack",
    "section": "Developing With Spack",
    "text": "Developing With Spack\nSpack has historically been much more suited to deployment of mature packages than active testing or developing. However, recent features have improved support for development. Future releases are likely to make this even easier and incorporate Git integration. The most common commands will do a full build and install of the packages. If doing development, you may wish to merely set up a build environment. This allows you to modify the source and re-build. In this case, you can stop after configuring. Suppose you have Kokkos checkout in the folder kokkos-src:\n&gt; spack dev-build -d kokkos-src -u cmake kokkos@develop +wrapper +openmp\nThis sets up a development environment for you in kokkos-src which you can use (Bash example shown): Note: Always specify develop as the version when doing dev-build, except in rare cases. You are usually developing a feature branch that will merge into develop, hence you are making a new develop branch.\n&gt; cd kokko-src\n&gt; source spack-build-env.txt\n&gt; cd spack-build\n&gt; make\nBefore sourcing the Spack development environment, you may wish to save your current environment:\n&gt; declare -px &gt; myenv.sh\nWhen done with Spack, you can then restore your original environment:\n&gt; source myenv.sh"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html",
    "href": "mylammps/lib/kokkos/CHANGELOG.html",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\n\n\n\n\n\nMI300 support unified memory support #6877\n\n\n\n\n\n\nSerial: Use the provided execution space instance in TeamPolicy #6951\nnvcc_wrapper: bring back support for --fmad option #6931\nFix CUDA reduction overflow for RangePolicy #6578\n\n\n\n\n\nFull Changelog\n\n\n\nAdd Experimental::sort_by_key(exec, keys, values) algorithm #6801\n\n\n\n\n\n\n\nExperimental multi-GPU support (from the same process) #6782\nLink against CUDA libraries even with KOKKOS_ENABLE_COMPILE_AS_CMAKE_LANGUAGE #6701\nDon’t use the compiler launcher script if the CMake compile language is CUDA. #6704\nnvcc(wrapper): adding “long” and “short” versions for all flags #6615\n\n\n\n\n\nFix compilation when using amdclang (with ROCm &gt;= 5.7) and RDC #6857\nUse rocthrust for sorting, when available #6793\n\n\n\n\n\nWe only support OneAPI SYCL implementation: add check during initialization\n\nError out on initialization if the backend is different from ext_oneapi_* #6784\nFilter GPU devices for ext_onapi_* GPU devices #6758\n\nPerformance Improvements\n\nAvoid unnecessary zero-memset of the scratch flags in SYCL #6739\nUse host-pinned memory to copy reduction/scan result #6500\n\nAddress deprecations after oneAPI 2023.2.0 #6577\nMake sure to call find_dependency for oneDPL if necessary #6870\n\n\n\n\n\nUse LLVM extensions for dynamic shared memory #6380\nGuard scratch memory usage in ParallelReduce #6585\nUpdate linker flags for Intel GPUs update #6735\nImprove handling of printf on Intel GPUs #6652\n\n\n\n\n\nAdd atomics support #6446\nMake the OpenACC backend asynchronous #6772\n\n\n\n\n\nAdd missing broadcast to TeamThreadRange parallel_scan #6601\n\n\n\n\n\nImprove performance of view initializations and filling with zeros #6573\n\n\n\n\n\n\nImprove performance of random number generation when using a normal distribution on GPUs #6556\nAllocate temporary view with the user-provided execution space instance and do not initialize in unique algorithm #6598\nAdd deduction guide for Kokkos::Array #6373\nProvide new public headers &lt;Kokkos_Clamp.hpp&gt; and &lt;Kokkos_MinMax.hpp&gt; #6687\nFix/improvement to remove_if parallel algorithm: use the provided execution space instance for temporary allocations and drop unnecessaryinitialization + avoid evaluating twice the predicate during final pass #6747\nAdd runtime function to query the number of devices and make device ID consistent with KOKKOS_VISIBLE_DEVICES #6713\nsimd: support vector_aligned_tag #6243\nAvoid unnecessary allocation when default constructing Bitset #6524\nFix constness for views in std algorithms #6813\nImprove error message on unsafe implicit conversion in MDRangePolicy #6855\nCTAD (deduction guides) for RangePolicy #6850\nCTAD (deduction guides) for MDRangePolicy #5516\n\n\n\n\n\nRequire Kokkos_ENABLE_ATOMICS_BYPASS option to bypass atomic operation for Serial backend only builds #6692\nAdd support for RISCV and the Milk-V’s Pioneer #6773\nAdd C++26 standard to CMake setup #6733\nFix Makefile when using gnu_generate_makefile.sh and make &gt;= 4.3 #6606\nCuda: Fix configuring with CMake &gt;= 3.28.4 - temporary fallback to internal CudaToolkit.cmake #6898\n\n\n\n\n\nRemove all DEPRECATED_CODE_3 option and all code that was guarded by it #6523\nDrop guards to accommodate external code defining KOKKOS_ASSERT #6665\nProfiling::ProfilingSection(std::string) constructor marked explicit and nodiscard #6690\nAdd bound check preconditions for RangePolicy and MDRangePolicy #6617 #6726\nAdd checks for unsafe implicit conversions in RangePolicy #6754\nRemove Kokkos::[b]half_t volatile overloads #6579\nRemove KOKKOS_IMPL_DO_NOT_USE_PRINTF #6593\nCheck matching static extents in View constructor #5190\nTools(profiling): fix typo Kokkos_Tools_Optim[i]zationGoal #6642\nRemove variadic range policy constructor (disallow passing multiple trailing chunk size arguments) #6845\nImprove message on view out of bounds access and always abort #6861\nDrop KOKKOS_ENABLE_INTEL_MM_ALLOC macro #6797\nRemove Kokkos::Experimental::LogicalMemorySpace (without going through deprecation) #6557\nRemove Experimental::HBWSpace and support for linking against memkind #6791\nDrop librt TPL and associated KOKKOS_ENABLE_LIBRT macro #6798\nDrop support for old CPU architectures (ARCH_BGQ, ARCH_POWER7, ARCH_WSM and associated ARCH_SSE4 macro) #6806\nDrop support for deprecated command-line arguments and environment variables #6744\n\n\n\n\n\nProvide kokkos_swap as part of Core and deprecate Experimental::swap in Algorithms #6697\nDeprecate {Cuda,HIP}::detect_device_count() and Cuda::[detect_]device_arch() #6710\nDeprecate ExecutionSpace::in_parallel() #6582\n\n\n\n\n\nFix team-level MDRange reductions: #6511\nFix CUDA and SYCL small value type (16-bit) team reductions #5334\nEnable {transform_}exclusive_scan in place #6667\nfill_random overload that do not take an execution space instance argument should fence #6658\nHIP,Cuda,OpenMPTarget: Fixup use provided execution space when copying host inaccessible reduction result #6777\nFix typo in cuda_func_set_attribute[s]_wrapper preventing proper setting of desired occupancy #6786\nAvoid undefined behavior due to conversion between signed and unsigned integers in shift_{right, left}_team_impl #6821\nFix a bug in Makefile.kokkos when using AMD GPU architectures as AMD_GFXYYY #6892\n\n\n\n\n\nFull Changelog\n\n\n\n\n\nAdd warp sync for parallel_reduce to avoid race condition #6630, #6746\n\n\n\n\n\nFix Graph “multiple definition of” linking error (missing inline specifier) #6624\nAdd support for gfx940 (AMD Instinct MI300 GPU) #6671\n\n\n\n\n\n\nCMake: Don’t let Kokkos set CMAKE_CXX_FLAGS for Trilinos builds #6742\n\n\n\n\n\nRemove deprecation warning for AllocationMechanism for GCC &lt;11.0 #6653\nFix bug early tools finalize with non-default host execution instances #6635\nFix various issues for MSVC CUDA builds #6659\nFix “extra ;” warning with -pedantic flag in &lt;Kokkos_SIMD_Scalar.hpp&gt; #6510\n\n\n\n\n\nFull Changelog\n\n\n\nSIMD: significant improvements to SIMD support and alignment with C++26 SIMD\n\nadd Kokkos::abs overload for SIMD types #6069\nadd generator constructors #6347\nconvert binary operators to hidden friends #6320\nadd shift operators #6109\nadd float support #6177\nadd remaining gather_from and scatter_to overloads #6220\ndefine simd math function overloads in the Kokkos namespace #6465, #6487\nKokkos_ENABLE_NATIVE=ON autodetects SIMD types supported #6188\nfix AVX2 SIMD support for ZEN2 AMD CPU #6238\n\nKokkos::printf #6083\nKokkos::sort: support custom comparator #6253\nhalf_t and bhalf_t numeric traits #5778\nhalf_t and bhalf_t mixed comparisons #6407\nhalf_t and bhalf_t mathematical functions #6124\nTeamThreadRange parallel_scan with return value #6090, #6301, #6302, #6303, #6307\nThreadVectorRange parallel_scan with return value #6235, #6242, #6308, #6305, #6292\nAdd team-level std algorithms #6200, #6205, #6207, #6208, #6209, #6210, #6211, #6212, #6213, #6256, #6258, #6350, #6351\nSerial: Allow for distinct execution space instances #6441\n\n\n\n\n\n\n\nFixed potential data race in Cuda parallel_reduce #6236\nUse cudaMallocAsync by default #6402\nBugfix for using Kokkos from a thread of execution #6299\n\n\n\n\n\nNew naming convention for AMD GPU: VEGA906, VEGA908, VEGA90A, NAVI1030 to AMD_GFX906, AMD_GFX908, AMD_GFX90A, AMD_GFX1030 #6266\nAdd initial support for gfx942: #6358\nImprove reduction performance #6229\nDeprecate HIP(hipStream_t,bool) constructor #6401\nAdd support for Graph #6370\nImprove reduction performance when using Teams #6284\nFix concurrency calculation #6479\nFix potential data race in HIP parallel_reduce #6429\n\n\n\n\n\nEnforce external sycl::queues to be in-order #6246\nImprove reduction performance: #6272 #6271 #6270 #6264\nAllow using the SYCL execution space on AMD GPUs #6321\nAllow sorting via native oneDPL to support Views with stride=1 #6322\nMake in-order queues the default via macro #6189\n\n\n\n\n\nSupport Clacc compiler #6250\n\n\n\n\n\n\nAdd missing is_*_view traits and is_*_view_v helper variable templates for DynRankView, DynamicView, OffsetView, ScatterView containers #6195\nMake nvcc_wrapper and compiler_launcher scripts more portable by switching to a #!/usr/bin/env shebang #6357\nAdd an improved Kokkos::malloc / Kokkos::free performance test #6377\nEnsure Views with size==0 can be used with deep_copy #6273\nKokkos::abort is moved to header Kokkos_Abort.hpp #6445\nKOKKOS_ASSERT, KOKKOS_EXPECTS, KOKKOS_ENSURES are moved to header Kokkos_Assert.hpp #6445\nAdd a permuted-index mode to the gups benchmark #6378\nCheck for overflow during backend initialization #6159\nMake constraints on Kokkos::sort more visible #6234 and cleanup API #6239\nAdd converting assignment to DualView: #6474\n\n\n\n\n\nExport Kokkos_CXX_COMPILER_VERSION #6282\nDisable default oneDPL support in Trilinos #6342\n\n\n\n\n\nEnsure that Kokkos::complex only gets instantiated for cv-unqualified floating-point types #6251\nRemoved (deprecated-3) support for volatile join operators in reductions #6385\nEnforce ViewCtorArgs restrictions for create_mirror_view #6304\nSIMD types for ARM NEON are not autodetected anymore but need Kokkos_ARCH_ARM_NEON or Kokkos_ARCH_NATIVE=ON #6394\nRemove #include &lt;iostream&gt; from headers where possible #6482\n\n\n\n\n\nDeprecated Kokkos::vector #6252\nAll host allocation mechanisms except for STD_MALLOC have been deprecated #6341\n\n\n\n\n\nMissing memory fence in RandomPool::free_state functions #6290\nFix for corner case in Kokkos::Experimental::is_partitioned algorithm #6257\nFix initialization of scratch lock variables in the Cuda backend #6433\nFixes for Kokkos::Array #6372\nFixed symlink configure issue for Windows #6241\nOpenMPTarget init-join fix #6444\nFix atomic operations bug for Min and Max #6435\nFix implementation for cyl_bessel_i0 #6484\nFix various NVCC warnings in BinSort, Array, and bit manipulation function templates #6483\n\n\n\n\n\nFull Changelog\n\n\n\nAdd &lt;Kokkos_BitManipulation.hpp&gt; header #4577 #5907 #5967 #6101\nAdd UnorderedMapInsertOpTypes #5877 and documentation #350\nAdd multiple reducers support for team-level parallel reduce #5727\n\n\n\n\n\n\n\nAllow NVCC 12 to compile using C++20 flag #5977\nRemove ability to disable CMake option Kokkos_ENABLE_CUDA_LAMBDA and unconditionally enable CUDA extended lambda support. #5964\nDrop unnecessary fences around the memory allocation when using CudaUVMSpace in views #6008\n\n\n\n\n\nImprove performance for parallel_reduce. Use different parameters for LightWeight kernels #6029 and #6160\n\n\n\n\n\nOnly pass one wrapper object in SYCL reductions #6047\nImprove and simplify parallel_scan implementation #6064\nRemove workaround for submit_barrier not being enqueued properly #5504\nFix guards for using scratch space with SYCL #6003\nFix compiling SYCL with KOKKOS_IMPL_DO_NOT_USE_PRINTF_USAGE #6219\n\n\n\n\n\nImprove hierarchical parallelism for Intel architectures #6043\nEnable Cray compiler for the OpenMPTarget backend. #5889\n\n\n\n\n\nUpdate HPX backend to use HPX’s sender/receiver functionality #5628\nIncrease minimum required HPX version to 1.8.0 #6132\nImplement HPX::in_parallel #6143\n\n\n\n\n\n\nExport CMake Kokkos_{CUDA,HIP}_ARCHITECTURES variables #5919 #5925\nAdd Kokkos::Profiling::ScopedRegion #5959 #5972\nAdd support for View::rank[_dynamic]()#5870\nDetect incompatible relocatable device code mode to prevent ODR violations #5991\nAdd (experimental) support for 32-bit Darwin and PPC #5916\nAdd missing half and bhalf specialization of the infinity numeric trait #6055\nAdd is_dual_view trait and align further with regular view #6120\nAllow templated functors in parallel_for, parallel_reduce and parallel_scan #5976\nDefine KOKKOS_COMPILER_INTEL_LLVM and only define at most one KOKKOS_COMPILER* macro #5906\nAllow linking against build tree #6078\nAllow passing a temporary std::vector to partition_space #6167\nKokkos can be used as an external dependency in Trilinos #6142, #6157 #6163\nLeft align demangled stacktrace output #6191\nImprove OpenMP affinity warning to include MPI concerns #6185\n\n\n\n\n\nDrop Kokkos_ENABLE_LAUNCH_COMPILER option which had no effect #6148\nExport variables for relevant Kokkos options with cmake#6142\n\n\n\n\n\nDesul atomics always enabled #5801\nDrop KOKKOS_ENABLE_CUDA_ASM* and KOKKOS_ENABLE_*_ATOMICS macros #5940\nDrop KOKKOS_ENABLE_RFO_PREFETCH macro #5944\nDeprecate Kokkos_ENABLE_CUDA_LAMBDA configuration option and force it to ON #5964\nRemove TriBITS Kokkos subpackages #6104\nCuda: Remove unused attach_texture_object #6129\nDrop Kokkos_ENABLE_PROFILING_LOAD_PRINT configuration option #6150\nDrop pointless Kokkos{Algorithms,Containers}_config.h files #6108\n\n\n\n\n\nDeprecate BinSort, BinOp1D, and BinOp3D default constructors #6131\n\n\n\n\n\nFix SYCLTeamMember to take arguments for scratch sizes as std::size_t #5981\nFix Kokkos_SIMD with AVX2 on 64-bit architectures #6075\nFix an incorrectly returning size for SIMD uint64_t in AVX2 #6004\nFix missing avx512 header file with gcc versions before 10 #6183\nFix incorrect results of parallel_reduce of types smaller than int on CUDA and HIP: #5745\nCMake: update package compatibility mode when building within Trilinos #6012\nFix warnings generated from internal uses of ALL_t rather than Kokkos::ALL_t #6028\nFix bug in hpcbind script: check for correct Slurm variable #6116\nKokkosTools: Don’t call callbacks before backends are initialized #6114\nFix global fence in Kokkos::resize(DynRankView) #6184\nFix BinSort support for strided views #6081\nFix missing is_*_view traits in containers #6195\nFix broken OpenMP target on NVHPC #6171\nSorting an empty view should exit early and not fail #6130\n\n\n\n\n\nFull Changelog\n\n\n\n\n\nAllow NVCC 12 to compile using C++20 flag #6020\nAdd CUDA Ada architecture support #6022\n\n\n\n\n\nAdd support for AMDGPU target NAVI31 / RX 7900 XT(X): gfx1100 #6021\nHIP: Fix warning from std::memcpy #6019\n\n\n\n\n\nFix SYCLTeamMember to take arguments for scratch sizes as std::size_t #5986\n\n\n\n\n\n\nFixup 4.0 change log #6023\n\n\n\n\n\nCherry-pick TriBITS update from Trilinos #6037\nCMake: update package compatibility mode when building within Trilinos #6013\n\n\n\n\n\nFix an incorrectly returning size for SIMD uint64_t in AVX2 #6011\nDesul atomics: wrong value for desul::Impl::numeric_limits_max&lt;uint64_t&gt; #6018\nFix warning in some user code when using std::memcpy #6000\nFix excessive build times using Makefile.kokkos #6068\n\n\n\n\n\nFull Changelog\n\n\n\nAllow value types without default constructor in Kokkos::View with Kokkos::WithoutInitializing #5307\nparallel_scan with View as result type. #5146\nIntroduced SharedSpace, an alias for a MemorySpace that is accessible by every ExecutionSpace. The memory is moved and then accessed locally. #5289\nIntroduced SharedHostPinnedSpace, an alias for a MemorySpace that is accessible by every ExecutionSpace. The memory is pinned to the host and accessed via zero-copy access. #5405\nAdd team- and thread-level sort, sort_by_key algorithms. #5317\nGroundwork for MDSpan integration. #4973 and #5304\nIntroduced MD version of hierarchical parallelism: TeamThreadMDRange, ThreadVectorMDRange and TeamVectorMDRange. #5238\n\n\n\n\n\n\n\nAllow CUDA PTX forward compatibility #3612 #5536 #5527\nAdd support for NVIDIA Hopper GPU architecture #5538\nDon’t rely on synchronization behavior of default stream in CUDA and HIP #5391\nImprove CUDA cache config settings #5706\n\n\n\n\n\nMove HIP, HIPSpace, HIPHostPinnedSpace, and HIPManagedSpace out of the Experimental namespace #5383\nDon’t rely on synchronization behavior of default stream in CUDA and HIP #5391\nExport AMD architecture flag when using Trilinos #5528\nFix linking error (see OLCF issue) when using amdclang: #5539\nRemove support for MI25 and added support for Navi 1030 #5522\nFix race condition when using HSA_XNACK=1 #5755\nAdd parameter to force using GlobalMemory launch mechanism. This can be used when encountering compiler bugs with ROCm 5.3 and 5.4 #5796\n\n\n\n\n\nDelegate choice of workgroup size for parallel_reduce with RangePolicy to the compiler. #5227\nSYCL RangePolicy: manually specify workgroup size through chunk size #4875\n\n\n\n\n\nSelect the right device #5492\n\n\n\n\n\nAdd partition_space #5105\n\n\n\n\n\n\nImplement OffsetView constructor taking pairs and ViewCtorProp #5303\nPromote math constants to Kokkos::numbers namespace #5434\nAdd overloads of hypot math function that take 3 arguments #5341\nAdd fma fused multiply-add math function #5428\nViews using MemoryTraits::Atomic don’t need volatile overloads for the value type anymore. #5455\nAdded is_team_handle trait #5375\nRefactor desul atomics to support compiling CUDA with NVC++ #5431 #5497 #5498\nSupport finding libquadmath with native compiler support #5286\nAdd architecture flags for MSVC #5673\nSIMD backend for ARM NEON #5829\n\n\n\n\n\nLet CMake determine OpenMP flags. #4105\nUpdate minimum compiler versions. #5323\nMakefile and CMake support for C++23 #5283\nDo not add -cuda to the link line with NVHPC compiler when the CUDA backend is not actually enabled #5485\nOnly add -latomic in generated GNU makefiles when OpenMPTarget backend is enabled #5501 #5537 (3.7 patch release candidate)\nKokkos_ENABLE_CUDA_LAMBDA now ON by default with NVCC #5580\nFix enabling of relocatable device code when using CUDA as CMake language #5564\nFix cmake configuration with CUDA 12 #5691\n\n\n\n\n\nRequire C++17 #5277\nTurn setting Kokkos_CXX_STANDARD into an error #5293\nRemove all deprecations in Kokkos 3 #5297\nRemove KOKKOS_COMPILER_CUDA_VERSION #5430\nDrop reciprocal_overflow_threshold numeric trait #5326\nMove reduction_identity out of &lt;Kokkos_NumericTraits.hpp&gt; into a new &lt;Kokkos_ReductionIdentity.hpp&gt; header #5450\nReduction and scan routines will report an error if the join() operator they would use takes volatile-qualified parameters #5409\nENABLE_CUDA_UVM is dropped in favor of using SharedSpace as MemorySpace explicitly #5608\nRemove Kokkos_ENABLE_CUDA_LDG_INTRINSIC option #5623\nDon’t rely on synchronization behavior of default stream in CUDA and HIP - this potentially will break unintended implicit synchronization with other libraries such as MPI #5391\nMake ExecutionSpace::concurrency() a non-static member function #5655 and related PRs\nRemove code guarded by KOKKOS_ENABLE_DEPRECATED_CODE_3\n\n\n\n\n\nDeprecate CudaUVMSpace::available() which always returned true #5614\nDeprecate volatile-qualified members from Kokkos::pair and Kokkos::complex #5412\nDeprecate KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_* macros #5824 (oversight in 3.6)\n\n\n\n\n\nAvoid allocating memory for UniqueToken #5300\nFix pragma ivdep in Kokkos_OpenMP_Parallel.hpp #5356\nFix configuring with Threads support when rerunning CMake #5486\nFix View assignment between LayoutLeft and LayoutRight with static extents #5535 (3.7 patch release candidate)\nAdd fence() calls to sorting routine overloads that don’t take an execution space parameter #5389\nClockTic changed to 64 bit to fix overflow on Power #5577 (incl. in 3.7.01 patch release)\nFix incorrect offset in CUDA and HIP parallel_scan for &lt; 4 byte types #5555 (3.7 patch release candidate)\nFix incorrect alignment behavior of scratch allocations in some corner cases (e.g. very small allocations) #5687 (3.7 patch release candidate)\nAdd missing ReductionIdentity&lt;char&gt; specialization #5798\nDon’t install standard algorithms headers multiple times #5670\nFix max scratch size calculation for level 0 scratch in CUDA and HIP #5718\n\n\n\n\n\nFull Changelog\n\n\n\n\n\nAdd Hopper support and update nvcc_wrapper to work with CUDA-12 #5693 ### General Enhancements:\nsprintf -&gt; snprintf #5787 ### Build System:\nAdd error message when not using hipcc and when CMAKE_CXX_STANDARD is not set #5945 ### Bug Fixes:\nFix Scratch allocation alignment issues #5692\nFix Intel Classic Compiler ICE #5710\nDon’t install std algorithm headers multiple times #5711\nFix static init order issue in InitalizationSettings #5721\nFix src/dst Properties in deep_copy(DynamicView,View) #5732\nFix build on Fedora Rawhide #5782\nFinalize HIP lock arrays #5694\nFix CUDA lock arrays for current Desul #5812\nSet the correct device/context in InterOp tests #5701\n\n\n\n\n\n\nFull Changelog\n\n\n\nAdd fences to all sorting routines not taking an execution space instance argument #5547\nFix repeated team_reduce without barrier #5552\nFix memory spaces in create_mirror_view overloads using view_alloc #5521\nAllow as_view_of_rank_n() to be overloaded for “special” scalar types #5553\nFix warning calling a __host__ function from a __host__ __device__ from View:: as_view_of_rank_n #5591\nOpenMPTarget: adding implementation to set device id. #5557\nUse Kokkos::atomic_load to Correct Race Condition Giving Rise to Seg Faulting Error in OpenMP tests #5559\ncmake: define KOKKOS_ARCH_A64FX #5561\nOnly link against libatomic in gnu-make OpenMPTarget build #5565\nFix static extents assignment for LayoutLeft/LayoutRight assignment #5566\nDo not add -cuda to the link line with NVHPC compiler when the CUDA backend is not actually enabled #5569\nExport the flags in KOKKOS_AMDGPU_OPTIONS when using Trilinos #5571\nAdd support for detecting MPI local rank with MPICH and PMI #5570 #5582\nRemove listing of undefined TPL dependencies #5573\nClockTic changed to 64 bit to fix overflow on Power #5592\nFix incorrect offset in CUDA and HIP parallel scan for &lt; 4 byte types #5607\nFix initialization of Cuda lock arrays #5622\n\n\n\n\n\nFull Changelog\n\n\n\nUse non-volatile join() member functions and operator+= in parallel_reduce/scan #4931 #4954 #4951\nAdd SIMD sub package (requires C++17) #5016\nAdd is_finalized() #5247\nPromote mathematical functions from namespace Kokkos::Experimental to namespace Kokkos #4791\nPromote min, max, clamp, minmax functions from namespace Kokkos::Experimental to namespace Kokkos #5170\nAdd round, logb, nextafter, copysign, and signbit math functions #4768\nAdd HIPManagedSpace, similar to CudaUVMSpace #5112\nAccept view construction allocation properties in create_mirror[_view,_view_and_copy] and resize/realloc #5125 #5095 #5035 #4805 #4844\nAllow MemorySpace::allocate() to be called with execution space #4826\nExperimental: Compile time view subscriber #4197\n\n\n\n\n\nAdd support for Sapphire Rapids Intel architecture #5015\nAdd support for ICX, SKL and ICL Intel architectures #5013 #4929\nAdd arch flags for Intel GPU Ponte Vecchio #4932\nSYCL: require GPU if GPU architecture was set at configuration time (i.e. do not allow fallback to CPU device) #5264 #5222\nSYCL: Add SYCL::sycl_queue() for interoperability #5241\nSYCL: Loosen restriction for using built-in sycl::group_broadcast #4552\nSYCL: preserve address space #4396\nOpenMPTarget: Adding a workaound for team scan #5219\nOpenMPTarget: Adding logic to skip the kernel launch if league_size=0 #5067\nOpenMPTarget: Make sure Kokkos::abort() causes abnormal program termination when called on the host-side #4808\nHIP: Make HIPHostPinnedSpace coarse-grained #5152\nRefactor OpenMP parallel_for implementation to use more native OpenMP constructs #4664\nAdd option to optimize for local CPU architecture Kokkos_ARCH_NATIVE #4930\n\n\n\n\n\nAdd command line argument/environment variable to print the configuration #5233\nImprove error message in view memory access violations #4950\nRemove unnecessary fences in View initialization #4823\nMake View::shmem_size() device-callable #4936\nUpdate numerics support for __float128 #5081\nAdd log10 overload for Kokkos::complex #5009\nAdd [[nodiscard]] to ScopeGuard #5224\nAdd structured binding support for Kokkos::Array #4962\nEnable accessing Kokkos::Array elements in constant expressions #4916\nMark as_view_of_rank_n as KOKKOS_FUNCTION #5248\nCleanup/rework fence overloads #5148\nAssert that Layout construction from extents is valid in functions taking integer extents #5209\nAdd fill_random overload that takes an execution space as first argument #5181\nAvoid some unnecessary fences in parallel_reduce/scan #5154\nInclude KOKKOS_ENABLE_LIBDL in options when printing configuration #5086\nDynRankView: make layout() return the same as a corresponding static View #5026\nUse _mm_malloc for icpx #5012\nAvoid forcing matching execution spaces in BinSort constructor and sort() #4919\nCheck number of bins in BinSort #4890\nImprove performance in parallel STL-like algorithms #4887 #4886\nDisable memset on A64FX and launch parallel_for instead (performance) #4884\nAllow non-power-of-two team sizes for team reductions and scans #4809\n\n\n\n\nWarn when unable to detect local MPI rank and user explicitly asked for it #5263\nRefactor parsing of command line arguments and environment variables #5221\nRefactor device selection at initialization #5211\nRename tools settings for consistency #5201\nPrint help only once #5128\nUpdate precedence rule in initialization #5130\nWarn instead of just ignoring user settings when kokkos-tools is disabled #5088\nDrop numa args in threads backend initialization #5127\nWarn users when a flag prefixed with -[-]kokkos is not recognized and do not remove it #5256\nGive back to Core what belongs to Core (aka moving tune_internals option from Tools back to Core) #5202\n\n\n\n\n\nnvcc_wrapper: filter out -pedantic-errors from nvcc options #5235\nnvcc_wrapper: add known nvcc option –source-in-ptx #5052\nLink libdl as interface library #5179\nOnly show GPU architectures with enabled corresponding backend #5119\nEnable optional external desul build #5021 #5132\nExport Kokkos_CXX_STANDARD variable with CMake #5068\nSuppress warnings with nvc++ #5031\nDisallow multiple host architectures in CMake #4996\nDo not include compiler warning flags in the compile option of the cmake target #4989\nAOT flags for OpenMPTarget targeting Intel GPUs #4915\nRepurpose Kokkos_ARCH_INTEL_GEN for SYCL to mean JIT to be conforming with OMPT #4894\nReplace amdgpu-target with offload-arch #4874\nDo not enable kokkos_launch_compiler when CMAKE_CXX_COMPILER_LAUNCHER is set #4870\nMove CMake version check up #4797\n\n\n\n\n\n\nRemove KOKKOS_THREAD_LOCAL #5064\nRemove KOKKOS_ENABLE_POSIX_MEMALIGN #5011\nRemove unused KOKKOS_ENABLE_TM #4995\nRemove unused cmakedefine KOKKOS_ENABLE_COMPILER_WARNINGS #4883\nRemove unused KOKKOS_ENABLE_DUALVIEW_MODIFY_CHECK #4882\nDrop Instruction Set Architecture (ISA) macros #4981\nWarn in ScopeGuard about illegal usage #5250\n\n\n\n\n\nGuard against non-public header inclusion #5178\nRaise deprecation warnings if non empty WorkTag class is used #5230\nDeprecate parallel_* overloads taking the label as trailing argument #5141\nDeprecate nested types in functional #5185\nDeprecate InitArguments struct and replace it with InitializationSettings #5135\nDeprecate finalize_all() #5134\nDeprecate command line arguments (other than --help) that are not prefixed with kokkos-* #5120\nDeprecate --[kokkos-]numa cmdline arg and KOKKOS_NUMA env var #5117\nDeprecate --[kokkos-]threads command line argument in favor of --[kokkos-]num-threads #5111\nDeprecate Kokkos::is_reducer_type #4957\nDeprecate OffsetView constructors taking index_list_type #4810\nDeprecate overloads of Kokkos::sort taking a parameter bool always_use_kokkos_sort #5382\nWarn about parallel_reduce cases that call join() with volatile-qualified arguments #5215\n\n\n\n\n\nCUDA Reductions: Fix data races reported by Nvidia compute-sanitizer #4855\nWork around Intel compiler bug #5301\nAvoid allocating memory for UniqueToken #5300\nDynamicView: Properly resize mirror instances after construction #5276\nRemove Kokkos::Rank limit of 6 ranks #5271\nDo not forget to set last element to nullptr when removing a flag in Kokkos::initialize #5272\nFix CUDA+MSVC build issue #5261\nFix DynamicView::resize_serial #5220\nFix cmake default compiler flags for unknown compiler #5217\nFix move_backward #5191\nFixing issue 5196 - missing symbol with intel compiler #5207\nPreserve KOKKOS_INVALID_INDEX in ViewDimension and ArrayLayout construction #5188\nFinalize deep_copy_space early avoiding printing to std::cerr for Cuda #5151\nUse correct policy in Threads MDRange parallel_reduce #5123\nFix building with NVCC as the CXX compiler while the CUDA backend is not enabled #5115\nOpenMPTarget Index range fix for MDRange. #5089\nFix bug with CUDA’s team reduction for empty ranges #5079\nFix using ZeroMemset for Serial #5077\nFix Kokkos::Vector::push_back for default execution space #5047\nScatterView: Fix ScatterMin/ScatterMax to use proper atomics #5045\nFix calling ZeroMemset in deep_copy #5040\nMake View self-assignment not produce double-free #5024\nGuard against unrecognized pragma with intel compilers #5019\nFix racing condition in HIPParallelLaunch #5008\nKokkosP: Fix device_id in profiling #4997\nFix for Kokkos::vector::insert into empty vector with begin and end iterators #4988\nFix Core header files installation #4984\nFix bounds errors with Kokkos::sort #4980\nFixup let RangePolicy::set_chunk_size return a reference to self #4918\nFix allocating large Views #4907\nFix combined reductions with Kokkos::View #4896\nFixed _CUDA_ARCH__ to __CUDA_ARCH__ for CUDA LDG #4893\nFixup View::access() truncate parameter pack #4876\nFix abort with HIP backend for ROCm 5.0.2 and beyond #4873\nFix HIP version when printing the configuration #4872\nFix scratch lock array when using scratch level 1 #4871\nFix Makefile.kokkos to work with fujitsu compiler #4867\ncmake: Correct link THREADS link option #4854\nUniqueToken impl_acquire function should be device only #4819\nFix example calls to non existing static print_configuration #4806\nFix requests for large team scratch sizes #4728\n\n\n\n\n\nFull Changelog\n\n\n\nFix Threads: Fix serial resizing scratch space (3.6.01 cherry-pick) #5109\nFix ScatterMin/ScatterMax to use proper atomics (3.6.01 cherry-pick) #5046\nFix allocating large Views #4907\nFix bounds errors with Kokkos::sort #4980\nFix HIP version when printing the configuration #4872\nFixed _CUDA_ARCH__ to __CUDA_ARCH__ for CUDA LDG #4893\nFixed an incorrect struct initialization #5028\nFix racing condition in HIPParallelLaunch #5008\nAvoid deprecation warnings with OpenMPExec::validate_partition #4982\nMake View self-assignment not produce double-free #5024\n\n\n\n\n\nFull Changelog\n\n\n\nAdd C++ standard algorithms #4315\nImplement fill_random for DynRankView #4763\nAdd bhalf_t #4543 #4653\nAdd mathematical constants #4519\nAllow Kokkos::{create_mirror*,resize,realloc} to be used with WithoutInitializing #4486 #4337\nImplement KOKKOS_IF_ON_{HOST,DEVICE} macros #4660\nAllow setting the CMake language for Kokkos #4323\n\n\n\n\nDesul: Add ScopeCaller #4690\nEnable Desul atomics by default when using Makefiles #4606\nUnique token improvement #4741 #4748\n\n\n\n\n\nAdd math function long double overload on the host side #4712\n\n\n\n\n\n\nArray reductions with pointer return types #4756\nDeprecate partition_master, validate_partition #4737\nDeprecate Kokkos_ENABLE_PTHREAD in favor of Kokkos_ENABLE_THREADS #4619 ** pair with use std::threads **\nDeprecate log2(unsigned) -&gt; int (removing in next release) #4595\nDeprecate Kokkos::Impl::is_view #4592\nDeprecate KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_* macros and the ActiveExecutionMemorySpace alias #4668\n\n\n\n\n\n\n\nUpdate required SYCL compiler version #4749\nCap vector size to kernel maximum for SYCL #4704\nImprove check for compatibility of vector size and subgroup size in SYCL #4579\nProvide chunk_size for SYCL #4635\nUse host-pinned memory for SYCL kernel memory #4627\nUse shuffle-based algorithm for scalar reduction #4608\nImplement pool of USM IndirectKernelMemory #4596\nProvide valid default team size for SYCL #4481\n\n\n\n\n\nAdd checks for shmem usage in parallel_reduce #4548\n\n\n\n\n\nAdd support for fp16 in the HIP backend #4688\nDisable multiple kernel instantiations when using HIP (configure with -DKokkos_ENABLE_HIP_MULTIPLE_KERNEL_INSTANTIATIONS=ON to use) #4644\nFix HIP scratch use per instance #4439\nChange allocation header to 256B alignment for AMD VEGA architecture #4753\nAdd generic KOKKOS_ARCH_VEGA macro #4782\nRequire ROCm 4.5 #4689\n\n\n\n\n\n\nAdapt to HPX 1.7.0 which is now required #4241\n\n\n\n\nFix thread deduction for OpenMP for thread_count==0 #4541\n\n\n\n\n\nUpdate memory space size_type to improve performance (size_t -&gt; unsigned) #4779\n\n\n\n\n\nImprove NVHPC support #4599\nAdd Kokkos::Experimental::{min,max,minmax,clamp} #4629 #4506\nUse device type as template argument in Containers and Algorithms #4724 #4675\nImplement Kokkos::sort with execution space #4490\nKokkos::resize always error out for mismatch in runtime rank #4681\nPrint current call stack when calling Kokkos::abort() from the host #4672 #4671\nDetect mismatch of execution spaces in functors #4655\nImprove view label access on host #4647\nError out for const scalar return type in reduction #4645\nDon’t allow calling UnorderdMap::value_at for a set #4639\nAdd KOKKOS_COMPILER_NVHPC macro, disable quiet_NaN and signaling_NaN #4586\nImprove performance of local_deep_copy #4511\nImprove performance when sorting integers #4464\nAdd missing numeric traits (denorm_min, reciprocal_overflow_threshold, {quiet,silent}_NaN}) and make them work on cv-qualified types #4466 #4415 #4473 #4443\n\n\n\n\n\n\nManually compute IntelLLVM compiler version for older CMake versions #4760\nAdd Xptxas without = to nvcc_wrapper #4646\nUse external GoogleTest optionally #4563\nSilent warnings about multiple optimization flags with nvcc_wrapper #4502\nUse the same flags in Makefile.kokkos for POWER7/8/9 as for CMake #4483\nFix support for A64FX architecture #4745\n\n\n\n\n\nDrop KOKKOS_ARCH_HIP macro when using generated GNU makefiles #4786\nRemove gcc-toolchain auto add for clang in Makefile.kokkos #4762\n\n\n\n\n\nLock constant memory in Cuda/HIP kernel launch with a mutex (thread safety) #4525\nFix overflow for large requested scratch allocation #4551\nFix Windows build in mingw #4564\nFix kokkos_launch_compiler: escape $ character #4769 #4703\nFix math functions with NVCC and GCC 5 as host compiler #4733\nFix shared build with Intel19 #4725\nDo not install empty desul/src/ directory #4714\nFix wrong device_id computation in identifier_from_devid (Profiling Interface) #4694\nFix a bug in CUDA scratch memory pool (abnormally high memory consumption) #4673\nRemove eval of command args in hpcbind #4630\nSYCL fix to run when no GPU is detected #4623\nFix layout_strides::span for rank-0 views #4605\nFix SYCL atomics for local memory #4585\nHotfix mdrange_large_deep_copy for SYCL #4581\nFix bug when sorting integer using the HIP backend #4570\nFix compilation error when using HIP with RDC #4553\nDynamicView: Fix deallocation extent #4533\nSYCL fix running parallel_reduce with TeamPolicy for large ranges #4532\nFix bash syntax error in nvcc_wrapper #4524\nOpenMPTarget team_policy reduce fixes for init/join reductions #4521\nAvoid hangs in the Threads backend #4499\nOpenMPTarget fix reduction bug in parallel_reduce for TeamPolicy #4491\nHIP fix scratch space per instance #4439\nOpenMPTarget fix team scratch allocation #4431\n\n\n\n\n\nFull Changelog\n\n\n\nAdd support for quad-precision math functions/traits #4098\nAdding ExecutionSpace partitioning function #4096\nImprove Python Interop Capabilities #4065\nAdd half_t Kokkos::rand specialization #3922\nAdd math special functions: erf, erfcx, expint1, Bessel functions, Hankel functions #3920\nAdd missing common mathematical functions #4043 #4036 #4034\nLet the numeric traits be SFINAE-friendly #4038\nAdd Desul atomics - enabling memory-order and memory-scope parameters #3247\nAdd detection idiom from the C++ standard library extension version 2 #3980\nFence Profiling Support in all backends #3966 #4304 #4258 #4232\nSignificant SYCL enhancements (see below)\n\n\n\n\n\nDeprecate CUDA_SAFE_CALL and HIP_SAFE_CALL #4249\nDeprecate Kokkos::Impl::Timer (Kokkos::Timer has been available for a long time) #4201\nDeprecate Experimental::MasterLock #4094\nDeprecate Kokkos_TaskPolicy.hpp (headers got reorganized, doesn’t remove functionality) #4011\nDeprecate backward compatibility features #3978\nUpdate and deprecate is_space::host_memory/execution/mirror_space #3973\n\n\n\n\n\nEnabling constbitset constructors in kernels #4296\nUse ZeroMemset in View constructor to improve performance #4226\nUse memset in deep_copy #3944\nAdd missing fence() calls in resize(View) that effectively do deep_copy(resized, orig) #4212\nAvoid allocations in resize and realloc #4207\nStaticCsrGraph: use device type instead of execution space to construct views #3991\nConsider std::sort when view is accessible from host #3929\nFix CPP20 warnings except for volatile #4312\n\n\n\n\nIntroduce SYCLHostUSMSpace #4268\nImplement SYCL TeamPolicy for vector_size &gt; 1 #4183\nEnable 64bit ranges for SYCL #4211\nDon’t print SYCL device info in execution space intialization #4168\nImprove SYCL MDRangePolicy performance #4161\nUse sub_groups in SYCL parallel_scan #4147\nImplement subgroup reduction for SYCL RangePolicy parallel_reduce #3940\nUse DPC++ broadcast extension in SYCL team_broadcast #4103\nOnly fence in SYCL parallel_reduce for non-device-accessible result_ptr #4089\nImprove fencing behavior in SYCL backend #4088\nFence all registered SYCL queues before deallocating memory #4086\nImplement SYCL::print_configuration #3992\nReuse scratch memory in parallel_scan and TeamPolicy (decreases memory footprint) #3899 #3889\n\n\n\n\n\nCuda improve heuristic for blocksize #4271\nDon’t use [[deprecated]] for nvcc #4229\nImprove error message for NVHPC as host compiler #4227\nUpdate support for cuda reductions to work with types &lt; 4bytes #4156\nFix incompatible team size deduction in rare cases parallel_reduce #4142\nRemove UVM usage in DynamicView #4129\nRemove dependency between core and containers #4114\nAdding opt-in CudaMallocSync support when using CUDA version &gt;= 11.2 #4026 #4233\nFix a potential race condition in the CUDA backend #3999\n\n\n\n\n\nImplement new blocksize deduction method for HIP Backend #3953\nAdd multiple LaunchMechanism #3820\nMake HIP backend thread-safe #4170\n\n\n\n\n\nRefactor Serial backend and fix thread-safety issue #4053\n\n\n\n\n\nOpenMPTarget: support array reductions in RangePolicy #4040\nOpenMPTarget: add MDRange parallel_reduce #4032\nOpenMPTarget: Fix bug in for the case of a reducer. #4044\nOpenMPTarget: verify process fix #4041\n\n\n\n\n\n\n\n\nUse hipcc architecture autodetection when Kokkos_ARCH is not set #3941\nIntroduce Kokkos_ENABLE_DEPRECATION_WARNINGS and remove deprecated code with Kokkos_ENABLE_DEPRECATED_CODE_3 #4106 #3855\n\n\n\n\n\nAdd allow-unsupported-compiler flag to nvcc-wrapper #4298\nnvcc_wrapper: fix errors in argument handling #3993\nAdds support for -time= and -time  in nvcc_wrapper #4015\nnvcc_wrapper: suppress duplicates of GPU architecture and RDC flags #3968\nFix TMPDIR support in nvcc_wrapper #3792\nNVHPC: update PGI compiler arch flags #4133\nReplace PGI with NVHPC (works for both) #4196\nMake sure that KOKKOS_CXX_HOST_COMPILER_ID is defined #4235\nAdd options to Makefile builds for deprecated code and warnings #4215\nUse KOKKOS_CXX_HOST_COMPILER_ID for identifying CPU arch flags #4199\nAdded support for Cray Clang to Makefile.kokkos #4176\nAdd XLClang as compiler #4120\nKeep quoted compiler flags when passing to Trilinos #3987\nAdd support for AMD Zen3 CPU architecture #3972\nRename IntelClang to IntelLLVM #3945\nAdd cppcoreguidelines-pro-type-cstyle-cast to clang-tidy #3522\nAdd sve bit size definition for A64FX #3947 #3946\nRemove KOKKOS_ENABLE_DEBUG_PRINT_KERNEL_NAMES #4150\n\n\n\n\n\n\n\n\nRetrieve original value from a point in a MultidimensionalSparseTuningProblem #3977\nAllow extension of built-in tuners with additional tuning axes #3961\nAdded a categorical tuner #3955\n\n\n\n\n\nhpcbind: Use double quotes around $@ when invoking user command #4284\nAdd file and line to error message #3985\nFix compiler warnings when compiling with nvc++ #4198\nAdd OpenMPTarget CI build on AMD GPUs #4055\nCI: icpx is now part of intel container #4002\n\n\n\n\n\n\nRemove pre CUDA 9 KOKKOS_IMPL_CUDA_* macros #4138\n\n\n\n\n\nUnorderedMap::clear() should zero the size() #4130\nAdd memory fence for HostSharedPtr::cleanup() #4144\nSYCL: Fix race conditions in TeamPolicy::parallel_reduce #4418\nAdding missing memory fence to serial exec space fence. #4292\nFix using external SYCL queues in tests #4291\nFix digits10 bug #4281\nFixes constexpr errors with frounding-math on gcc &lt; 10. #4278\nFix compiler flags for PGI/NVHPC #4264\nFix Zen2/3 also implying Zen Arch with Makefiles #4260\nKokkos_Cuda.hpp: Fix shadow warning with cuda/11.0 #4252\nFix issue w/ static initialization of function attributes #4242\nDisable long double hypot test on Power systems #4221\nFix false sharing in random pool #4218\nFix a missing memory_fence for debug shared alloc code #4216\nFix two xl issues #4179\nMakefile.kokkos: fix (standard_in) 1: syntax error #4173\nFixes for query_device example #4172\nFix a bug when using HIP atomic with Kokkos::Complex #4159\nFix mistaken logic in pthread creation #4157\nDefine KOKKOS_ENABLE_AGGRESSIVE_VECTORIZATION when requesting Kokkos_ENABLE_AGGRESSIVE_VECTORIZATION=ON #4107\nFix compilation with latest MSVC version #4102\nFix incorrect macro definitions when compiling with Intel compiler on Windows #4087\nFixup global buffer overflow in hand rolled string manipulation #4070\nFixup heap buffer overflow in cmd line args parsing unit tests #4069\nOnly add quotes in compiler flags for Trilinos if necessary #4067\nFixed invocation of tools init callbacks #4061\nWork around SYCL JIT compiler issues with static variables #4013\nFix TestDetectionIdiom.cpp test inclusion for Trilinos/TriBITS #4010\nFixup allocation headers with OpenMPTarget backend #4003\nAdd missing specialization for OMPT to Kokkos Random #3967\nDisable hypot long double test on power arches #3962\nUse different EBO workaround for MSVC (rebased) #3924\nFix SYCL Kokkos::Profiling::(de)allocateData calls #3928\n\n\n\n\n\nFull Changelog\nBug Fixes: - Windows: Remove atomic_compare_exchange_strong overload conflicts with Windows #4024 - OpenMPTarget: Fixup allocation headers with OpenMPTarget backend #4020 - OpenMPTarget: Add missing specailization for OMPT to Kokkos Random #4022 - AMD: Add support for AMD Zen3 CPU architecture #4021 - SYCL: Implement SYCL::print_configuration #4012 - Containers: staticcsrgraph: use device type instead of execution space to construct views #3998 - nvcc_wrapper: fix errors in argument handling, suppress duplicates of GPU architecture and RDC flags #4006 - CI: Add icpx testing to intel container #4004 - CMake/TRIBITS: Keep quoted compiler flags when passing to Trilinos #4007 - CMake: Rename IntelClang to IntelLLVM #3945\n\n\n\nFull Changelog\nHighlights: - SYCL Backend Almost Feature Complete - OpenMPTarget Backend Almost Feature Complete - Performance Improvements for HIP backend - Require CMake 3.16 or newer - Tool Callback Interface Enhancements - cmath wrapper functions available now in Kokkos::Experimental\nFeatures: - Implement parallel_scan with ThreadVectorRange and Reducer #3861 - Implement SYCL Random #3849 - OpenMPTarget: Adding Implementation for nested reducers #3845 - Implement UniqueToken for SYCL #3833 - OpenMPTarget: UniqueToken::Global implementation #3823 - DualView sync’s on ExecutionSpaces #3822 - SYCL outer TeamPolicy parallel_reduce #3818 - SYCL TeamPolicy::team_scan #3815 - SYCL MDRangePolicy parallel_reduce #3801 - Enable use of execution space instances in ScatterView #3786 - SYCL TeamPolicy nested parallel_reduce #3783 - OpenMPTarget: MDRange with TagType for parallel_for #3781 - Adding OpenMPTarget parallel_scan #3655 - SYCL basic TeamPolicy #3654 - OpenMPTarget: scratch memory implementation #3611\nImplemented enhancements Backends and Archs: - SYCL choose a specific GPU #3918 - [HIP] Lock access to scratch memory when using Teams #3916 - [HIP] fix multithreaded access to get_next_driver #3908 - Forward declare HIPHostPinnedSpace and SYCLSharedUSMSpace #3902 - Let SYCL USMObjectMem use SharedAllocationRecord #3898 - Implement clock_tic for SYCL #3893 - Don’t use a static variable in HIPInternal::scratch_space #3866(https://github.com/kokkos/kokkos/pull/3866) - Reuse memory for SYCL parallel_reduce #3873 - Update SYCL compiler in CI #3826 - Introduce HostSharedPtr to manage m_space_instance for Cuda/HIP/SYCL #3824 - [HIP] Use shuffle for range reduction #3811 - OpenMPTarget: Changes to the hierarchical parallelism #3808 - Remove ExtendedReferenceWrapper for SYCL parallel_reduce #3802 - Eliminate sycl_indirect_launch #3777 - OpenMPTarget: scratch implementation for parallel_reduce #3776 - Allow initializing SYCL execution space from sycl::queue and SYCL::impl_static_fence #3767 - SYCL TeamPolicy scratch memory alternative #3763 - Alternative implementation for SYCL TeamPolicy #3759 - Unify handling of synchronous errors in SYCL #3754 - core/Cuda: Half_t updates for cgsolve #3746 - Unify HIPParallelLaunch structures #3733 - Improve performance for SYCL parallel_reduce #3732 - Use consistent types in Kokkos_OpenMPTarget_Parallel.hpp #3703 - Implement non-blocking kernel launches for HIP backend #3697 - Change SYCLInternal::m_queue std::unique_ptr -&gt; std::optional #3677 - Use alternative SYCL parallel_reduce implementation #3671 - Use runtime values in KokkosExp_MDRangePolicy.hpp #3626 - Clean up AnalyzePolicy #3564 - Changes for indirect launch of SYCL parallel reduce #3511\nImplemented enhancements BuildSystem: - Also require C++14 when building gtest #3912 - Fix compiling SYCL with OpenMP #3874 - Require C++17 for SYCL (at configuration time) #3869 - Add COMPILE_DEFINITIONS argument to kokkos_create_imported_tpl #3862 - Do not pass arch flags to the linker with no rdc #3846 - Try compiling C++14 check with C++14 support and print error message #3843 - Enable HIP with Cray Clang #3842 - Add an option to disable header self containment tests #3834 - CMake check for C++14 #3809 - Prefer -std=* over –std=* #3779 - Kokkos launch compiler updates #3778 - Updated comments and enabled no-op for kokkos_launch_compiler #3774 - Apple’s Clang not correctly recognised #3772 - kokkos_launch_compiler + CUDA auto-detect arch #3770 - Add Spack test support for Kokkos #3753 - Split SYCL tests for aot compilation #3741 - Use consistent OpenMP flag for IntelClang #3735 - Add support for -Wno-deprecated-gpu-targets #3722 - Add configuration to target CUDA compute capability 8.6 #3713 - Added VERSION and SOVERSION to KOKKOS_INTERNAL_ADD_LIBRARY #3706 - Add fast-math to known NVCC flags #3699 - Add MI-100 arch string #3698 - Require CMake &gt;=3.16 #3679 - KokkosCI.cmake, KokkosCTest.cmake.in, CTestConfig.cmake.in + CI updates #2844\nImplemented enhancements Tools: - Improve readability of the callback invocation in profiling #3860 - V1.1 Tools Interface: incremental, action-based #3812 - Enable launch latency simulations #3721 - Added metadata callback to tools interface #3711 - MDRange Tile Size Tuning #3688 - Added support for command-line args for kokkos-tools #3627 - Query max tile sizes for an MDRangePolicy, and set tile sizes on an existing policy #3481\nImplemented enhancements Other: - Try detecting ndevices in get_gpu #3921 - Use strcmp to compare names() #3909 - Add execution space arguments for constructor overloads that might allocate a new underlying View #3904 - Prefix labels in internal use of kokkos_malloc #3891 - Prefix labels for internal uses of SharedAllocationRecord #3890 - Add missing hypot math function #3880 - Unify algorithm unit tests to avoid code duplication #3851 - DualView.template view() better matches for Devices in UVMSpace cases #3857 - More extensive disentangling of Policy Traits #3829 - Replaced nanosleep and sched_yield with STL routines #3825 - Constructing Atomic Subviews #3810 - Metadata Declaration in Core #3729 - Allow using tagged final functor in parallel_reduce #3714 - Major duplicate code removal in SharedAllocationRecord specializations #3658\nFixed bugs: - Provide forward declarations in Kokkos_ViewLayoutTiled.hpp for XL #3911 - Fixup absolute value of floating points in Kokkos complex #3882 - Address intel 17 ICE #3881 - Add missing pow(Kokkos::complex) overloads #3868 - Fix bug {pow, log}(Kokkos::complex) #3866(https://github.com/kokkos/kokkos/pull/3866) - Cleanup writing to output streams in Cuda #3859 - Fixup cache CUDA fallback execution space instance used by DualView::sync #3856 - Fix cmake warning with pthread #3854 - Fix typo FOUND_CUDA_{DRIVVER -&gt; DRIVER} #3852 - Fix bug in SYCL team_reduce #3848 - Atrocious bug in MDRange tuning #3803 - Fix compiling SYCL with Kokkos_ENABLE_TUNING=ON #3800 - Fixed command line parsing bug #3797 - Workaround race condition in SYCL parallel_reduce #3782 - Fix Atomic{Min,Max} for Kepler30 #3780 - Fix SYCL typo #3755 - Fixed Kokkos_install_additional_files macro #3752 - Fix a typo for Kokkos_ARCH_A64FX #3751 - OpenMPTarget: fixes and workarounds to work with “Release” build type #3748 - Fix parsing bug for number of devices command line argument #3724 - Avoid more warnings with clang and C++20 #3719 - Fix gcc-10.1 C++20 warnings #3718 - Fix cuda cache config not being set correct #3712 - Fix dualview deepcopy perftools #3701 - use drand instead of frand in drand #3696\nIncompatibilities: - Remove unimplemented member functions of SYCLDevice #3919 - Replace cl::sycl #3896 - Get rid of SYCL workaround in Kokkos_Complex.hpp #3884 - Replace most uses of if_c #3883 - Remove Impl::enable_if_type #3863 - Remove HostBarrier test #3847 - Avoid (void) interface #3836 - Remove VerifyExecutionCanAccessMemorySpace #3813 - Avoid duplicated code in ScratchMemorySpace #3793 - Remove superfluous FunctorFinal specialization #3788 - Rename cl::sycl -&gt; sycl in Kokkos_MathematicalFunctions.hpp #3678 - Remove integer_sequence backward compatibility implementation #3533\nEnabled tests: - Fixup re-enable core performance tests #3903 - Enable more SYCL tests #3900 - Restrict MDRange Policy tests for Intel GPUs #3853 - Disable death tests for rawhide #3844 - OpenMPTarget: Block unit tests that do not pass with the nvidia compiler #3839 - Enable Bitset container test for SYCL #3830 - Enable some more SYCL tests #3744 - Enable SYCL atomic tests #3742 - Enable more SYCL perf_tests #3692 - Enable examples for SYCL #3691\n\n\n\nFull Changelog\nBug Fixes: - Fix severe performance bug in DualView which added memcpys for sync and modify #3693 - Fix performance bug in CUDA backend, where the cuda Cache config was not set correct.\n\n\n\nFull Changelog\nFeatures: - Require C++14 as minimum C++ standard. C++17 and C++20 are supported too. - HIP backend is nearly feature complete. Kokkos Dynamic Task Graphs are missing. - Major update for OpenMPTarget: many capabilities now work. For details contact us. - Added DPC++/SYCL backend: primary capabilites are working. - Added Kokkos Graph API analogous to CUDA Graphs. - Added parallel_scan support with TeamThreadRange #3536 - Added Logical Memory Spaces #3546 - Added initial half precision support #3439 - Experimental feature: control cuda occupancy #3379\nImplemented enhancements Backends and Archs: - Add a64fx and fujitsu Compiler support #3614 - Adding support for AMD gfx908 archictecture #3375 - SYCL parallel_for MDRangePolicy #3583 - SYCL add parallel_scan #3577 - SYCL custom reductions #3544 - SYCL Enable container unit tests #3550 - SYCL feature level 5 #3480 - SYCL Feature level 4 (parallel_for) #3474 - SYCL feature level 3 #3451 - SYCL feature level 2 #3447 - OpenMPTarget: Hierarchial reduction for + operator on scalars #3504 - OpenMPTarget hierarchical #3411 - HIP Add Impl::atomic_[store,load] #3440 - HIP enable global lock arrays #3418 - HIP Implement multiple occupancy paths for various HIP kernel launchers #3366\nImplemented enhancements Policies: - MDRangePolicy: Let it be semiregular #3494 - MDRangePolicy: Check narrowing conversion in construction #3527 - MDRangePolicy: CombinedReducers support #3395 - Kokkos Graph: Interface and Default Implementation #3362 - Kokkos Graph: add Cuda Graph implementation #3369 - TeamPolicy: implemented autotuning of team sizes and vector lengths #3206 - RangePolicy: Initialize all data members in default constructor #3509\nImplemented enhancements BuildSystem: - Auto-generate core test files for all backends #3488 - Avoid rewriting test files when calling cmake #3548 - RULE_LAUNCH_COMPILE and RULE_LAUNCH_LINK system for nvcc_wrapper #3136 - Adding -include as a known argument to nvcc_wrapper #3434 - Install hpcbind script #3402 - cmake/kokkos_tribits.cmake: add parsing for args #3457\nImplemented enhancements Tools: - Changed namespacing of Kokkos::Tools::Impl::Impl::tune_policy #3455 - Delegate to an impl allocate/deallocate method to allow specifying a SpaceHandle for MemorySpaces #3530 - Use the Kokkos Profiling interface rather than the Impl interface #3518 - Runtime option for tuning #3459 - Dual View Tool Events #3326\nImplemented enhancements Other: - Abort on errors instead of just printing #3528 - Enable C++14 macros unconditionally #3449 - Make ViewMapping trivially copyable #3436 - Rename struct ViewMapping to class #3435 - Replace enums in Kokkos_ViewMapping.hpp (removes -Wextra) #3422 - Use bool for enums representing bools #3416 - Fence active instead of default execution space instances #3388 - Refactor parallel_reduce fence usage #3359 - Moved Space EBO helpers to Kokkos_EBO #3357 - Add remove_cvref type trait #3340 - Adding identity type traits and update definition of identity_t alias #3339 - Add is_specialization_of type trait #3338 - Make ScratchMemorySpace semi-regular #3309 - Optimize min/max atomics with early exit on no-op case #3265 - Refactor Backend Development #2941\nFixed bugs: - Fixup MDRangePolicy construction from Kokkos arrays #3591 - Add atomic functions for unsigned long long using gcc built-in #3588 - Fixup silent pointless comparison with zero in checked_narrow_cast (compiler workaround) #3566 - Fixes for ROCm 3.9 #3565 - Fix windows build issues which crept in for the CUDA build #3532 - HIP Fix atomics of large data types and clean up lock arrays #3529 - Pthreads fix exception resulting from 0 grain size #3510 - Fixup do not require atomic operation to be default constructible #3503 - Fix race condition in HIP backend #3467 - Replace KOKKOS_DEBUG with KOKKOS_ENABLE_DEBUG #3458 - Fix multi-stream team scratch space definition for HIP #3398 - HIP fix template deduction #3393 - Fix compiling with HIP and C++17 #3390 - Fix sigFPE in HIP blocksize deduction #3378 - Type alias change: replace CS with CTS to avoid conflicts with NVSHMEM #3348 - Clang compilation of CUDA backend on Windows #3345 - Fix HBW support #3343 - Added missing fences to unique token #3260\nIncompatibilities: - Remove unused utilities (forward, move, and expand_variadic) from Kokkos::Impl #3535 - Remove unused traits #3534 - HIP: Remove old HCC code #3301 - Prepare for deprecation of ViewAllocateWithoutInitializing #3264 - Remove ROCm backend #3148\n\n\n\nFull Changelog\nFixed bugs: - Disallow KOKKOS_ENABLE_CUDA_RELOCATABLE_DEVICE_CODE in shared library builds #3332 - Do not install libprinter-tool when testing is enabled #3313 - Fix restrict/alignment following refactor #3373 - Intel fix: workaround compiler issue with using statement #3383 - Fix zero-length reductions #\\3364 - Pthread zero-length reduction fix #3452 - HPX zero-length reduction fix #3470 - cuda/9.2 zero-length reduction fix #3580 - Fix multi-stream scratch #\\3269 - Guard KOKKOS_ALL_COMPILE_OPTIONS if Cuda is not enabled #3387 - Do not include link flags for Fortran linkage #3384 - Fix NVIDIA GPU arch macro with autodetection #3473 - Fix libdl/test issues with Trilinos #3543 - Register Pthread as Tribits option to be enabled with Trilinos #3558\nImplemented enhancements: - Separate Cuda timing-based tests into their own executable #3407\n\n\n\nFull Changelog\nImplemented enhancements:\n\nHIP:Enable stream in HIP #3163\nHIP:Add support for shuffle reduction for the HIP backend #3154\nHIP:Add implementations of missing HIPHostPinnedSpace methods for LAMMPS #3137\nHIP:Require HIP 3.5.0 or higher #3099\nHIP:WorkGraphPolicy for HIP #3096\nOpenMPTarget: Significant update to the new experimental backend. Requires C++17, works on Intel GPUs, reference counting fixes. #3169\nWindows Cuda support #3018\nPass -Wext-lambda-captures-this to NVCC when support for __host__ __device__ lambda is enabled from CUDA 11 #3241\nUse explicit staging buffer for constant memory kernel launches and cleanup host/device synchronization #3234\nVarious fixup to policies including making TeamPolicy default constructible and making RangePolicy and TeamPolicy assignable: #3202 , #3203 , #3196\nAnnotations for DefaultExectutionSpace and DefaultHostExectutionSpace to use in static analysis #3189\nAdd documentation on using Spack to install Kokkos and developing packages that depend on Kokkos #3187\nAdd OpenMPTarget backend flags for NVC++ compiler #3185\nMove deep_copy/create_mirror_view on Experimental::OffsetView into Kokkos:: namespace #3166\nAllow for larger block size in HIP #3165\nView: Added names of Views to the different View initialize/free kernels #3159\nCuda: Caching cudaFunctorAttributes and whether L1/Shmem prefer was set #3151\nBuildSystem: Improved performance in default configuration by defaulting to Release build #3131\nCuda: Update CUDA occupancy calculation #3124\nVector: Adding data() to Vector #3123\nBuildSystem: Add CUDA Ampere configuration support #3122\nGeneral: Apply [[noreturn]] to Kokkos::abort when applicable #3106\nTeamPolicy: Validate storage level argument passed to TeamPolicy::set_scratch_size() #3098\nBuildSystem: Make kokkos_has_string() function in Makefile.kokkos case insensitive #3091\nModify KOKKOS_FUNCTION macro for clang-tidy analysis #3087\nMove allocation profiling to allocate/deallocate calls #3084\nBuildSystem: FATAL_ERROR when attempting in-source build #3082\nChange enums in ScatterView to types #3076\nHIP: Changes for new compiler/runtime #3067\nExtract and use get_gpu #3061 , #3048\nAdd is_allocated to View-like containers #3059\nCombined reducers for scalar references #3052\nAdd configurable capacity for UniqueToken #3051\nAdd installation testing #3034\nHIP: Add UniqueToken #3020\nAutodetect number of devices #3013\n\nFixed bugs:\n\nCheck error code from cudaStreamSynchronize in CUDA fences #3255\nFix issue with C++ standard flags when using nvcc\\_wrapper with PGI #3254\nAdd missing threadfence in lock-based atomics #3208\nFix dedup of linker flags for shared lib on CMake &lt;=3.12 #3176\nFix memory leak with CUDA streams #3170\nBuildSystem: Fix OpenMP Target flags for Cray #3161\nScatterView: fix for OpenmpTarget remove inheritance from reducers #3162\nBuildSystem: Set OpenMP flags according to host compiler #3127\nOpenMP: Fix logic for nested omp in partition_master bug #3101\nnvcc_wrapper: send –cudart to nvcc instead of host compiler #3092\nBuildSystem: Fixes for Cuda/11 and c++17 #3085\nHIP: Fix print_configuration #3080\nConditionally define get_gpu #3072\nFix bounds for ranges in random number generator #3069\nFix Cuda minor arch check #3035\nBuildSystem: Add -expt-relaxed-constexpr flag to nvcc_wrapper #3021\n\nIncompatibilities:\n\nRemove ETI support #3157\nRemove KOKKOS_INTERNAL_ENABLE_NON_CUDA_BACKEND #3147\nRemove core/unit_test/config #3146\nRemoved the preprocessor branch for KOKKOS_ENABLE_PROFILING #3115\nDisable profiling with MSVC #3066\n\nClosed issues:\n\nSilent error (Validate storage level arg to set_scratch_size) #3097\nRemove KOKKKOS_ENABLE_PROFILING Option #3095\nCuda 11 -&gt; allow C++17 #3083\nIn source build failure not explained #3081\nAllow naming of Views for initialization kernel #3070\nDefaultInit tests failing when using CTest resource allocation feature #3040\nAdd installation testing. #3037\nnvcc_wrapper needs to handle -expt-relaxed-constexpr flag #3017\nCPU core oversubscription warning on macOS with OpenMP backend #2996\nDefault behavior of KOKKOS_NUM_DEVICES to use all devices available #2975\nAssert blocksize &gt; 0 #2974\nAdd ability to assign kokkos profile function from executable #2973\nScatterView Support for the pre/post increment operator #2967\nCompiler issue: Cuda build with clang 10 has errors with the atomic unit tests #3237\nIncompatibility of flags for C++ standard with PGI v20.4 on Power9/NVIDIA V100 system #3252\nError configuring as subproject #3140\nCMake fails with Nvidia compilers when the GPU architecture option is not supplied (Fix configure with OMPT and Cuda) #3207\nPGI compiler being passed the gcc -fopenmp flag #3125\nCuda: Memory leak when using CUDA stream #3167\nRangePolicy has an implicitly deleted assignment operator #3192\nMemorySpace::allocate needs to have memory pool counting. #3064\nMissing write fence for lock based atomics on CUDA #3038\nCUDA compute capability version check problem #3026\nMake DynRankView fencing consistent #3014\nnvcc_wrapper cant handle -Xcompiler -o out.o #2993\nReductions of non-trivial types of size 4 fail in CUDA shfl operations #2990\ncomplex_double misalignment in reduce, clang+CUDA #2989\nSpan of degenerated (zero-length) subviews is not zero in some special cases #2979\nRank 1 custom layouts dont work as expected. #2840\n\n\n\n\nFull Changelog\nFixed bugs:\n\nFix complex_double misalignment in reduce, clang+CUDA #2989\nFix compilation fails when profiling disabled and CUDA enabled #3001\nFix cuda reduction of non-trivial scalars of size 4 #2990\nConfigure and install version file when building in Trilinos #2957\nFix OpenMPTarget build missing include and namespace #3000\nfix typo in KOKKOS_SET_EXE_PROPERTY() #2959\nFix non-zero span subviews of zero sized subviews #2979\n\n\n\n\nFull Changelog\nFeatures:\n\nHIP Support for AMD\nOpenMPTarget Support with clang\nWindows VS19 (Serial) Support #1533\n\nImplemented enhancements:\n\ngenerate_makefile.bash should allow tests to be disabled #2886\nclang/7+cuda/9 build -Werror-unused parameter error in nightly test #2884\nScatterView memory space is not user settable #2826\nclang/8+cuda/10.0 build error with c++17 #2809\nwarnings…. #2805\nKokkos version in cpp define #2787\nRemove Defunct QThreads Backend #2751\nImprove Kokkos::fence behavior with multiple execution spaces #2659\npolylithic(?) initialization of Kokkos #2658\nUnnecessary(?) check for host execution space initialization from Cuda initialization #2652\nKokkos error reporting failures with CUDA GPUs in exclusive mode #2471\natomicMax equivalent (and other atomics) #2401\nFix alignment for Kokkos::complex #2255\nWarnings with Cuda 10.1 #2206\ndual view with Kokkos::ViewAllocateWithoutInitializing #2188\nCheck error code from cudaOccupancyMaxActiveBlocksPerMultiprocessor #2172\nAdd non-member Kokkos::resize/realloc for DualView #2170\nConstruct DualView without initialization #2046\nExpose is_assignable to determine if one view can be assigned to another #1936\nprofiling label #1935\nteam_broadcast of bool failed on CUDA backend #1908\nView static_extent #660\nMisleading Kokkos::Cuda::initialize ERROR message when compiled for wrong GPU architecture #1944\nCryptic Error When Malloc Fails #2164\nDrop support for intermediate standards in CMake #2336\n\nFixed bugs:\n\nDualView sync_device with length zero creates cuda errors #2946\nbuilding with nvcc and clang (or clang based XL) as host compiler: “Kokkos::atomic_fetch_min(volatile int *, int)” has already been defined #2903\nCuda 9.1,10.1 debug builds failing due to -Werror=unused-parameter #2880\nclang -Werror: Kokkos_FixedBufferMemoryPool.hpp:140:28: error: unused parameter ‘alloc_size’ #2869\nintel/16.0.1, intel/17.0.1 nightly build failures with debugging enabled #2867\nintel/16.0.1 debug build errors #2863\nxl/16.1.1 with cpp14, openmp build, nightly test failures #2856\nIntel nightly test failures: team_vector #2852\nKokkos Views with intmax/2&lt;N&lt;intmax can hang during construction #2850\nworkgraph_fib test seg-faults with threads backend and hwloc #2797\ncuda.view_64bit test hangs on Power8+Kepler37 system - develop and 2.9.00 branches #2771\ndevice_type for Kokkos_Random ? #2693\n“More than one tag given” error in Experimental::require() #2608\nSegfault on Marvell from our finalization stack #2542\n\n\n\n\nFull Changelog\nImplemented enhancements:\n\nBuildSystem: Standalone Modern CMake Support #2104\nStyleFormat: ClangFormat Style #2157\nDocumentation: Document build system and CMake philosophy #2263\nBuildSystem: Add Alias with Namespace Kokkos:: to Interal Libraries #2530\nBuildSystem: Universal Kokkos find_package #2099\nBuildSystem: Dropping support for Kokkos_{DEVICES,OPTIONS,ARCH} in CMake #2329\nBuildSystem: Set Kokkos_DEVICES and Kokkos_ARCH variables in exported CMake configuration #2193\nBuildSystem: Drop support for CUDA 7 and CUDA 8 #2489\nBuildSystem: Drop CMake option SEPARATE_TESTS #2266\nBuildSystem: Support expt-relaxed-constexpr same as expt-extended-lambda #2411\nBuildSystem: Add Xnvlink to command line options allowed in nvcc_wrapper #2197\nBuildSystem: Install Kokkos config files and target files to lib/cmake/Kokkos #2162\nBuildSystem: nvcc_wrappers and c++ 14 #2035\nBuildSystem: Kokkos version major/version minor (Feature request) #1930\nBuildSystem: CMake namespaces (and other modern cmake cleanup) #1924\nBuildSystem: Remove capability to install Kokkos via GNU Makefiles #2332\nDocumentation: Remove PDF ProgrammingGuide in Kokkos replace with link #2244\nView: Add Method to Resize View without Initialization #2048\nVector: implement “insert” method for Kokkos_Vector (as a serial function on host) #2437\n\nFixed bugs:\n\nParallelScan: Kokkos::parallelfix race condition seen in inter-block fence #2681\nOffsetView: Kokkos::OffsetView missing constructor which takes pointer #2247\nOffsetView: Kokkos::OffsetView: allow offset=0 #2246\nDeepCopy: Missing DeepCopy instrumentation in Kokkos #2522\nnvcc_wrapper: –host-only fails with multiple -W* flags #2484\nnvcc_wrapper: taking first -std option is counterintuitive #2553\nSubview: Error taking subviews of views with static_extents of min rank #2448\nTeamPolicy: reducers with valuetypes without += broken on CUDA #2410\nLibs: Fix inconsistency of Kokkos library names in Kokkos and Trilinos #1902\nComplex: operator&gt;&gt; for complex&lt;T&gt; uses std::ostream, not std::istream #2313\nMacros: Restrict not honored for non-intel compilers #1922\n\n\n\n\nFull Changelog\nImplemented enhancements:\n\nCapability: CUDA Streams #1723\nCapability: CUDA Stream support for parallel_reduce #2061\nCapability: Feature Request: TeamVectorRange #713\nCapability: Adding HPX backend #2080\nCapability: TaskScheduler to have multiple queues #565\nCapability: Support for additional reductions in ScatterView #1674\nCapability: Request: deep_copy within parallel regions #689\nCapability: Feature Request: create\\_mirror\\_view\\_without\\_initializing #1765\nView: Use SFINAE to restrict possible View type conversions #2127\nDeprecation: Deprecate ExecutionSpace::fence() as static function and make it non-static #2140\nDeprecation: Deprecate LayoutTileLeft #2122\nMacros: KOKKOS_RESTRICT defined for non-Intel compilers #2038\n\nFixed bugs:\n\nCuda: TeamThreadRange loop count on device is passed by reference to host static constexpr #1733\nCuda: Build error with relocatable device code with CUDA 10.1 GCC 7.3 #2134\nCuda: cudaFuncSetCacheConfig is setting CachePreferShared too often #2066\nCuda: TeamPolicy doesn’t throw then created with non-viable vector length and also doesn’t backscale to viable one #2020\nCuda: cudaMemcpy error for large league sizes on V100 #1991\nCuda: illegal warp sync in parallel_reduce by functor on Turing 75 #1958\nTeamThreadRange: Inconsistent results from TeamThreadRange reduction #1905\nAtomics: atomic_fetch_oper & atomic_oper_fetch don’t build for complex&lt;float&gt; #1964\nViews: Kokkos randomread Views leak memory #2155\nScatterView: LayoutLeft overload currently non-functional #2165\nKNL: With intel 17.2.174 illegal instruction in random number test #2078\nBitset: Enable copy constructor on device #2094\nExamples: do not compile due to template deduction error (multi_fem) #1928\n\n\n\n\nFull Changelog\nImplemented enhancements:\n\nCapability, Tests: C++14 support and testing #1914\nCapability: Add environment variables for all command line arguments #1798\nCapability: –kokkos-ndevices not working for Slurm #1920\nView: Undefined behavior when deep copying from and to an empty unmanaged view #1967\nBuildSystem: nvcc_wrapper should stop immediately if nvcc is not in PATH #1861\n\nFixed bugs:\n\nCuda: Fix Volta Issues 1 Non-deterministic behavior on Volta, runs fine on Pascal #1949\nCuda: Fix Volta Issues 2 CUDA Team Scan gives wrong values on Volta with -G compile flag #1942\nCuda: illegal warp sync in parallel_reduce by functor on Turing 75 #1958\nThreads: Pthreads backend does not handle RangePolicy with offset correctly #1976\nAtomics: atomic_fetch_oper has no case for Kokkos::complex&lt;double&gt; or other 16-byte types #1951\nMDRangePolicy: Fix zero-length range #1948\nTeamThreadRange: TeamThreadRange MaxLoc reduce doesnt compile #1909\n\n\n\n\nFull Changelog\nImplemented enhancements:\n\nDualView: Add non-templated functions for sync, need_sync, view, modify #1858\nDualView: Avoid needlessly allocates and initializes modify_host and modify_device flag views #1831\nDualView: Incorrect deduction of “not device type” #1659\nBuildSystem: Add KOKKOS_ENABLE_CXX14 and KOKKOS_ENABLE_CXX17 #1602\nBuildSystem: Installed kokkos_generated_settings.cmake contains build directories instead of install directories #1838\nBuildSystem: KOKKOS_ARCH: add ticks to printout of improper arch setting #1649\nBuildSystem: Make core/src/Makefile for Cuda use needed nvcc_wrapper #1296\nBuild: Support PGI as host compiler for NVCC #1828\nBuild: Many Warnings Fixed e.g.#1786\nCapability: OffsetView with non-zero begin index #567\nCapability: Reductions into device side view #1788\nCapability: Add max_size to Kokkos::Array #1760\nCapability: View Assignment: LayoutStride -&gt; LayoutLeft and LayoutStride -&gt; LayoutRight #1594\nCapability: Atomic function allow implicit conversion of update argument #1571\nCapability: Add team_size_max with tagged functors #663\nCapability: Fix allignment of views from Kokkos_ScratchSpace should use different alignment #1700\nCapabilitiy: create_mirror_view_and_copy for DynRankView #1651\nCapability: DeepCopy HBWSpace / HostSpace #548\nROCm: support team vector scan #1645\nROCm: Merge from rocm-hackathon2 #1636\nROCm: Add ParallelScanWithTotal #1611\nROCm: Implement MDRange in ROCm #1314\nROCm: Implement Reducers for Nested Parallelism Levels #963\nROCm: Add asynchronous deep copy #959\nTests: Memory pool test seems to allocate 8GB #1830\nTests: Add unit_test for team_broadcast #734\n\nFixed bugs:\n\nBuildSystem: Makefile.kokkos gets gcc-toolchain wrong if gcc is cached #1841\nBuildSystem: kokkos_generated_settings.cmake placement is inconsistent #1771\nBuildSystem: Invalid escape sequence . in kokkos_functions.cmake #1661\nBuildSystem: Problem in Kokkos generated cmake file #1770\nBuildSystem: invalid file names on windows #1671\nTests: reducers min/max_loc test fails randomly due to multiple min values and thus multiple valid locations #1681\nTests: cuda.scatterview unit test causes “Bus error” when force_uvm and enable_lambda are enabled #1852\nTests: cuda.cxx11 unit test fails when force_uvm and enable_lambda are enabled #1850\nTests: threads.reduce_device_view_range_policy failing with Cuda/8.0.44 and RDC #1836\nBuild: compile error when compiling Kokkos with hwloc 2.0.1 (on OSX 10.12.6, with g++ 7.2.0) #1506\nBuild: dual_view.view broken with UVM #1834\nBuild: White cuda/9.2 + gcc/7.2 warnings triggering errors #1833\nBuild: warning: enum constant in boolean context #1813\nCapability: Fix overly conservative max_team_size thingy #1808\nDynRankView: Ctors taking ViewAllocateWithoutInitializing broken #1783\nCuda: Apollo cuda.team_broadcast test fail with clang-6.0 #1762\nCuda: Clang spurious test failure in impl_view_accessible #1753\nCuda: Kokkos::complex&lt;double&gt; atomic deadlocks with Clang 6 Cuda build with -O0 #1752\nCuda: LayoutStride Test fails for UVM as default memory space #1688\nCuda: Scan wrong values on Volta #1676\nCuda: Kokkos::deep_copy error with CudaUVM and Kokkos::Serial spaces #1652\nCuda: cudaErrorInvalidConfiguration with debug build #1647\nCuda: parallel_for with TeamPolicy::team_size_recommended with launch bounds not working – reported by Daniel Holladay #1283\nCuda: Using KOKKOS_CLASS_LAMBDA in a class with Kokkos::Random_XorShift64_Pool member data #1696\nLong Build Times on Darwin #1721\nCapability: Typo in Kokkos_Sort.hpp - BinOp3D - wrong comparison #1720\nBuffer overflow in SharedAllocationRecord in Kokkos_HostSpace.cpp #1673\nSerial unit test failure #1632\n\n\n\n\nFull Changelog\nPart of the Kokkos C++ Performance Portability Programming EcoSystem 2.7\nImplemented enhancements:\n\nDeprecate team_size auto adjusting to maximal value possible #1618\nDynamicView - remove restrictions to std::is_trivial types and value_type is power of two #1586\nKokkos::StaticCrsGraph does not propagate memory traits (e.g., Unmanaged) #1581\nAdding ETI for DeepCopy / ViewFill etc. #1578\nDeprecate all the left over KOKKOS_HAVE_ Macros and Kokkos_OldMacros.hpp #1572\nError if Kokkos_ARCH set in CMake #1555\nDeprecate ExecSpace::initialize / ExecSpace::finalize #1532\nNew API for TeamPolicy property setting #1531\nclang 6.0 + cuda debug out-of-memory test failure #1521\nCuda UniqueToken interface not consistent with other backends #1505\nMove Reducers out of Experimental namespace #1494\nProvide scope guard for initialize/finalize #1479\nCheck Kokkos::is_initialized in SharedAllocationRecord dtor #1465\nRemove static list of allocations #1464\nMakefiles: Support single compile/link line use case #1402\nThreadVectorRange with a range #1400\nExclusive scan + last value API #1358\nInstall kokkos_generated_settings.cmake #1348\nKokkos arrays (not views!) don’t do bounds checking in debug mode #1342\nExpose round-robin GPU assignment outside of initialize(int, char**) #1318\nDynamicView misses use_count and label function #1298\nView constructor should check arguments #1286\nFalse Positive on Oversubscription Warning #1207\nAllow (require) execution space for 1st arg of VerifyExecutionCanAccessMemorySpace #1192\nROCm: Add ROCmHostPinnedSpace #958\npower of two functions #656\nCUDA 8 has 64bit __shfl #361\nAdd TriBITS/CMake configure information about node types #243\n\nFixed bugs:\n\nCUDA atomic_fetch_sub for doubles is hitting CAS instead of intrinsic #1624\nBug: use of ballot on Volta #1612\nKokkos::deep_copy memory access failures #1583\ng++ -std option doubly set for cmake project #1548\nViewFill for 1D Views of larger 32bit entries fails #1541\nCUDA Volta another warpsync bug #1520\ntriple_nested_parallelism fails with KOKKOS_DEBUG and CUDA #1513\nJenkins errors in Kokkos_SharedAlloc.cpp with debug build #1511\nKokkos::Sort out-of-bounds with empty bins #1504\nGet rid of deprecated functions inside Kokkos #1484\nget_work_partition casts int64_t to int, causing a seg fault #1481\nNVCC bug with __device__ on defaulted function #1470\nCMake example broken with CUDA backend #1468\n\n\n\n\nFull Changelog\nPart of the Kokkos C++ Performance Portability Programming EcoSystem 2.6\nImplemented enhancements:\n\nSupport NVIDIA Volta microarchitecture #1466\nKokkos - Define empty functions when profiling disabled #1424\nDon’t use __constant__ cache for lock arrays, enable once per run update instead of once per call #1385\ntask dag enhancement. #1354\nCuda task team collectives and stack size #1353\nReplace View operator acceptance of more than rank integers with ‘access’ function #1333\nInteroperability: Do not shut down backend execution space runtimes upon calling finalize. #1305\nshmem_size for LayoutStride #1291\nKokkos::resize performs poorly on 1D Views #1270\nstride() is inconsistent with dimension(), extent(), etc. #1214\nKokkos::sort defaults to std::sort on host #1208\nDynamicView with host size grow #1206\nUnmanaged View with Anonymous Memory Space #1175\nSort subset of Kokkos::DynamicView #1160\nMDRange policy doesn’t support lambda reductions #1054\nAdd ability to set hook on Kokkos::finalize #714\nAtomics with Serial Backend - Default should be Disable? #549\nKOKKOS_ENABLE_DEPRECATED_CODE #1359\n\nFixed bugs:\n\ncuda_internal_maximum_warp_count returns 8, but I believe it should return 16 for P100 #1269\nCuda: level 1 scratch memory bug (reported by Stan Moore) #1434\nMDRangePolicy Reduction requires value_type typedef in Functor #1379\nKokkos DeepCopy between empty views fails #1369\nSeveral issues with new CMake build infrastructure (reported by Eric Phipps) #1365\ndeep_copy between rank-1 host/device views of differing layouts without UVM no longer works (reported by Eric Phipps) #1363\nProfiling can’t be disabled in CMake, and a parallel_for is missing for tasks (reported by Kyungjoo Kim) #1349\nget_work_partition int overflow (reported by berryj5) #1327\nKokkos::deep_copy must fence even if the two views are the same #1303\nCudaUVMSpace::allocate/deallocate must fence #1302\nViewResize on CUDA fails in Debug because of too many resources requested #1299\nCuda 9 and intrepid2 calls from Panzer. #1183\nSlowdown due to tracking_enabled() in 2.04.00 (found by Albany app) #1016\nBounds checking fails with zero-span Views (reported by Stan Moore) #1411\n\n\n\n\nFull Changelog\nPart of the Kokkos C++ Performance Portability Programming EcoSystem 2.5\nImplemented enhancements:\n\nProvide Makefile.kokkos logic for CMake and TriBITS #878\nAdd Scatter View #825\nDrop gcc 4.7 and intel 14 from supported compiler list #603\nEnable construction of unmanaged view using common_view_alloc_prop #1170\nUnused Function Warning with XL #1267\nAdd memory pool parameter check #1218\nCUDA9: Fix warning for unsupported long double #1189\nCUDA9: fix warning on defaulted function marking #1188\nCUDA9: fix warnings for deprecated warp level functions #1187\nAdd CUDA 9.0 nightly testing #1174\n{OMPI,MPICH}_CXX hack breaks nvcc_wrapper use case #1166\nKOKKOS_HAVE_CUDA_LAMBDA became KOKKOS_CUDA_USE_LAMBDA #1274\n\nFixed bugs:\n\nMinMax Reducer with tagged operator doesn’t compile #1251\nReducers for Tagged operators give wrong answer #1250\nKokkos not Compatible with Big Endian Machines? #1235\nParallel Scan hangs forever on BG/Q #1234\nThreads backend doesn’t compile with Clang on OS X #1232\n$(shell date) needs quote #1264\nUnqualified parallel_for call conflicts with user-defined parallel_for #1219\nKokkosAlgorithms: CMake issue in unit tests #1212\nIntel 18 Error: “simd pragma has been deprecated” #1210\nMemory leak in Kokkos::initialize #1194\nCUDA9: compiler error with static assert template arguments #1190\nKokkos::Serial::is_initialized returns always true #1184\nTriple nested parallelism still fails on bowman #1093\nOpenMP openmp.range on Develop Runs Forever on POWER7+ with RHEL7 and GCC4.8.5 #995\nRendezvous performance at global scope #985\n\n\n\n\nFull Changelog\nImplemented enhancements:\n\nAdd Subview pattern. #648\nAdd Kokkos “global” is_initialized #1060\nAdd create_mirror_view_and_copy #1161\nAdd KokkosConcepts SpaceAccessibility function #1092\nOption to Disable Initialize Warnings #1142\nMature task-DAG capability #320\nPromote Work DAG from experimental #1126\nImplement new WorkGraph push/pop #1108\nKokkos_ENABLE_Cuda_Lambda should default ON #1101\nAdd multidimensional parallel for example and improve unit test #1064\nFix ROCm: Performance tests not building #1038\nMake KOKKOS_ALIGN_SIZE a configure-time option #1004\nMake alignment consistent #809\nImprove subview construction on Cuda backend #615\n\nFixed bugs:\n\nKokkos::vector fixes for application #1134\nDynamicView non-power of two value_type #1177\nMemory pool bug #1154\nCuda launch bounds performance regression bug #1140\nSignificant performance regression in LAMMPS after updating Kokkos #1139\nCUDA compile error #1128\nMDRangePolicy neg idx test failure in debug mode #1113\nsubview construction on Cuda backend #615\n\n\n\n\nFull Changelog\nImplemented enhancements:\n\nOpenMP partition: set number of threads on nested level #1082\nAdd StaticCrsGraph row() method #1071\nEnhance Kokkos complex operator overloading #1052\nTell Trilinos packages about host+device lambda #1019\nFunction markup for defaulted class members #952\nAdd deterministic random number generator #857\n\nFixed bugs:\n\nFix reduction_identity&lt;T&gt;::max for floating point numbers #1048\nFix MD iteration policy ignores lower bound on GPUs #1041\n(Experimental) HBWSpace Linking issues in KokkosKernels #1094\n(Experimental) ROCm: algorithms/unit_tests test_sort failing with segfault #1070\n\n\n\n\nFull Changelog\nImplemented enhancements:\n\nAdded ROCm backend to support AMD GPUs\nKokkos::complex&lt;T&gt; behaves slightly differently from std::complex&lt;T&gt; #1011\nKokkos::Experimental::Crs constructor arguments were in the wrong order #992\nWork graph construction ease-of-use (one lambda for count and fill) #991\nwhen_all returns pointer of futures (improved interface) #990\nAllow assignment of LayoutLeft to LayoutRight or vice versa for rank-0 Views #594\nChanged the meaning of Kokkos_ENABLE_CXX11_DISPATCH_LAMBDA #1035\n\nFixed bugs:\n\nmemory pool default constructor does not properly set member variables. #1007\n\n\n\n\nFull Changelog\nImplemented enhancements:\n\nDisallow enabling both OpenMP and Threads in the same executable #406\nMake Kokkos::OpenMP respect OMP environment even if hwloc is available #630\nImprove Atomics Performance on KNL/Broadwell where PREFETCHW/RFO is Available #898\nKokkos::resize should test whether dimensions have changed before resizing #904\nDevelop performance-regression/acceptance tests #737\nMake the deep_copy Profiling hook a start/end system #890\nAdd deep_copy Profiling hook #843\nAppend tag name to parallel construct name for Profiling #842\nAdd view label to View bounds error message for CUDA backend #870\nDisable printing the loaded profiling library #824\n“Declared but never referenced” warnings #853\nWarnings about lock_address_cuda_space #852\nWorkGraph execution policy #771\nSimplify makefiles by guarding compilation with appropriate KOKKOS_ENABLE_### macros #716\nCmake build: wrong include install directory #668\nDerived View type and allocation #566\nFix Compiler warnings when compiling core unit tests for Cuda #214\n\nFixed bugs:\n\nOut-of-bounds read in Kokkos_Layout.hpp #975\nCudaClang: Fix failing test with Clang 4.0 #941\nRespawn when memory pool allocation fails (not available memory) #940\nMemory pool aborts on zero allocation request, returns NULL for &lt; minimum #939\nError with TaskScheduler query of underlying memory pool #917\nProfiling::*Callee static variables declared in header #863\ncalling *Space::name() causes compile error #862\nbug in Profiling::deallocateData #860\ntask_depend test failing, CUDA 8.0 + Pascal + RDC #829\n[develop branch] Standalone cmake issues #826\nKokkos CUDA failes to compile with OMPI_CXX and MPICH_CXX wrappers #776\nTask Team reduction on Pascal #767\nCUDA stack overflow with TaskDAG test #758\nTeamVector test on Cuda #670\nClang 4.0 Cuda Build broken again #560\n\n\n\n\nFull Changelog\nImplemented enhancements:\n\nHarmonize Custom Reductions over nesting levels #802\nPrevent users directly including KokkosCore_config.h #815\nDualView aborts on concurrent host/device modify (in debug mode) #814\nAbort when running on a NVIDIA CC5.0 or higher architecture with code compiled for CC &lt; 5.0 #813\nAdd “name” function to ExecSpaces #806\nAllow null Future in task spawn dependences #795\nAdd Unit Tests for Kokkos::complex #785\nAdd pow function for Kokkos::complex #784\nSquare root of a complex #729\nCommand line processing of –threads argument prevents users from having any commandline arguments starting with –threads #760\nProtected deprecated API with appropriate macro #756\nAllow task scheduler memory pool to be used by tasks #747\nView bounds checking on host-side performance: constructing a std::string #723\nAdd check for AppleClang as compiler distinct from check for Clang. #705\nUninclude source files for specific configurations to prevent link warning. #701\nAdd –small option to snapshot script #697\nCMake Standalone Support #674\nCMake build unit test and install #808\nCMake: Fix having kokkos as a subdirectory in a pure cmake project #629\nTribits macro assumes build directory is in top level source directory #654\nUse bin/nvcc_wrapper, not config/nvcc_wrapper #562\nAllow MemoryPool::allocate() to be called from multiple threads per warp. #487\nAllow MemoryPool::allocate\\(\\) to be called from multiple threads per warp. #487\nMove OpenMP 4.5 OpenMPTarget backend into Develop #456\nTesting on ARM testbed #288\n\nFixed bugs:\n\nFix label in OpenMP parallel_reduce verify_initialized #834\nTeamScratch Level 1 on Cuda hangs #820\n[bug] memory pool. #786\nSome Reduction Tests fail on Intel 18 with aggressive vectorization on #774\nError copying dynamic view on copy of memory pool #773\nCUDA stack overflow with TaskDAG test #758\nThreadVectorRange Customized Reduction Bug #739\nset_scratch_size overflows #726\nGet wrong results for compiler checks in Makefile on OS X. #706\nFix check if multiple host architectures enabled. #702\nThreads Backend Does not Pass on Cray Compilers #609\nRare bug in memory pool where allocation can finish on superblock in empty state #452\nLDFLAGS in core/unit_test/Makefile: potential “undefined reference” to pthread lib #148\n\n\n\n\nFull Changelog\nImplemented enhancements:\n\nUnorderedMap: make it accept Devices or MemorySpaces #711\nsort to accept DynamicView and [begin,end) indices #691\nENABLE Macros should only be used via #ifdef or #if defined #675\nRemove impl/Kokkos_Synchronic_* #666\nTurning off IVDEP for Intel 14. #638\nUsing an installed Kokkos in a target application using CMake #633\nCreate Kokkos Bill of Materials #632\nMDRangePolicy and tagged evaluators #547\nAdd PGI support #289\n\nFixed bugs:\n\nOutput from PerTeam fails #733\nCuda: architecture flag not added to link line #688\nGetting large chunks of memory for a thread team in a universal way #664\nKokkos RNG normal() function hangs for small seed value #655\nKokkos Tests Errors on Shepard/HSW Builds #644\n\n\n\n\nFull Changelog\nImplemented enhancements:\n\nContainers: Adding block partitioning to StaticCrsGraph #625\nKokkos Make System can induce Errors on Cray Volta System #610\nOpenMP: error out if KOKKOS_HAVE_OPENMP is defined but not _OPENMP #605\nCMake: fix standalone build with tests #604\nChange README (that GitHub shows when opening Kokkos project page) to tell users how to submit PRs #597\nAdd correctness testing for all operators of Atomic View #420\nAllow assignment of Views with compatible memory spaces #290\nBuild only one version of Kokkos library for tests #213\nClean out old KOKKOS_HAVE_CXX11 macros clauses #156\nHarmonize Macro names #150\n\nFixed bugs:\n\nCray and PGI: Kokkos_Parallel_Reduce #634\nKokkos Make System can induce Errors on Cray Volta System #610\nNormal() function random number generator doesn’t give the expected distribution #592\n\n\n\n\nFull Changelog\nImplemented enhancements:\n\nAdd CMake option to enable Cuda Lambda support #589\nAdd CMake option to enable Cuda RDC support #588\nAdd Initial Intel Sky Lake Xeon-HPC Compiler Support to Kokkos Make System #584\nBuilding Tutorial Examples #582\nInternal way for using ThreadVectorRange without TeamHandle #574\nTesting: Add testing for uvm and rdc #571\nProfiling: Add Memory Tracing and Region Markers #557\nnvcc_wrapper not installed with Kokkos built with CUDA through CMake #543\nImprove DynRankView debug check #541\nBenchmarks: Add Gather benchmark #536\nTesting: add spot_check option to test_all_sandia #535\nDeprecate Kokkos::Impl::VerifyExecutionCanAccessMemorySpace #527\nAdd AtomicAdd support for 64bit float for Pascal #522\nAdd Restrict and Aligned memory trait #517\nKokkos Tests are Not Run using Compiler Optimization #501\nAdd support for clang 3.7 w/ openmp backend #393\nProvide an error throw class #79\n\nFixed bugs:\n\nCuda UVM Allocation test broken with UVM as default space #586\nBug (develop branch only): multiple tests are now failing when forcing uvm usage. #570\nError in generate_makefile.sh for Kokkos when Compiler is Empty String/Fails #568\nXL 13.1.4 incorrect C++11 flag #553\nImprove DynRankView debug check #541\nInstalling Library on MAC broken due to cp -u #539\nIntel Nightly Testing with Debug enabled fails #534\n\n\n\n\nFull Changelog\nImplemented enhancements:\n\nAdd Changelog generation to our process. #506\n\nFixed bugs:\n\nTest scratch_request fails in Serial with Debug enabled #520\nBug In BoundsCheck for DynRankView #516\n\n\n\n\nFull Changelog\nImplemented enhancements:\n\nAdd PowerPC assembly for grabbing clock register in memory pool #511\nAdd GCC 6.x support #508\nTest install and build against installed library #498\nMakefile.kokkos adds expt-extended-lambda to cuda build with clang #490\nAdd top-level makefile option to just test kokkos-core unit-test #485\nSplit and harmonize Object Files of Core UnitTests to increase build parallelism #484\nLayoutLeft to LayoutLeft subview for 3D and 4D views #473\nAdd official Cuda 8.0 support #468\nAllow C++1Z Flag for Class Lambda capture #465\nAdd Clang 4.0+ compilation of Cuda code #455\nPossible Issue with Intel 17.0.098 and GCC 6.1.0 in Develop Branch #445\nAdd name of view to “View bounds error” #432\nMove Sort Binning Operators into Kokkos namespace #421\nTaskPolicy - generate error when attempt to use uninitialized #396\nImport WithoutInitializing and AllowPadding into Kokkos namespace #325\nTeamThreadRange requires begin, end to be the same type #305\nCudaUVMSpace should track # allocations, due to CUDA limit on # UVM allocations #300\nRemove old View and its infrastructure #259\n\nFixed bugs:\n\nBug in TestCuda_Other.cpp: most likely assembly inserted into Device code #515\nCuda Compute Capability check of GPU is outdated #509\nmulti_scratch test with hwloc and pthreads seg-faults. #504\ngenerate_makefile.bash: “make install” is broken #503\nmake clean in Out of Source Build/Tests Does Not Work Correctly #502\nMakefiles for test and examples have issues in Cuda when CXX is not explicitly specified #497\nDispatch lambda test directly inside GTEST macro doesn’t work with nvcc #491\nUnitTests with HWLOC enabled fail if run with mpirun bound to a single core #489\nFailing Reducer Test on Mac with Pthreads #479\nmake test Dumps Error with Clang Not Found #471\nOpenMP TeamPolicy member broadcast not using correct volatile shared variable #424\nTaskPolicy - generate error when attempt to use uninitialized #396\nNew task policy implementation is pulling in old experimental code. #372\nMemoryPool unit test hangs on Power8 with GCC 6.1.0 #298\n\n\n\n\nFull Changelog\nImplemented enhancements:\n\nEnable Profiling by default in Tribits build #438\nparallel_reduce(0), parallel_scan(0) unit tests #436\ndata()==NULL after realloc with LayoutStride #351\nFix tutorials to track new Kokkos::View #323\nRename team policy set_scratch_size. #195\n\nFixed bugs:\n\nPossible Issue with Intel 17.0.098 and GCC 6.1.0 in Develop Branch #445\nMakefile spits syntax error #435\nKokkos::sort fails for view with all the same values #422\nGeneric Reducers: can’t accept inline constructed reducer #404\ndata\\(\\)==NULL after realloc with LayoutStride #351\nconst subview of const view with compile time dimensions on Cuda backend #310\nKokkos (in Trilinos) Causes Internal Compiler Error on CUDA 8.0.21-EA on POWER8 #307\nCore Oversubscription Detection Broken? #159\n\n\n\n\nFull Changelog\nImplemented enhancements:\n\nAdd “standard” reducers for lambda-supportable customized reduce #411\nTaskPolicy - single thread back-end execution #390\nKokkos master clone tag #387\nQuery memory requirements from task policy #378\nOutput order of test_atomic.cpp is confusing #373\nMissing testing for atomics #341\nFeature request for Kokkos to provide Kokkos::atomic_fetch_max and atomic_fetch_min #336\nTaskPolicy&lt;Cuda&gt; performance requires teams mapped to warps #218\n\nFixed bugs:\n\nReduce with Teams broken for custom initialize #407\nFailing Kokkos build on Debian #402\nFailing Tests on NVIDIA Pascal GPUs #398\nAlgorithms: fill_random assumes dimensions fit in unsigned int #389\nKokkos::subview with RandomAccess Memory Trait #385\nBuild warning (signed / unsigned comparison) in Cuda implementation #365\nwrong results for a parallel_reduce with CUDA8 / Maxwell50 #352\nHierarchical parallelism - 3 level unit test #344\nCan I allocate a View w/ both WithoutInitializing & AllowPadding? #324\nsubview View layout determination #309\nUnit tests with Cuda - Maxwell #196\n\n\n\n\nFull Changelog\nImplemented enhancements:\n\nEdit ViewMapping so assigning Views with the same custom layout compiles when const casting #327\nDynRankView: Performance improvement for operator() #321\nInteroperability between static and dynamic rank views #295\nsubview member function ? #280\nInter-operatibility between View and DynRankView. #245\n(Trilinos) build warning in atomic_assign, with Kokkos::complex #177\nView&lt;&gt;::shmem_size should runtime check for number of arguments equal to rank #176\nCustom reduction join via lambda argument #99\nDynRankView with 0 dimensions passed in at construction #293\nInject view_alloc and friends into Kokkos namespace #292\nLess restrictive TeamPolicy reduction on Cuda #286\ndeep_copy using remap with source execution space #267\nSuggestion: Enable opt-in L1 caching via nvcc-wrapper #261\nMore flexible create_mirror functions #260\nRename View::memory_span to View::required_allocation_size #256\nUse of subviews and views with compile-time dimensions #237\nUse of subviews and views with compile-time dimensions #237\nKokkos::Timer #234\nFence CudaUVMSpace allocations #230\nView::operator() accept std::is_integral and std::is_enum #227\nAllocating zero size View #216\nThread scalable memory pool #212\nAdd a way to disable memory leak output #194\nKokkos exec space init should init Kokkos profiling #192\nRuntime rank wrapper for View #189\nProfiling Interface #158\nFix View assignment (of managed to unmanaged) #153\nAdd unit test for assignment of managed View to unmanaged View #152\nCheck for oversubscription of threads with MPI in Kokkos::initialize #149\nDynamic resizeable 1dimensional view #143\nDevelop TaskPolicy for CUDA #142\nNew View : Test Compilation Downstream #138\nNew View Implementation #135\nAdd variant of subview that lets users add traits #134\nNVCC-WRAPPER: Add –host-only flag #121\nAddress gtest issue with TriBITS Kokkos build outside of Trilinos #117\nMake tests pass with -expt-extended-lambda on CUDA #108\nDynamic scheduling for parallel_for and parallel_reduce #106\nRuntime or compile time error when reduce functor’s join is not properly specified as const member function or with volatile arguments #105\nError out when the number of threads is modified after kokkos is initialized #104\nPorting to POWER and remove assumption of X86 default #103\nDynamic scheduling option for RangePolicy #100\nSharedMemory Support for Lambdas #81\nRecommended TeamSize for Lambdas #80\nAdd Aggressive Vectorization Compilation mode #72\nDynamic scheduling team execution policy #53\nUVM allocations in multi-GPU systems #50\nSynchronic in Kokkos::Impl #44\nindex and dimension types in for loops #28\nSubview assign of 1D Strided with stride 1 to LayoutLeft/Right #1\n\nFixed bugs:\n\nmisspelled variable name in Kokkos_Atomic_Fetch + missing unit tests #340\nseg fault Kokkos::Impl::CudaInternal::print_configuration #338\nClang compiler error with named parallel_reduce, tags, and TeamPolicy. #335\nShared Memory Allocation Error at parallel_reduce #311\nDynRankView: Fix resize and realloc #303\nScratch memory and dynamic scheduling #279\nMemoryPool infinite loop when out of memory #312\nKokkos DynRankView changes break Sacado and Panzer #299\nMemoryPool fails to compile on non-cuda non-x86 #297\nRandom Number Generator Fix #296\nView template parameter ordering Bug #282\nSerial task policy broken. #281\ndeep_copy with LayoutStride should not memcpy #262\nDualView::need_sync should be a const method #248\nArbitrary-sized atomics on GPUs broken; loop forever #238\nboolean reduction value_type changes answer #225\nCustom init() function for parallel_reduce with array value_type #210\nunit_test Makefile is Broken - Recursively Calls itself until Machine Apocalypse. #202\nnvcc_wrapper Does Not Support -Xcompiler &lt;compiler option&gt; #198\nKokkos exec space init should init Kokkos profiling #192\nKokkos Threads Backend impl_shared_alloc Broken on Intel 16.1 (Shepard Haswell) #186\npthread back end hangs if used uninitialized #182\nparallel_reduce of size 0, not calling init/join #175\nBug in Threads with OpenMP enabled #173\nKokkosExp_SharedAlloc, m_team_work_index inaccessible #166\n128-bit CAS without Assembly Broken? #161\nfatal error: Cuda/Kokkos_Cuda_abort.hpp: No such file or directory #157\nPower8: Fix OpenMP backend #139\nData race in Kokkos OpenMP initialization #131\nparallel_launch_local_memory and cuda 7.5 #125\nResize can fail with Cuda due to asynchronous dispatch #119\nQthread taskpolicy initialization bug. #92\nWindows: sys/mman.h #89\nWindows: atomic_fetch_sub() #88\nWindows: snprintf #87\nParallel_Reduce with TeamPolicy and league size of 0 returns garbage #85\nThrow with Cuda when using (2D) team_policy parallel_reduce with less than a warp size #76\nScalar views don’t work with Kokkos::Atomic memory trait #69\nReduce the number of threads per team for Cuda #63\nNamed Kernels fail for reductions with CUDA #60\nKokkos View dimension_() for long returning unsigned int #20\natomic test hangs with LLVM #6\nOpenMP Test should set omp_set_num_threads to 1 #4\n\nClosed issues:\n\ndevelop branch broken with CUDA 8 and –expt-extended-lambda #354\n–arch=KNL with Intel 2016 build failure #349\nError building with Cuda when passing -DKOKKOS_CUDA_USE_LAMBDA to generate_makefile.bash #343\nCan I safely use int indices in a 2-D View with capacity &gt; 2B? #318\nKokkos::ViewAllocateWithoutInitializing is not working #317\nIntel build on Mac OS X #277\ndeleted #271\nBroken Mira build #268\n32-bit build #246\nparallel_reduce with RDC crashes linker #232\nbuild of Kokkos_Sparse_MV_impl_spmv_Serial.cpp.o fails if you use nvcc and have cuda disabled #209\nKokkos Serial execution space is not tested with TeamPolicy. #207\nUnit test failure on Hansen KokkosCore_UnitTest_Cuda_MPI_1 #200\nnvcc compiler warning: calling a __host__ function from a __host__ __device__ function is not allowed #180\nIntel 15 build error with defaulted “move” operators #171\nmissing libkokkos.a during Trilinos 12.4.2 build, yet other libkokkos*.a libs are there #165\nTie atomic updates to execution space or even to thread team? (speculation) #144\nNew View: Compiletime/size Test #137\nNew View : Performance Test #136\nSigned/unsigned comparison warning in CUDA parallel #130\nKokkos::complex: Need op* w/ std::complex & real #126\nUse uintptr_t for casting pointers #110\nDefault thread mapping behavior between P and Q threads. #91\nWindows: Atomic_Fetch_Exchange() return type #90\nSynchronic unit test is way too long #84\nnvcc_wrapper -&gt; $(NVCC_WRAPPER) #42\nCheck compiler version and print helpful message #39\nKokkos shared memory on Cuda uses a lot of registers #31\nCan not pass unit test cuda.space without a GT 720 #25\nMakefile.kokkos lacks bounds checking option that CMake has #24\nKokkos can not complete unit tests with CUDA UVM enabled #23\nSimplify teams + shared memory histogram example to remove vectorization #21\nKokkos needs to rever to ${PROJECT_NAME}_ENABLE_CXX11 not Trilinos_ENABLE_CXX11 #17\nKokkos Base Makefile adds AVX to KNC Build #16\nMS Visual Studio 2013 Build Errors #9\nsubview(X, ALL(), j) for 2-D LayoutRight View X: should it view a column? #5\n\n\n\n\n* This Change Log was automatically generated by github_changelog_generator"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\n\n\n\n\n\nMI300 support unified memory support #6877\n\n\n\n\n\n\nSerial: Use the provided execution space instance in TeamPolicy #6951\nnvcc_wrapper: bring back support for --fmad option #6931\nFix CUDA reduction overflow for RangePolicy #6578"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-1",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-1",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\n\n\n\nAdd Experimental::sort_by_key(exec, keys, values) algorithm #6801\n\n\n\n\n\n\n\nExperimental multi-GPU support (from the same process) #6782\nLink against CUDA libraries even with KOKKOS_ENABLE_COMPILE_AS_CMAKE_LANGUAGE #6701\nDon’t use the compiler launcher script if the CMake compile language is CUDA. #6704\nnvcc(wrapper): adding “long” and “short” versions for all flags #6615\n\n\n\n\n\nFix compilation when using amdclang (with ROCm &gt;= 5.7) and RDC #6857\nUse rocthrust for sorting, when available #6793\n\n\n\n\n\nWe only support OneAPI SYCL implementation: add check during initialization\n\nError out on initialization if the backend is different from ext_oneapi_* #6784\nFilter GPU devices for ext_onapi_* GPU devices #6758\n\nPerformance Improvements\n\nAvoid unnecessary zero-memset of the scratch flags in SYCL #6739\nUse host-pinned memory to copy reduction/scan result #6500\n\nAddress deprecations after oneAPI 2023.2.0 #6577\nMake sure to call find_dependency for oneDPL if necessary #6870\n\n\n\n\n\nUse LLVM extensions for dynamic shared memory #6380\nGuard scratch memory usage in ParallelReduce #6585\nUpdate linker flags for Intel GPUs update #6735\nImprove handling of printf on Intel GPUs #6652\n\n\n\n\n\nAdd atomics support #6446\nMake the OpenACC backend asynchronous #6772\n\n\n\n\n\nAdd missing broadcast to TeamThreadRange parallel_scan #6601\n\n\n\n\n\nImprove performance of view initializations and filling with zeros #6573\n\n\n\n\n\n\nImprove performance of random number generation when using a normal distribution on GPUs #6556\nAllocate temporary view with the user-provided execution space instance and do not initialize in unique algorithm #6598\nAdd deduction guide for Kokkos::Array #6373\nProvide new public headers &lt;Kokkos_Clamp.hpp&gt; and &lt;Kokkos_MinMax.hpp&gt; #6687\nFix/improvement to remove_if parallel algorithm: use the provided execution space instance for temporary allocations and drop unnecessaryinitialization + avoid evaluating twice the predicate during final pass #6747\nAdd runtime function to query the number of devices and make device ID consistent with KOKKOS_VISIBLE_DEVICES #6713\nsimd: support vector_aligned_tag #6243\nAvoid unnecessary allocation when default constructing Bitset #6524\nFix constness for views in std algorithms #6813\nImprove error message on unsafe implicit conversion in MDRangePolicy #6855\nCTAD (deduction guides) for RangePolicy #6850\nCTAD (deduction guides) for MDRangePolicy #5516\n\n\n\n\n\nRequire Kokkos_ENABLE_ATOMICS_BYPASS option to bypass atomic operation for Serial backend only builds #6692\nAdd support for RISCV and the Milk-V’s Pioneer #6773\nAdd C++26 standard to CMake setup #6733\nFix Makefile when using gnu_generate_makefile.sh and make &gt;= 4.3 #6606\nCuda: Fix configuring with CMake &gt;= 3.28.4 - temporary fallback to internal CudaToolkit.cmake #6898\n\n\n\n\n\nRemove all DEPRECATED_CODE_3 option and all code that was guarded by it #6523\nDrop guards to accommodate external code defining KOKKOS_ASSERT #6665\nProfiling::ProfilingSection(std::string) constructor marked explicit and nodiscard #6690\nAdd bound check preconditions for RangePolicy and MDRangePolicy #6617 #6726\nAdd checks for unsafe implicit conversions in RangePolicy #6754\nRemove Kokkos::[b]half_t volatile overloads #6579\nRemove KOKKOS_IMPL_DO_NOT_USE_PRINTF #6593\nCheck matching static extents in View constructor #5190\nTools(profiling): fix typo Kokkos_Tools_Optim[i]zationGoal #6642\nRemove variadic range policy constructor (disallow passing multiple trailing chunk size arguments) #6845\nImprove message on view out of bounds access and always abort #6861\nDrop KOKKOS_ENABLE_INTEL_MM_ALLOC macro #6797\nRemove Kokkos::Experimental::LogicalMemorySpace (without going through deprecation) #6557\nRemove Experimental::HBWSpace and support for linking against memkind #6791\nDrop librt TPL and associated KOKKOS_ENABLE_LIBRT macro #6798\nDrop support for old CPU architectures (ARCH_BGQ, ARCH_POWER7, ARCH_WSM and associated ARCH_SSE4 macro) #6806\nDrop support for deprecated command-line arguments and environment variables #6744\n\n\n\n\n\nProvide kokkos_swap as part of Core and deprecate Experimental::swap in Algorithms #6697\nDeprecate {Cuda,HIP}::detect_device_count() and Cuda::[detect_]device_arch() #6710\nDeprecate ExecutionSpace::in_parallel() #6582\n\n\n\n\n\nFix team-level MDRange reductions: #6511\nFix CUDA and SYCL small value type (16-bit) team reductions #5334\nEnable {transform_}exclusive_scan in place #6667\nfill_random overload that do not take an execution space instance argument should fence #6658\nHIP,Cuda,OpenMPTarget: Fixup use provided execution space when copying host inaccessible reduction result #6777\nFix typo in cuda_func_set_attribute[s]_wrapper preventing proper setting of desired occupancy #6786\nAvoid undefined behavior due to conversion between signed and unsigned integers in shift_{right, left}_team_impl #6821\nFix a bug in Makefile.kokkos when using AMD GPU architectures as AMD_GFXYYY #6892"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-2",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-2",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\n\n\n\n\n\nAdd warp sync for parallel_reduce to avoid race condition #6630, #6746\n\n\n\n\n\nFix Graph “multiple definition of” linking error (missing inline specifier) #6624\nAdd support for gfx940 (AMD Instinct MI300 GPU) #6671\n\n\n\n\n\n\nCMake: Don’t let Kokkos set CMAKE_CXX_FLAGS for Trilinos builds #6742\n\n\n\n\n\nRemove deprecation warning for AllocationMechanism for GCC &lt;11.0 #6653\nFix bug early tools finalize with non-default host execution instances #6635\nFix various issues for MSVC CUDA builds #6659\nFix “extra ;” warning with -pedantic flag in &lt;Kokkos_SIMD_Scalar.hpp&gt; #6510"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-3",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-3",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\n\n\n\nSIMD: significant improvements to SIMD support and alignment with C++26 SIMD\n\nadd Kokkos::abs overload for SIMD types #6069\nadd generator constructors #6347\nconvert binary operators to hidden friends #6320\nadd shift operators #6109\nadd float support #6177\nadd remaining gather_from and scatter_to overloads #6220\ndefine simd math function overloads in the Kokkos namespace #6465, #6487\nKokkos_ENABLE_NATIVE=ON autodetects SIMD types supported #6188\nfix AVX2 SIMD support for ZEN2 AMD CPU #6238\n\nKokkos::printf #6083\nKokkos::sort: support custom comparator #6253\nhalf_t and bhalf_t numeric traits #5778\nhalf_t and bhalf_t mixed comparisons #6407\nhalf_t and bhalf_t mathematical functions #6124\nTeamThreadRange parallel_scan with return value #6090, #6301, #6302, #6303, #6307\nThreadVectorRange parallel_scan with return value #6235, #6242, #6308, #6305, #6292\nAdd team-level std algorithms #6200, #6205, #6207, #6208, #6209, #6210, #6211, #6212, #6213, #6256, #6258, #6350, #6351\nSerial: Allow for distinct execution space instances #6441\n\n\n\n\n\n\n\nFixed potential data race in Cuda parallel_reduce #6236\nUse cudaMallocAsync by default #6402\nBugfix for using Kokkos from a thread of execution #6299\n\n\n\n\n\nNew naming convention for AMD GPU: VEGA906, VEGA908, VEGA90A, NAVI1030 to AMD_GFX906, AMD_GFX908, AMD_GFX90A, AMD_GFX1030 #6266\nAdd initial support for gfx942: #6358\nImprove reduction performance #6229\nDeprecate HIP(hipStream_t,bool) constructor #6401\nAdd support for Graph #6370\nImprove reduction performance when using Teams #6284\nFix concurrency calculation #6479\nFix potential data race in HIP parallel_reduce #6429\n\n\n\n\n\nEnforce external sycl::queues to be in-order #6246\nImprove reduction performance: #6272 #6271 #6270 #6264\nAllow using the SYCL execution space on AMD GPUs #6321\nAllow sorting via native oneDPL to support Views with stride=1 #6322\nMake in-order queues the default via macro #6189\n\n\n\n\n\nSupport Clacc compiler #6250\n\n\n\n\n\n\nAdd missing is_*_view traits and is_*_view_v helper variable templates for DynRankView, DynamicView, OffsetView, ScatterView containers #6195\nMake nvcc_wrapper and compiler_launcher scripts more portable by switching to a #!/usr/bin/env shebang #6357\nAdd an improved Kokkos::malloc / Kokkos::free performance test #6377\nEnsure Views with size==0 can be used with deep_copy #6273\nKokkos::abort is moved to header Kokkos_Abort.hpp #6445\nKOKKOS_ASSERT, KOKKOS_EXPECTS, KOKKOS_ENSURES are moved to header Kokkos_Assert.hpp #6445\nAdd a permuted-index mode to the gups benchmark #6378\nCheck for overflow during backend initialization #6159\nMake constraints on Kokkos::sort more visible #6234 and cleanup API #6239\nAdd converting assignment to DualView: #6474\n\n\n\n\n\nExport Kokkos_CXX_COMPILER_VERSION #6282\nDisable default oneDPL support in Trilinos #6342\n\n\n\n\n\nEnsure that Kokkos::complex only gets instantiated for cv-unqualified floating-point types #6251\nRemoved (deprecated-3) support for volatile join operators in reductions #6385\nEnforce ViewCtorArgs restrictions for create_mirror_view #6304\nSIMD types for ARM NEON are not autodetected anymore but need Kokkos_ARCH_ARM_NEON or Kokkos_ARCH_NATIVE=ON #6394\nRemove #include &lt;iostream&gt; from headers where possible #6482\n\n\n\n\n\nDeprecated Kokkos::vector #6252\nAll host allocation mechanisms except for STD_MALLOC have been deprecated #6341\n\n\n\n\n\nMissing memory fence in RandomPool::free_state functions #6290\nFix for corner case in Kokkos::Experimental::is_partitioned algorithm #6257\nFix initialization of scratch lock variables in the Cuda backend #6433\nFixes for Kokkos::Array #6372\nFixed symlink configure issue for Windows #6241\nOpenMPTarget init-join fix #6444\nFix atomic operations bug for Min and Max #6435\nFix implementation for cyl_bessel_i0 #6484\nFix various NVCC warnings in BinSort, Array, and bit manipulation function templates #6483"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-4",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-4",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\n\n\n\nAdd &lt;Kokkos_BitManipulation.hpp&gt; header #4577 #5907 #5967 #6101\nAdd UnorderedMapInsertOpTypes #5877 and documentation #350\nAdd multiple reducers support for team-level parallel reduce #5727\n\n\n\n\n\n\n\nAllow NVCC 12 to compile using C++20 flag #5977\nRemove ability to disable CMake option Kokkos_ENABLE_CUDA_LAMBDA and unconditionally enable CUDA extended lambda support. #5964\nDrop unnecessary fences around the memory allocation when using CudaUVMSpace in views #6008\n\n\n\n\n\nImprove performance for parallel_reduce. Use different parameters for LightWeight kernels #6029 and #6160\n\n\n\n\n\nOnly pass one wrapper object in SYCL reductions #6047\nImprove and simplify parallel_scan implementation #6064\nRemove workaround for submit_barrier not being enqueued properly #5504\nFix guards for using scratch space with SYCL #6003\nFix compiling SYCL with KOKKOS_IMPL_DO_NOT_USE_PRINTF_USAGE #6219\n\n\n\n\n\nImprove hierarchical parallelism for Intel architectures #6043\nEnable Cray compiler for the OpenMPTarget backend. #5889\n\n\n\n\n\nUpdate HPX backend to use HPX’s sender/receiver functionality #5628\nIncrease minimum required HPX version to 1.8.0 #6132\nImplement HPX::in_parallel #6143\n\n\n\n\n\n\nExport CMake Kokkos_{CUDA,HIP}_ARCHITECTURES variables #5919 #5925\nAdd Kokkos::Profiling::ScopedRegion #5959 #5972\nAdd support for View::rank[_dynamic]()#5870\nDetect incompatible relocatable device code mode to prevent ODR violations #5991\nAdd (experimental) support for 32-bit Darwin and PPC #5916\nAdd missing half and bhalf specialization of the infinity numeric trait #6055\nAdd is_dual_view trait and align further with regular view #6120\nAllow templated functors in parallel_for, parallel_reduce and parallel_scan #5976\nDefine KOKKOS_COMPILER_INTEL_LLVM and only define at most one KOKKOS_COMPILER* macro #5906\nAllow linking against build tree #6078\nAllow passing a temporary std::vector to partition_space #6167\nKokkos can be used as an external dependency in Trilinos #6142, #6157 #6163\nLeft align demangled stacktrace output #6191\nImprove OpenMP affinity warning to include MPI concerns #6185\n\n\n\n\n\nDrop Kokkos_ENABLE_LAUNCH_COMPILER option which had no effect #6148\nExport variables for relevant Kokkos options with cmake#6142\n\n\n\n\n\nDesul atomics always enabled #5801\nDrop KOKKOS_ENABLE_CUDA_ASM* and KOKKOS_ENABLE_*_ATOMICS macros #5940\nDrop KOKKOS_ENABLE_RFO_PREFETCH macro #5944\nDeprecate Kokkos_ENABLE_CUDA_LAMBDA configuration option and force it to ON #5964\nRemove TriBITS Kokkos subpackages #6104\nCuda: Remove unused attach_texture_object #6129\nDrop Kokkos_ENABLE_PROFILING_LOAD_PRINT configuration option #6150\nDrop pointless Kokkos{Algorithms,Containers}_config.h files #6108\n\n\n\n\n\nDeprecate BinSort, BinOp1D, and BinOp3D default constructors #6131\n\n\n\n\n\nFix SYCLTeamMember to take arguments for scratch sizes as std::size_t #5981\nFix Kokkos_SIMD with AVX2 on 64-bit architectures #6075\nFix an incorrectly returning size for SIMD uint64_t in AVX2 #6004\nFix missing avx512 header file with gcc versions before 10 #6183\nFix incorrect results of parallel_reduce of types smaller than int on CUDA and HIP: #5745\nCMake: update package compatibility mode when building within Trilinos #6012\nFix warnings generated from internal uses of ALL_t rather than Kokkos::ALL_t #6028\nFix bug in hpcbind script: check for correct Slurm variable #6116\nKokkosTools: Don’t call callbacks before backends are initialized #6114\nFix global fence in Kokkos::resize(DynRankView) #6184\nFix BinSort support for strided views #6081\nFix missing is_*_view traits in containers #6195\nFix broken OpenMP target on NVHPC #6171\nSorting an empty view should exit early and not fail #6130"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-5",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-5",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\n\n\n\n\n\nAllow NVCC 12 to compile using C++20 flag #6020\nAdd CUDA Ada architecture support #6022\n\n\n\n\n\nAdd support for AMDGPU target NAVI31 / RX 7900 XT(X): gfx1100 #6021\nHIP: Fix warning from std::memcpy #6019\n\n\n\n\n\nFix SYCLTeamMember to take arguments for scratch sizes as std::size_t #5986\n\n\n\n\n\n\nFixup 4.0 change log #6023\n\n\n\n\n\nCherry-pick TriBITS update from Trilinos #6037\nCMake: update package compatibility mode when building within Trilinos #6013\n\n\n\n\n\nFix an incorrectly returning size for SIMD uint64_t in AVX2 #6011\nDesul atomics: wrong value for desul::Impl::numeric_limits_max&lt;uint64_t&gt; #6018\nFix warning in some user code when using std::memcpy #6000\nFix excessive build times using Makefile.kokkos #6068"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-6",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-6",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\n\n\n\nAllow value types without default constructor in Kokkos::View with Kokkos::WithoutInitializing #5307\nparallel_scan with View as result type. #5146\nIntroduced SharedSpace, an alias for a MemorySpace that is accessible by every ExecutionSpace. The memory is moved and then accessed locally. #5289\nIntroduced SharedHostPinnedSpace, an alias for a MemorySpace that is accessible by every ExecutionSpace. The memory is pinned to the host and accessed via zero-copy access. #5405\nAdd team- and thread-level sort, sort_by_key algorithms. #5317\nGroundwork for MDSpan integration. #4973 and #5304\nIntroduced MD version of hierarchical parallelism: TeamThreadMDRange, ThreadVectorMDRange and TeamVectorMDRange. #5238\n\n\n\n\n\n\n\nAllow CUDA PTX forward compatibility #3612 #5536 #5527\nAdd support for NVIDIA Hopper GPU architecture #5538\nDon’t rely on synchronization behavior of default stream in CUDA and HIP #5391\nImprove CUDA cache config settings #5706\n\n\n\n\n\nMove HIP, HIPSpace, HIPHostPinnedSpace, and HIPManagedSpace out of the Experimental namespace #5383\nDon’t rely on synchronization behavior of default stream in CUDA and HIP #5391\nExport AMD architecture flag when using Trilinos #5528\nFix linking error (see OLCF issue) when using amdclang: #5539\nRemove support for MI25 and added support for Navi 1030 #5522\nFix race condition when using HSA_XNACK=1 #5755\nAdd parameter to force using GlobalMemory launch mechanism. This can be used when encountering compiler bugs with ROCm 5.3 and 5.4 #5796\n\n\n\n\n\nDelegate choice of workgroup size for parallel_reduce with RangePolicy to the compiler. #5227\nSYCL RangePolicy: manually specify workgroup size through chunk size #4875\n\n\n\n\n\nSelect the right device #5492\n\n\n\n\n\nAdd partition_space #5105\n\n\n\n\n\n\nImplement OffsetView constructor taking pairs and ViewCtorProp #5303\nPromote math constants to Kokkos::numbers namespace #5434\nAdd overloads of hypot math function that take 3 arguments #5341\nAdd fma fused multiply-add math function #5428\nViews using MemoryTraits::Atomic don’t need volatile overloads for the value type anymore. #5455\nAdded is_team_handle trait #5375\nRefactor desul atomics to support compiling CUDA with NVC++ #5431 #5497 #5498\nSupport finding libquadmath with native compiler support #5286\nAdd architecture flags for MSVC #5673\nSIMD backend for ARM NEON #5829\n\n\n\n\n\nLet CMake determine OpenMP flags. #4105\nUpdate minimum compiler versions. #5323\nMakefile and CMake support for C++23 #5283\nDo not add -cuda to the link line with NVHPC compiler when the CUDA backend is not actually enabled #5485\nOnly add -latomic in generated GNU makefiles when OpenMPTarget backend is enabled #5501 #5537 (3.7 patch release candidate)\nKokkos_ENABLE_CUDA_LAMBDA now ON by default with NVCC #5580\nFix enabling of relocatable device code when using CUDA as CMake language #5564\nFix cmake configuration with CUDA 12 #5691\n\n\n\n\n\nRequire C++17 #5277\nTurn setting Kokkos_CXX_STANDARD into an error #5293\nRemove all deprecations in Kokkos 3 #5297\nRemove KOKKOS_COMPILER_CUDA_VERSION #5430\nDrop reciprocal_overflow_threshold numeric trait #5326\nMove reduction_identity out of &lt;Kokkos_NumericTraits.hpp&gt; into a new &lt;Kokkos_ReductionIdentity.hpp&gt; header #5450\nReduction and scan routines will report an error if the join() operator they would use takes volatile-qualified parameters #5409\nENABLE_CUDA_UVM is dropped in favor of using SharedSpace as MemorySpace explicitly #5608\nRemove Kokkos_ENABLE_CUDA_LDG_INTRINSIC option #5623\nDon’t rely on synchronization behavior of default stream in CUDA and HIP - this potentially will break unintended implicit synchronization with other libraries such as MPI #5391\nMake ExecutionSpace::concurrency() a non-static member function #5655 and related PRs\nRemove code guarded by KOKKOS_ENABLE_DEPRECATED_CODE_3\n\n\n\n\n\nDeprecate CudaUVMSpace::available() which always returned true #5614\nDeprecate volatile-qualified members from Kokkos::pair and Kokkos::complex #5412\nDeprecate KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_* macros #5824 (oversight in 3.6)\n\n\n\n\n\nAvoid allocating memory for UniqueToken #5300\nFix pragma ivdep in Kokkos_OpenMP_Parallel.hpp #5356\nFix configuring with Threads support when rerunning CMake #5486\nFix View assignment between LayoutLeft and LayoutRight with static extents #5535 (3.7 patch release candidate)\nAdd fence() calls to sorting routine overloads that don’t take an execution space parameter #5389\nClockTic changed to 64 bit to fix overflow on Power #5577 (incl. in 3.7.01 patch release)\nFix incorrect offset in CUDA and HIP parallel_scan for &lt; 4 byte types #5555 (3.7 patch release candidate)\nFix incorrect alignment behavior of scratch allocations in some corner cases (e.g. very small allocations) #5687 (3.7 patch release candidate)\nAdd missing ReductionIdentity&lt;char&gt; specialization #5798\nDon’t install standard algorithms headers multiple times #5670\nFix max scratch size calculation for level 0 scratch in CUDA and HIP #5718"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-7",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-7",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\n\n\n\n\n\nAdd Hopper support and update nvcc_wrapper to work with CUDA-12 #5693 ### General Enhancements:\nsprintf -&gt; snprintf #5787 ### Build System:\nAdd error message when not using hipcc and when CMAKE_CXX_STANDARD is not set #5945 ### Bug Fixes:\nFix Scratch allocation alignment issues #5692\nFix Intel Classic Compiler ICE #5710\nDon’t install std algorithm headers multiple times #5711\nFix static init order issue in InitalizationSettings #5721\nFix src/dst Properties in deep_copy(DynamicView,View) #5732\nFix build on Fedora Rawhide #5782\nFinalize HIP lock arrays #5694\nFix CUDA lock arrays for current Desul #5812\nSet the correct device/context in InterOp tests #5701"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-8",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-8",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\n\n\n\nAdd fences to all sorting routines not taking an execution space instance argument #5547\nFix repeated team_reduce without barrier #5552\nFix memory spaces in create_mirror_view overloads using view_alloc #5521\nAllow as_view_of_rank_n() to be overloaded for “special” scalar types #5553\nFix warning calling a __host__ function from a __host__ __device__ from View:: as_view_of_rank_n #5591\nOpenMPTarget: adding implementation to set device id. #5557\nUse Kokkos::atomic_load to Correct Race Condition Giving Rise to Seg Faulting Error in OpenMP tests #5559\ncmake: define KOKKOS_ARCH_A64FX #5561\nOnly link against libatomic in gnu-make OpenMPTarget build #5565\nFix static extents assignment for LayoutLeft/LayoutRight assignment #5566\nDo not add -cuda to the link line with NVHPC compiler when the CUDA backend is not actually enabled #5569\nExport the flags in KOKKOS_AMDGPU_OPTIONS when using Trilinos #5571\nAdd support for detecting MPI local rank with MPICH and PMI #5570 #5582\nRemove listing of undefined TPL dependencies #5573\nClockTic changed to 64 bit to fix overflow on Power #5592\nFix incorrect offset in CUDA and HIP parallel scan for &lt; 4 byte types #5607\nFix initialization of Cuda lock arrays #5622"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-9",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-9",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\n\n\n\nUse non-volatile join() member functions and operator+= in parallel_reduce/scan #4931 #4954 #4951\nAdd SIMD sub package (requires C++17) #5016\nAdd is_finalized() #5247\nPromote mathematical functions from namespace Kokkos::Experimental to namespace Kokkos #4791\nPromote min, max, clamp, minmax functions from namespace Kokkos::Experimental to namespace Kokkos #5170\nAdd round, logb, nextafter, copysign, and signbit math functions #4768\nAdd HIPManagedSpace, similar to CudaUVMSpace #5112\nAccept view construction allocation properties in create_mirror[_view,_view_and_copy] and resize/realloc #5125 #5095 #5035 #4805 #4844\nAllow MemorySpace::allocate() to be called with execution space #4826\nExperimental: Compile time view subscriber #4197\n\n\n\n\n\nAdd support for Sapphire Rapids Intel architecture #5015\nAdd support for ICX, SKL and ICL Intel architectures #5013 #4929\nAdd arch flags for Intel GPU Ponte Vecchio #4932\nSYCL: require GPU if GPU architecture was set at configuration time (i.e. do not allow fallback to CPU device) #5264 #5222\nSYCL: Add SYCL::sycl_queue() for interoperability #5241\nSYCL: Loosen restriction for using built-in sycl::group_broadcast #4552\nSYCL: preserve address space #4396\nOpenMPTarget: Adding a workaound for team scan #5219\nOpenMPTarget: Adding logic to skip the kernel launch if league_size=0 #5067\nOpenMPTarget: Make sure Kokkos::abort() causes abnormal program termination when called on the host-side #4808\nHIP: Make HIPHostPinnedSpace coarse-grained #5152\nRefactor OpenMP parallel_for implementation to use more native OpenMP constructs #4664\nAdd option to optimize for local CPU architecture Kokkos_ARCH_NATIVE #4930\n\n\n\n\n\nAdd command line argument/environment variable to print the configuration #5233\nImprove error message in view memory access violations #4950\nRemove unnecessary fences in View initialization #4823\nMake View::shmem_size() device-callable #4936\nUpdate numerics support for __float128 #5081\nAdd log10 overload for Kokkos::complex #5009\nAdd [[nodiscard]] to ScopeGuard #5224\nAdd structured binding support for Kokkos::Array #4962\nEnable accessing Kokkos::Array elements in constant expressions #4916\nMark as_view_of_rank_n as KOKKOS_FUNCTION #5248\nCleanup/rework fence overloads #5148\nAssert that Layout construction from extents is valid in functions taking integer extents #5209\nAdd fill_random overload that takes an execution space as first argument #5181\nAvoid some unnecessary fences in parallel_reduce/scan #5154\nInclude KOKKOS_ENABLE_LIBDL in options when printing configuration #5086\nDynRankView: make layout() return the same as a corresponding static View #5026\nUse _mm_malloc for icpx #5012\nAvoid forcing matching execution spaces in BinSort constructor and sort() #4919\nCheck number of bins in BinSort #4890\nImprove performance in parallel STL-like algorithms #4887 #4886\nDisable memset on A64FX and launch parallel_for instead (performance) #4884\nAllow non-power-of-two team sizes for team reductions and scans #4809\n\n\n\n\nWarn when unable to detect local MPI rank and user explicitly asked for it #5263\nRefactor parsing of command line arguments and environment variables #5221\nRefactor device selection at initialization #5211\nRename tools settings for consistency #5201\nPrint help only once #5128\nUpdate precedence rule in initialization #5130\nWarn instead of just ignoring user settings when kokkos-tools is disabled #5088\nDrop numa args in threads backend initialization #5127\nWarn users when a flag prefixed with -[-]kokkos is not recognized and do not remove it #5256\nGive back to Core what belongs to Core (aka moving tune_internals option from Tools back to Core) #5202\n\n\n\n\n\nnvcc_wrapper: filter out -pedantic-errors from nvcc options #5235\nnvcc_wrapper: add known nvcc option –source-in-ptx #5052\nLink libdl as interface library #5179\nOnly show GPU architectures with enabled corresponding backend #5119\nEnable optional external desul build #5021 #5132\nExport Kokkos_CXX_STANDARD variable with CMake #5068\nSuppress warnings with nvc++ #5031\nDisallow multiple host architectures in CMake #4996\nDo not include compiler warning flags in the compile option of the cmake target #4989\nAOT flags for OpenMPTarget targeting Intel GPUs #4915\nRepurpose Kokkos_ARCH_INTEL_GEN for SYCL to mean JIT to be conforming with OMPT #4894\nReplace amdgpu-target with offload-arch #4874\nDo not enable kokkos_launch_compiler when CMAKE_CXX_COMPILER_LAUNCHER is set #4870\nMove CMake version check up #4797\n\n\n\n\n\n\nRemove KOKKOS_THREAD_LOCAL #5064\nRemove KOKKOS_ENABLE_POSIX_MEMALIGN #5011\nRemove unused KOKKOS_ENABLE_TM #4995\nRemove unused cmakedefine KOKKOS_ENABLE_COMPILER_WARNINGS #4883\nRemove unused KOKKOS_ENABLE_DUALVIEW_MODIFY_CHECK #4882\nDrop Instruction Set Architecture (ISA) macros #4981\nWarn in ScopeGuard about illegal usage #5250\n\n\n\n\n\nGuard against non-public header inclusion #5178\nRaise deprecation warnings if non empty WorkTag class is used #5230\nDeprecate parallel_* overloads taking the label as trailing argument #5141\nDeprecate nested types in functional #5185\nDeprecate InitArguments struct and replace it with InitializationSettings #5135\nDeprecate finalize_all() #5134\nDeprecate command line arguments (other than --help) that are not prefixed with kokkos-* #5120\nDeprecate --[kokkos-]numa cmdline arg and KOKKOS_NUMA env var #5117\nDeprecate --[kokkos-]threads command line argument in favor of --[kokkos-]num-threads #5111\nDeprecate Kokkos::is_reducer_type #4957\nDeprecate OffsetView constructors taking index_list_type #4810\nDeprecate overloads of Kokkos::sort taking a parameter bool always_use_kokkos_sort #5382\nWarn about parallel_reduce cases that call join() with volatile-qualified arguments #5215\n\n\n\n\n\nCUDA Reductions: Fix data races reported by Nvidia compute-sanitizer #4855\nWork around Intel compiler bug #5301\nAvoid allocating memory for UniqueToken #5300\nDynamicView: Properly resize mirror instances after construction #5276\nRemove Kokkos::Rank limit of 6 ranks #5271\nDo not forget to set last element to nullptr when removing a flag in Kokkos::initialize #5272\nFix CUDA+MSVC build issue #5261\nFix DynamicView::resize_serial #5220\nFix cmake default compiler flags for unknown compiler #5217\nFix move_backward #5191\nFixing issue 5196 - missing symbol with intel compiler #5207\nPreserve KOKKOS_INVALID_INDEX in ViewDimension and ArrayLayout construction #5188\nFinalize deep_copy_space early avoiding printing to std::cerr for Cuda #5151\nUse correct policy in Threads MDRange parallel_reduce #5123\nFix building with NVCC as the CXX compiler while the CUDA backend is not enabled #5115\nOpenMPTarget Index range fix for MDRange. #5089\nFix bug with CUDA’s team reduction for empty ranges #5079\nFix using ZeroMemset for Serial #5077\nFix Kokkos::Vector::push_back for default execution space #5047\nScatterView: Fix ScatterMin/ScatterMax to use proper atomics #5045\nFix calling ZeroMemset in deep_copy #5040\nMake View self-assignment not produce double-free #5024\nGuard against unrecognized pragma with intel compilers #5019\nFix racing condition in HIPParallelLaunch #5008\nKokkosP: Fix device_id in profiling #4997\nFix for Kokkos::vector::insert into empty vector with begin and end iterators #4988\nFix Core header files installation #4984\nFix bounds errors with Kokkos::sort #4980\nFixup let RangePolicy::set_chunk_size return a reference to self #4918\nFix allocating large Views #4907\nFix combined reductions with Kokkos::View #4896\nFixed _CUDA_ARCH__ to __CUDA_ARCH__ for CUDA LDG #4893\nFixup View::access() truncate parameter pack #4876\nFix abort with HIP backend for ROCm 5.0.2 and beyond #4873\nFix HIP version when printing the configuration #4872\nFix scratch lock array when using scratch level 1 #4871\nFix Makefile.kokkos to work with fujitsu compiler #4867\ncmake: Correct link THREADS link option #4854\nUniqueToken impl_acquire function should be device only #4819\nFix example calls to non existing static print_configuration #4806\nFix requests for large team scratch sizes #4728"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-10",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-10",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\n\n\n\nFix Threads: Fix serial resizing scratch space (3.6.01 cherry-pick) #5109\nFix ScatterMin/ScatterMax to use proper atomics (3.6.01 cherry-pick) #5046\nFix allocating large Views #4907\nFix bounds errors with Kokkos::sort #4980\nFix HIP version when printing the configuration #4872\nFixed _CUDA_ARCH__ to __CUDA_ARCH__ for CUDA LDG #4893\nFixed an incorrect struct initialization #5028\nFix racing condition in HIPParallelLaunch #5008\nAvoid deprecation warnings with OpenMPExec::validate_partition #4982\nMake View self-assignment not produce double-free #5024"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-11",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-11",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\n\n\n\nAdd C++ standard algorithms #4315\nImplement fill_random for DynRankView #4763\nAdd bhalf_t #4543 #4653\nAdd mathematical constants #4519\nAllow Kokkos::{create_mirror*,resize,realloc} to be used with WithoutInitializing #4486 #4337\nImplement KOKKOS_IF_ON_{HOST,DEVICE} macros #4660\nAllow setting the CMake language for Kokkos #4323\n\n\n\n\nDesul: Add ScopeCaller #4690\nEnable Desul atomics by default when using Makefiles #4606\nUnique token improvement #4741 #4748\n\n\n\n\n\nAdd math function long double overload on the host side #4712\n\n\n\n\n\n\nArray reductions with pointer return types #4756\nDeprecate partition_master, validate_partition #4737\nDeprecate Kokkos_ENABLE_PTHREAD in favor of Kokkos_ENABLE_THREADS #4619 ** pair with use std::threads **\nDeprecate log2(unsigned) -&gt; int (removing in next release) #4595\nDeprecate Kokkos::Impl::is_view #4592\nDeprecate KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_* macros and the ActiveExecutionMemorySpace alias #4668\n\n\n\n\n\n\n\nUpdate required SYCL compiler version #4749\nCap vector size to kernel maximum for SYCL #4704\nImprove check for compatibility of vector size and subgroup size in SYCL #4579\nProvide chunk_size for SYCL #4635\nUse host-pinned memory for SYCL kernel memory #4627\nUse shuffle-based algorithm for scalar reduction #4608\nImplement pool of USM IndirectKernelMemory #4596\nProvide valid default team size for SYCL #4481\n\n\n\n\n\nAdd checks for shmem usage in parallel_reduce #4548\n\n\n\n\n\nAdd support for fp16 in the HIP backend #4688\nDisable multiple kernel instantiations when using HIP (configure with -DKokkos_ENABLE_HIP_MULTIPLE_KERNEL_INSTANTIATIONS=ON to use) #4644\nFix HIP scratch use per instance #4439\nChange allocation header to 256B alignment for AMD VEGA architecture #4753\nAdd generic KOKKOS_ARCH_VEGA macro #4782\nRequire ROCm 4.5 #4689\n\n\n\n\n\n\nAdapt to HPX 1.7.0 which is now required #4241\n\n\n\n\nFix thread deduction for OpenMP for thread_count==0 #4541\n\n\n\n\n\nUpdate memory space size_type to improve performance (size_t -&gt; unsigned) #4779\n\n\n\n\n\nImprove NVHPC support #4599\nAdd Kokkos::Experimental::{min,max,minmax,clamp} #4629 #4506\nUse device type as template argument in Containers and Algorithms #4724 #4675\nImplement Kokkos::sort with execution space #4490\nKokkos::resize always error out for mismatch in runtime rank #4681\nPrint current call stack when calling Kokkos::abort() from the host #4672 #4671\nDetect mismatch of execution spaces in functors #4655\nImprove view label access on host #4647\nError out for const scalar return type in reduction #4645\nDon’t allow calling UnorderdMap::value_at for a set #4639\nAdd KOKKOS_COMPILER_NVHPC macro, disable quiet_NaN and signaling_NaN #4586\nImprove performance of local_deep_copy #4511\nImprove performance when sorting integers #4464\nAdd missing numeric traits (denorm_min, reciprocal_overflow_threshold, {quiet,silent}_NaN}) and make them work on cv-qualified types #4466 #4415 #4473 #4443\n\n\n\n\n\n\nManually compute IntelLLVM compiler version for older CMake versions #4760\nAdd Xptxas without = to nvcc_wrapper #4646\nUse external GoogleTest optionally #4563\nSilent warnings about multiple optimization flags with nvcc_wrapper #4502\nUse the same flags in Makefile.kokkos for POWER7/8/9 as for CMake #4483\nFix support for A64FX architecture #4745\n\n\n\n\n\nDrop KOKKOS_ARCH_HIP macro when using generated GNU makefiles #4786\nRemove gcc-toolchain auto add for clang in Makefile.kokkos #4762\n\n\n\n\n\nLock constant memory in Cuda/HIP kernel launch with a mutex (thread safety) #4525\nFix overflow for large requested scratch allocation #4551\nFix Windows build in mingw #4564\nFix kokkos_launch_compiler: escape $ character #4769 #4703\nFix math functions with NVCC and GCC 5 as host compiler #4733\nFix shared build with Intel19 #4725\nDo not install empty desul/src/ directory #4714\nFix wrong device_id computation in identifier_from_devid (Profiling Interface) #4694\nFix a bug in CUDA scratch memory pool (abnormally high memory consumption) #4673\nRemove eval of command args in hpcbind #4630\nSYCL fix to run when no GPU is detected #4623\nFix layout_strides::span for rank-0 views #4605\nFix SYCL atomics for local memory #4585\nHotfix mdrange_large_deep_copy for SYCL #4581\nFix bug when sorting integer using the HIP backend #4570\nFix compilation error when using HIP with RDC #4553\nDynamicView: Fix deallocation extent #4533\nSYCL fix running parallel_reduce with TeamPolicy for large ranges #4532\nFix bash syntax error in nvcc_wrapper #4524\nOpenMPTarget team_policy reduce fixes for init/join reductions #4521\nAvoid hangs in the Threads backend #4499\nOpenMPTarget fix reduction bug in parallel_reduce for TeamPolicy #4491\nHIP fix scratch space per instance #4439\nOpenMPTarget fix team scratch allocation #4431"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-12",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-12",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\n\n\n\nAdd support for quad-precision math functions/traits #4098\nAdding ExecutionSpace partitioning function #4096\nImprove Python Interop Capabilities #4065\nAdd half_t Kokkos::rand specialization #3922\nAdd math special functions: erf, erfcx, expint1, Bessel functions, Hankel functions #3920\nAdd missing common mathematical functions #4043 #4036 #4034\nLet the numeric traits be SFINAE-friendly #4038\nAdd Desul atomics - enabling memory-order and memory-scope parameters #3247\nAdd detection idiom from the C++ standard library extension version 2 #3980\nFence Profiling Support in all backends #3966 #4304 #4258 #4232\nSignificant SYCL enhancements (see below)\n\n\n\n\n\nDeprecate CUDA_SAFE_CALL and HIP_SAFE_CALL #4249\nDeprecate Kokkos::Impl::Timer (Kokkos::Timer has been available for a long time) #4201\nDeprecate Experimental::MasterLock #4094\nDeprecate Kokkos_TaskPolicy.hpp (headers got reorganized, doesn’t remove functionality) #4011\nDeprecate backward compatibility features #3978\nUpdate and deprecate is_space::host_memory/execution/mirror_space #3973\n\n\n\n\n\nEnabling constbitset constructors in kernels #4296\nUse ZeroMemset in View constructor to improve performance #4226\nUse memset in deep_copy #3944\nAdd missing fence() calls in resize(View) that effectively do deep_copy(resized, orig) #4212\nAvoid allocations in resize and realloc #4207\nStaticCsrGraph: use device type instead of execution space to construct views #3991\nConsider std::sort when view is accessible from host #3929\nFix CPP20 warnings except for volatile #4312\n\n\n\n\nIntroduce SYCLHostUSMSpace #4268\nImplement SYCL TeamPolicy for vector_size &gt; 1 #4183\nEnable 64bit ranges for SYCL #4211\nDon’t print SYCL device info in execution space intialization #4168\nImprove SYCL MDRangePolicy performance #4161\nUse sub_groups in SYCL parallel_scan #4147\nImplement subgroup reduction for SYCL RangePolicy parallel_reduce #3940\nUse DPC++ broadcast extension in SYCL team_broadcast #4103\nOnly fence in SYCL parallel_reduce for non-device-accessible result_ptr #4089\nImprove fencing behavior in SYCL backend #4088\nFence all registered SYCL queues before deallocating memory #4086\nImplement SYCL::print_configuration #3992\nReuse scratch memory in parallel_scan and TeamPolicy (decreases memory footprint) #3899 #3889\n\n\n\n\n\nCuda improve heuristic for blocksize #4271\nDon’t use [[deprecated]] for nvcc #4229\nImprove error message for NVHPC as host compiler #4227\nUpdate support for cuda reductions to work with types &lt; 4bytes #4156\nFix incompatible team size deduction in rare cases parallel_reduce #4142\nRemove UVM usage in DynamicView #4129\nRemove dependency between core and containers #4114\nAdding opt-in CudaMallocSync support when using CUDA version &gt;= 11.2 #4026 #4233\nFix a potential race condition in the CUDA backend #3999\n\n\n\n\n\nImplement new blocksize deduction method for HIP Backend #3953\nAdd multiple LaunchMechanism #3820\nMake HIP backend thread-safe #4170\n\n\n\n\n\nRefactor Serial backend and fix thread-safety issue #4053\n\n\n\n\n\nOpenMPTarget: support array reductions in RangePolicy #4040\nOpenMPTarget: add MDRange parallel_reduce #4032\nOpenMPTarget: Fix bug in for the case of a reducer. #4044\nOpenMPTarget: verify process fix #4041\n\n\n\n\n\n\n\n\nUse hipcc architecture autodetection when Kokkos_ARCH is not set #3941\nIntroduce Kokkos_ENABLE_DEPRECATION_WARNINGS and remove deprecated code with Kokkos_ENABLE_DEPRECATED_CODE_3 #4106 #3855\n\n\n\n\n\nAdd allow-unsupported-compiler flag to nvcc-wrapper #4298\nnvcc_wrapper: fix errors in argument handling #3993\nAdds support for -time= and -time  in nvcc_wrapper #4015\nnvcc_wrapper: suppress duplicates of GPU architecture and RDC flags #3968\nFix TMPDIR support in nvcc_wrapper #3792\nNVHPC: update PGI compiler arch flags #4133\nReplace PGI with NVHPC (works for both) #4196\nMake sure that KOKKOS_CXX_HOST_COMPILER_ID is defined #4235\nAdd options to Makefile builds for deprecated code and warnings #4215\nUse KOKKOS_CXX_HOST_COMPILER_ID for identifying CPU arch flags #4199\nAdded support for Cray Clang to Makefile.kokkos #4176\nAdd XLClang as compiler #4120\nKeep quoted compiler flags when passing to Trilinos #3987\nAdd support for AMD Zen3 CPU architecture #3972\nRename IntelClang to IntelLLVM #3945\nAdd cppcoreguidelines-pro-type-cstyle-cast to clang-tidy #3522\nAdd sve bit size definition for A64FX #3947 #3946\nRemove KOKKOS_ENABLE_DEBUG_PRINT_KERNEL_NAMES #4150\n\n\n\n\n\n\n\n\nRetrieve original value from a point in a MultidimensionalSparseTuningProblem #3977\nAllow extension of built-in tuners with additional tuning axes #3961\nAdded a categorical tuner #3955\n\n\n\n\n\nhpcbind: Use double quotes around $@ when invoking user command #4284\nAdd file and line to error message #3985\nFix compiler warnings when compiling with nvc++ #4198\nAdd OpenMPTarget CI build on AMD GPUs #4055\nCI: icpx is now part of intel container #4002\n\n\n\n\n\n\nRemove pre CUDA 9 KOKKOS_IMPL_CUDA_* macros #4138\n\n\n\n\n\nUnorderedMap::clear() should zero the size() #4130\nAdd memory fence for HostSharedPtr::cleanup() #4144\nSYCL: Fix race conditions in TeamPolicy::parallel_reduce #4418\nAdding missing memory fence to serial exec space fence. #4292\nFix using external SYCL queues in tests #4291\nFix digits10 bug #4281\nFixes constexpr errors with frounding-math on gcc &lt; 10. #4278\nFix compiler flags for PGI/NVHPC #4264\nFix Zen2/3 also implying Zen Arch with Makefiles #4260\nKokkos_Cuda.hpp: Fix shadow warning with cuda/11.0 #4252\nFix issue w/ static initialization of function attributes #4242\nDisable long double hypot test on Power systems #4221\nFix false sharing in random pool #4218\nFix a missing memory_fence for debug shared alloc code #4216\nFix two xl issues #4179\nMakefile.kokkos: fix (standard_in) 1: syntax error #4173\nFixes for query_device example #4172\nFix a bug when using HIP atomic with Kokkos::Complex #4159\nFix mistaken logic in pthread creation #4157\nDefine KOKKOS_ENABLE_AGGRESSIVE_VECTORIZATION when requesting Kokkos_ENABLE_AGGRESSIVE_VECTORIZATION=ON #4107\nFix compilation with latest MSVC version #4102\nFix incorrect macro definitions when compiling with Intel compiler on Windows #4087\nFixup global buffer overflow in hand rolled string manipulation #4070\nFixup heap buffer overflow in cmd line args parsing unit tests #4069\nOnly add quotes in compiler flags for Trilinos if necessary #4067\nFixed invocation of tools init callbacks #4061\nWork around SYCL JIT compiler issues with static variables #4013\nFix TestDetectionIdiom.cpp test inclusion for Trilinos/TriBITS #4010\nFixup allocation headers with OpenMPTarget backend #4003\nAdd missing specialization for OMPT to Kokkos Random #3967\nDisable hypot long double test on power arches #3962\nUse different EBO workaround for MSVC (rebased) #3924\nFix SYCL Kokkos::Profiling::(de)allocateData calls #3928"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-13",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-13",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\nBug Fixes: - Windows: Remove atomic_compare_exchange_strong overload conflicts with Windows #4024 - OpenMPTarget: Fixup allocation headers with OpenMPTarget backend #4020 - OpenMPTarget: Add missing specailization for OMPT to Kokkos Random #4022 - AMD: Add support for AMD Zen3 CPU architecture #4021 - SYCL: Implement SYCL::print_configuration #4012 - Containers: staticcsrgraph: use device type instead of execution space to construct views #3998 - nvcc_wrapper: fix errors in argument handling, suppress duplicates of GPU architecture and RDC flags #4006 - CI: Add icpx testing to intel container #4004 - CMake/TRIBITS: Keep quoted compiler flags when passing to Trilinos #4007 - CMake: Rename IntelClang to IntelLLVM #3945"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-14",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-14",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\nHighlights: - SYCL Backend Almost Feature Complete - OpenMPTarget Backend Almost Feature Complete - Performance Improvements for HIP backend - Require CMake 3.16 or newer - Tool Callback Interface Enhancements - cmath wrapper functions available now in Kokkos::Experimental\nFeatures: - Implement parallel_scan with ThreadVectorRange and Reducer #3861 - Implement SYCL Random #3849 - OpenMPTarget: Adding Implementation for nested reducers #3845 - Implement UniqueToken for SYCL #3833 - OpenMPTarget: UniqueToken::Global implementation #3823 - DualView sync’s on ExecutionSpaces #3822 - SYCL outer TeamPolicy parallel_reduce #3818 - SYCL TeamPolicy::team_scan #3815 - SYCL MDRangePolicy parallel_reduce #3801 - Enable use of execution space instances in ScatterView #3786 - SYCL TeamPolicy nested parallel_reduce #3783 - OpenMPTarget: MDRange with TagType for parallel_for #3781 - Adding OpenMPTarget parallel_scan #3655 - SYCL basic TeamPolicy #3654 - OpenMPTarget: scratch memory implementation #3611\nImplemented enhancements Backends and Archs: - SYCL choose a specific GPU #3918 - [HIP] Lock access to scratch memory when using Teams #3916 - [HIP] fix multithreaded access to get_next_driver #3908 - Forward declare HIPHostPinnedSpace and SYCLSharedUSMSpace #3902 - Let SYCL USMObjectMem use SharedAllocationRecord #3898 - Implement clock_tic for SYCL #3893 - Don’t use a static variable in HIPInternal::scratch_space #3866(https://github.com/kokkos/kokkos/pull/3866) - Reuse memory for SYCL parallel_reduce #3873 - Update SYCL compiler in CI #3826 - Introduce HostSharedPtr to manage m_space_instance for Cuda/HIP/SYCL #3824 - [HIP] Use shuffle for range reduction #3811 - OpenMPTarget: Changes to the hierarchical parallelism #3808 - Remove ExtendedReferenceWrapper for SYCL parallel_reduce #3802 - Eliminate sycl_indirect_launch #3777 - OpenMPTarget: scratch implementation for parallel_reduce #3776 - Allow initializing SYCL execution space from sycl::queue and SYCL::impl_static_fence #3767 - SYCL TeamPolicy scratch memory alternative #3763 - Alternative implementation for SYCL TeamPolicy #3759 - Unify handling of synchronous errors in SYCL #3754 - core/Cuda: Half_t updates for cgsolve #3746 - Unify HIPParallelLaunch structures #3733 - Improve performance for SYCL parallel_reduce #3732 - Use consistent types in Kokkos_OpenMPTarget_Parallel.hpp #3703 - Implement non-blocking kernel launches for HIP backend #3697 - Change SYCLInternal::m_queue std::unique_ptr -&gt; std::optional #3677 - Use alternative SYCL parallel_reduce implementation #3671 - Use runtime values in KokkosExp_MDRangePolicy.hpp #3626 - Clean up AnalyzePolicy #3564 - Changes for indirect launch of SYCL parallel reduce #3511\nImplemented enhancements BuildSystem: - Also require C++14 when building gtest #3912 - Fix compiling SYCL with OpenMP #3874 - Require C++17 for SYCL (at configuration time) #3869 - Add COMPILE_DEFINITIONS argument to kokkos_create_imported_tpl #3862 - Do not pass arch flags to the linker with no rdc #3846 - Try compiling C++14 check with C++14 support and print error message #3843 - Enable HIP with Cray Clang #3842 - Add an option to disable header self containment tests #3834 - CMake check for C++14 #3809 - Prefer -std=* over –std=* #3779 - Kokkos launch compiler updates #3778 - Updated comments and enabled no-op for kokkos_launch_compiler #3774 - Apple’s Clang not correctly recognised #3772 - kokkos_launch_compiler + CUDA auto-detect arch #3770 - Add Spack test support for Kokkos #3753 - Split SYCL tests for aot compilation #3741 - Use consistent OpenMP flag for IntelClang #3735 - Add support for -Wno-deprecated-gpu-targets #3722 - Add configuration to target CUDA compute capability 8.6 #3713 - Added VERSION and SOVERSION to KOKKOS_INTERNAL_ADD_LIBRARY #3706 - Add fast-math to known NVCC flags #3699 - Add MI-100 arch string #3698 - Require CMake &gt;=3.16 #3679 - KokkosCI.cmake, KokkosCTest.cmake.in, CTestConfig.cmake.in + CI updates #2844\nImplemented enhancements Tools: - Improve readability of the callback invocation in profiling #3860 - V1.1 Tools Interface: incremental, action-based #3812 - Enable launch latency simulations #3721 - Added metadata callback to tools interface #3711 - MDRange Tile Size Tuning #3688 - Added support for command-line args for kokkos-tools #3627 - Query max tile sizes for an MDRangePolicy, and set tile sizes on an existing policy #3481\nImplemented enhancements Other: - Try detecting ndevices in get_gpu #3921 - Use strcmp to compare names() #3909 - Add execution space arguments for constructor overloads that might allocate a new underlying View #3904 - Prefix labels in internal use of kokkos_malloc #3891 - Prefix labels for internal uses of SharedAllocationRecord #3890 - Add missing hypot math function #3880 - Unify algorithm unit tests to avoid code duplication #3851 - DualView.template view() better matches for Devices in UVMSpace cases #3857 - More extensive disentangling of Policy Traits #3829 - Replaced nanosleep and sched_yield with STL routines #3825 - Constructing Atomic Subviews #3810 - Metadata Declaration in Core #3729 - Allow using tagged final functor in parallel_reduce #3714 - Major duplicate code removal in SharedAllocationRecord specializations #3658\nFixed bugs: - Provide forward declarations in Kokkos_ViewLayoutTiled.hpp for XL #3911 - Fixup absolute value of floating points in Kokkos complex #3882 - Address intel 17 ICE #3881 - Add missing pow(Kokkos::complex) overloads #3868 - Fix bug {pow, log}(Kokkos::complex) #3866(https://github.com/kokkos/kokkos/pull/3866) - Cleanup writing to output streams in Cuda #3859 - Fixup cache CUDA fallback execution space instance used by DualView::sync #3856 - Fix cmake warning with pthread #3854 - Fix typo FOUND_CUDA_{DRIVVER -&gt; DRIVER} #3852 - Fix bug in SYCL team_reduce #3848 - Atrocious bug in MDRange tuning #3803 - Fix compiling SYCL with Kokkos_ENABLE_TUNING=ON #3800 - Fixed command line parsing bug #3797 - Workaround race condition in SYCL parallel_reduce #3782 - Fix Atomic{Min,Max} for Kepler30 #3780 - Fix SYCL typo #3755 - Fixed Kokkos_install_additional_files macro #3752 - Fix a typo for Kokkos_ARCH_A64FX #3751 - OpenMPTarget: fixes and workarounds to work with “Release” build type #3748 - Fix parsing bug for number of devices command line argument #3724 - Avoid more warnings with clang and C++20 #3719 - Fix gcc-10.1 C++20 warnings #3718 - Fix cuda cache config not being set correct #3712 - Fix dualview deepcopy perftools #3701 - use drand instead of frand in drand #3696\nIncompatibilities: - Remove unimplemented member functions of SYCLDevice #3919 - Replace cl::sycl #3896 - Get rid of SYCL workaround in Kokkos_Complex.hpp #3884 - Replace most uses of if_c #3883 - Remove Impl::enable_if_type #3863 - Remove HostBarrier test #3847 - Avoid (void) interface #3836 - Remove VerifyExecutionCanAccessMemorySpace #3813 - Avoid duplicated code in ScratchMemorySpace #3793 - Remove superfluous FunctorFinal specialization #3788 - Rename cl::sycl -&gt; sycl in Kokkos_MathematicalFunctions.hpp #3678 - Remove integer_sequence backward compatibility implementation #3533\nEnabled tests: - Fixup re-enable core performance tests #3903 - Enable more SYCL tests #3900 - Restrict MDRange Policy tests for Intel GPUs #3853 - Disable death tests for rawhide #3844 - OpenMPTarget: Block unit tests that do not pass with the nvidia compiler #3839 - Enable Bitset container test for SYCL #3830 - Enable some more SYCL tests #3744 - Enable SYCL atomic tests #3742 - Enable more SYCL perf_tests #3692 - Enable examples for SYCL #3691"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-15",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-15",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\nBug Fixes: - Fix severe performance bug in DualView which added memcpys for sync and modify #3693 - Fix performance bug in CUDA backend, where the cuda Cache config was not set correct."
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-16",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-16",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\nFeatures: - Require C++14 as minimum C++ standard. C++17 and C++20 are supported too. - HIP backend is nearly feature complete. Kokkos Dynamic Task Graphs are missing. - Major update for OpenMPTarget: many capabilities now work. For details contact us. - Added DPC++/SYCL backend: primary capabilites are working. - Added Kokkos Graph API analogous to CUDA Graphs. - Added parallel_scan support with TeamThreadRange #3536 - Added Logical Memory Spaces #3546 - Added initial half precision support #3439 - Experimental feature: control cuda occupancy #3379\nImplemented enhancements Backends and Archs: - Add a64fx and fujitsu Compiler support #3614 - Adding support for AMD gfx908 archictecture #3375 - SYCL parallel_for MDRangePolicy #3583 - SYCL add parallel_scan #3577 - SYCL custom reductions #3544 - SYCL Enable container unit tests #3550 - SYCL feature level 5 #3480 - SYCL Feature level 4 (parallel_for) #3474 - SYCL feature level 3 #3451 - SYCL feature level 2 #3447 - OpenMPTarget: Hierarchial reduction for + operator on scalars #3504 - OpenMPTarget hierarchical #3411 - HIP Add Impl::atomic_[store,load] #3440 - HIP enable global lock arrays #3418 - HIP Implement multiple occupancy paths for various HIP kernel launchers #3366\nImplemented enhancements Policies: - MDRangePolicy: Let it be semiregular #3494 - MDRangePolicy: Check narrowing conversion in construction #3527 - MDRangePolicy: CombinedReducers support #3395 - Kokkos Graph: Interface and Default Implementation #3362 - Kokkos Graph: add Cuda Graph implementation #3369 - TeamPolicy: implemented autotuning of team sizes and vector lengths #3206 - RangePolicy: Initialize all data members in default constructor #3509\nImplemented enhancements BuildSystem: - Auto-generate core test files for all backends #3488 - Avoid rewriting test files when calling cmake #3548 - RULE_LAUNCH_COMPILE and RULE_LAUNCH_LINK system for nvcc_wrapper #3136 - Adding -include as a known argument to nvcc_wrapper #3434 - Install hpcbind script #3402 - cmake/kokkos_tribits.cmake: add parsing for args #3457\nImplemented enhancements Tools: - Changed namespacing of Kokkos::Tools::Impl::Impl::tune_policy #3455 - Delegate to an impl allocate/deallocate method to allow specifying a SpaceHandle for MemorySpaces #3530 - Use the Kokkos Profiling interface rather than the Impl interface #3518 - Runtime option for tuning #3459 - Dual View Tool Events #3326\nImplemented enhancements Other: - Abort on errors instead of just printing #3528 - Enable C++14 macros unconditionally #3449 - Make ViewMapping trivially copyable #3436 - Rename struct ViewMapping to class #3435 - Replace enums in Kokkos_ViewMapping.hpp (removes -Wextra) #3422 - Use bool for enums representing bools #3416 - Fence active instead of default execution space instances #3388 - Refactor parallel_reduce fence usage #3359 - Moved Space EBO helpers to Kokkos_EBO #3357 - Add remove_cvref type trait #3340 - Adding identity type traits and update definition of identity_t alias #3339 - Add is_specialization_of type trait #3338 - Make ScratchMemorySpace semi-regular #3309 - Optimize min/max atomics with early exit on no-op case #3265 - Refactor Backend Development #2941\nFixed bugs: - Fixup MDRangePolicy construction from Kokkos arrays #3591 - Add atomic functions for unsigned long long using gcc built-in #3588 - Fixup silent pointless comparison with zero in checked_narrow_cast (compiler workaround) #3566 - Fixes for ROCm 3.9 #3565 - Fix windows build issues which crept in for the CUDA build #3532 - HIP Fix atomics of large data types and clean up lock arrays #3529 - Pthreads fix exception resulting from 0 grain size #3510 - Fixup do not require atomic operation to be default constructible #3503 - Fix race condition in HIP backend #3467 - Replace KOKKOS_DEBUG with KOKKOS_ENABLE_DEBUG #3458 - Fix multi-stream team scratch space definition for HIP #3398 - HIP fix template deduction #3393 - Fix compiling with HIP and C++17 #3390 - Fix sigFPE in HIP blocksize deduction #3378 - Type alias change: replace CS with CTS to avoid conflicts with NVSHMEM #3348 - Clang compilation of CUDA backend on Windows #3345 - Fix HBW support #3343 - Added missing fences to unique token #3260\nIncompatibilities: - Remove unused utilities (forward, move, and expand_variadic) from Kokkos::Impl #3535 - Remove unused traits #3534 - HIP: Remove old HCC code #3301 - Prepare for deprecation of ViewAllocateWithoutInitializing #3264 - Remove ROCm backend #3148"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-17",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-17",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\nFixed bugs: - Disallow KOKKOS_ENABLE_CUDA_RELOCATABLE_DEVICE_CODE in shared library builds #3332 - Do not install libprinter-tool when testing is enabled #3313 - Fix restrict/alignment following refactor #3373 - Intel fix: workaround compiler issue with using statement #3383 - Fix zero-length reductions #\\3364 - Pthread zero-length reduction fix #3452 - HPX zero-length reduction fix #3470 - cuda/9.2 zero-length reduction fix #3580 - Fix multi-stream scratch #\\3269 - Guard KOKKOS_ALL_COMPILE_OPTIONS if Cuda is not enabled #3387 - Do not include link flags for Fortran linkage #3384 - Fix NVIDIA GPU arch macro with autodetection #3473 - Fix libdl/test issues with Trilinos #3543 - Register Pthread as Tribits option to be enabled with Trilinos #3558\nImplemented enhancements: - Separate Cuda timing-based tests into their own executable #3407"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-18",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-18",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\nImplemented enhancements:\n\nHIP:Enable stream in HIP #3163\nHIP:Add support for shuffle reduction for the HIP backend #3154\nHIP:Add implementations of missing HIPHostPinnedSpace methods for LAMMPS #3137\nHIP:Require HIP 3.5.0 or higher #3099\nHIP:WorkGraphPolicy for HIP #3096\nOpenMPTarget: Significant update to the new experimental backend. Requires C++17, works on Intel GPUs, reference counting fixes. #3169\nWindows Cuda support #3018\nPass -Wext-lambda-captures-this to NVCC when support for __host__ __device__ lambda is enabled from CUDA 11 #3241\nUse explicit staging buffer for constant memory kernel launches and cleanup host/device synchronization #3234\nVarious fixup to policies including making TeamPolicy default constructible and making RangePolicy and TeamPolicy assignable: #3202 , #3203 , #3196\nAnnotations for DefaultExectutionSpace and DefaultHostExectutionSpace to use in static analysis #3189\nAdd documentation on using Spack to install Kokkos and developing packages that depend on Kokkos #3187\nAdd OpenMPTarget backend flags for NVC++ compiler #3185\nMove deep_copy/create_mirror_view on Experimental::OffsetView into Kokkos:: namespace #3166\nAllow for larger block size in HIP #3165\nView: Added names of Views to the different View initialize/free kernels #3159\nCuda: Caching cudaFunctorAttributes and whether L1/Shmem prefer was set #3151\nBuildSystem: Improved performance in default configuration by defaulting to Release build #3131\nCuda: Update CUDA occupancy calculation #3124\nVector: Adding data() to Vector #3123\nBuildSystem: Add CUDA Ampere configuration support #3122\nGeneral: Apply [[noreturn]] to Kokkos::abort when applicable #3106\nTeamPolicy: Validate storage level argument passed to TeamPolicy::set_scratch_size() #3098\nBuildSystem: Make kokkos_has_string() function in Makefile.kokkos case insensitive #3091\nModify KOKKOS_FUNCTION macro for clang-tidy analysis #3087\nMove allocation profiling to allocate/deallocate calls #3084\nBuildSystem: FATAL_ERROR when attempting in-source build #3082\nChange enums in ScatterView to types #3076\nHIP: Changes for new compiler/runtime #3067\nExtract and use get_gpu #3061 , #3048\nAdd is_allocated to View-like containers #3059\nCombined reducers for scalar references #3052\nAdd configurable capacity for UniqueToken #3051\nAdd installation testing #3034\nHIP: Add UniqueToken #3020\nAutodetect number of devices #3013\n\nFixed bugs:\n\nCheck error code from cudaStreamSynchronize in CUDA fences #3255\nFix issue with C++ standard flags when using nvcc\\_wrapper with PGI #3254\nAdd missing threadfence in lock-based atomics #3208\nFix dedup of linker flags for shared lib on CMake &lt;=3.12 #3176\nFix memory leak with CUDA streams #3170\nBuildSystem: Fix OpenMP Target flags for Cray #3161\nScatterView: fix for OpenmpTarget remove inheritance from reducers #3162\nBuildSystem: Set OpenMP flags according to host compiler #3127\nOpenMP: Fix logic for nested omp in partition_master bug #3101\nnvcc_wrapper: send –cudart to nvcc instead of host compiler #3092\nBuildSystem: Fixes for Cuda/11 and c++17 #3085\nHIP: Fix print_configuration #3080\nConditionally define get_gpu #3072\nFix bounds for ranges in random number generator #3069\nFix Cuda minor arch check #3035\nBuildSystem: Add -expt-relaxed-constexpr flag to nvcc_wrapper #3021\n\nIncompatibilities:\n\nRemove ETI support #3157\nRemove KOKKOS_INTERNAL_ENABLE_NON_CUDA_BACKEND #3147\nRemove core/unit_test/config #3146\nRemoved the preprocessor branch for KOKKOS_ENABLE_PROFILING #3115\nDisable profiling with MSVC #3066\n\nClosed issues:\n\nSilent error (Validate storage level arg to set_scratch_size) #3097\nRemove KOKKKOS_ENABLE_PROFILING Option #3095\nCuda 11 -&gt; allow C++17 #3083\nIn source build failure not explained #3081\nAllow naming of Views for initialization kernel #3070\nDefaultInit tests failing when using CTest resource allocation feature #3040\nAdd installation testing. #3037\nnvcc_wrapper needs to handle -expt-relaxed-constexpr flag #3017\nCPU core oversubscription warning on macOS with OpenMP backend #2996\nDefault behavior of KOKKOS_NUM_DEVICES to use all devices available #2975\nAssert blocksize &gt; 0 #2974\nAdd ability to assign kokkos profile function from executable #2973\nScatterView Support for the pre/post increment operator #2967\nCompiler issue: Cuda build with clang 10 has errors with the atomic unit tests #3237\nIncompatibility of flags for C++ standard with PGI v20.4 on Power9/NVIDIA V100 system #3252\nError configuring as subproject #3140\nCMake fails with Nvidia compilers when the GPU architecture option is not supplied (Fix configure with OMPT and Cuda) #3207\nPGI compiler being passed the gcc -fopenmp flag #3125\nCuda: Memory leak when using CUDA stream #3167\nRangePolicy has an implicitly deleted assignment operator #3192\nMemorySpace::allocate needs to have memory pool counting. #3064\nMissing write fence for lock based atomics on CUDA #3038\nCUDA compute capability version check problem #3026\nMake DynRankView fencing consistent #3014\nnvcc_wrapper cant handle -Xcompiler -o out.o #2993\nReductions of non-trivial types of size 4 fail in CUDA shfl operations #2990\ncomplex_double misalignment in reduce, clang+CUDA #2989\nSpan of degenerated (zero-length) subviews is not zero in some special cases #2979\nRank 1 custom layouts dont work as expected. #2840"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-19",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-19",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\nFixed bugs:\n\nFix complex_double misalignment in reduce, clang+CUDA #2989\nFix compilation fails when profiling disabled and CUDA enabled #3001\nFix cuda reduction of non-trivial scalars of size 4 #2990\nConfigure and install version file when building in Trilinos #2957\nFix OpenMPTarget build missing include and namespace #3000\nfix typo in KOKKOS_SET_EXE_PROPERTY() #2959\nFix non-zero span subviews of zero sized subviews #2979"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-20",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-20",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\nFeatures:\n\nHIP Support for AMD\nOpenMPTarget Support with clang\nWindows VS19 (Serial) Support #1533\n\nImplemented enhancements:\n\ngenerate_makefile.bash should allow tests to be disabled #2886\nclang/7+cuda/9 build -Werror-unused parameter error in nightly test #2884\nScatterView memory space is not user settable #2826\nclang/8+cuda/10.0 build error with c++17 #2809\nwarnings…. #2805\nKokkos version in cpp define #2787\nRemove Defunct QThreads Backend #2751\nImprove Kokkos::fence behavior with multiple execution spaces #2659\npolylithic(?) initialization of Kokkos #2658\nUnnecessary(?) check for host execution space initialization from Cuda initialization #2652\nKokkos error reporting failures with CUDA GPUs in exclusive mode #2471\natomicMax equivalent (and other atomics) #2401\nFix alignment for Kokkos::complex #2255\nWarnings with Cuda 10.1 #2206\ndual view with Kokkos::ViewAllocateWithoutInitializing #2188\nCheck error code from cudaOccupancyMaxActiveBlocksPerMultiprocessor #2172\nAdd non-member Kokkos::resize/realloc for DualView #2170\nConstruct DualView without initialization #2046\nExpose is_assignable to determine if one view can be assigned to another #1936\nprofiling label #1935\nteam_broadcast of bool failed on CUDA backend #1908\nView static_extent #660\nMisleading Kokkos::Cuda::initialize ERROR message when compiled for wrong GPU architecture #1944\nCryptic Error When Malloc Fails #2164\nDrop support for intermediate standards in CMake #2336\n\nFixed bugs:\n\nDualView sync_device with length zero creates cuda errors #2946\nbuilding with nvcc and clang (or clang based XL) as host compiler: “Kokkos::atomic_fetch_min(volatile int *, int)” has already been defined #2903\nCuda 9.1,10.1 debug builds failing due to -Werror=unused-parameter #2880\nclang -Werror: Kokkos_FixedBufferMemoryPool.hpp:140:28: error: unused parameter ‘alloc_size’ #2869\nintel/16.0.1, intel/17.0.1 nightly build failures with debugging enabled #2867\nintel/16.0.1 debug build errors #2863\nxl/16.1.1 with cpp14, openmp build, nightly test failures #2856\nIntel nightly test failures: team_vector #2852\nKokkos Views with intmax/2&lt;N&lt;intmax can hang during construction #2850\nworkgraph_fib test seg-faults with threads backend and hwloc #2797\ncuda.view_64bit test hangs on Power8+Kepler37 system - develop and 2.9.00 branches #2771\ndevice_type for Kokkos_Random ? #2693\n“More than one tag given” error in Experimental::require() #2608\nSegfault on Marvell from our finalization stack #2542"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-21",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-21",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\nImplemented enhancements:\n\nBuildSystem: Standalone Modern CMake Support #2104\nStyleFormat: ClangFormat Style #2157\nDocumentation: Document build system and CMake philosophy #2263\nBuildSystem: Add Alias with Namespace Kokkos:: to Interal Libraries #2530\nBuildSystem: Universal Kokkos find_package #2099\nBuildSystem: Dropping support for Kokkos_{DEVICES,OPTIONS,ARCH} in CMake #2329\nBuildSystem: Set Kokkos_DEVICES and Kokkos_ARCH variables in exported CMake configuration #2193\nBuildSystem: Drop support for CUDA 7 and CUDA 8 #2489\nBuildSystem: Drop CMake option SEPARATE_TESTS #2266\nBuildSystem: Support expt-relaxed-constexpr same as expt-extended-lambda #2411\nBuildSystem: Add Xnvlink to command line options allowed in nvcc_wrapper #2197\nBuildSystem: Install Kokkos config files and target files to lib/cmake/Kokkos #2162\nBuildSystem: nvcc_wrappers and c++ 14 #2035\nBuildSystem: Kokkos version major/version minor (Feature request) #1930\nBuildSystem: CMake namespaces (and other modern cmake cleanup) #1924\nBuildSystem: Remove capability to install Kokkos via GNU Makefiles #2332\nDocumentation: Remove PDF ProgrammingGuide in Kokkos replace with link #2244\nView: Add Method to Resize View without Initialization #2048\nVector: implement “insert” method for Kokkos_Vector (as a serial function on host) #2437\n\nFixed bugs:\n\nParallelScan: Kokkos::parallelfix race condition seen in inter-block fence #2681\nOffsetView: Kokkos::OffsetView missing constructor which takes pointer #2247\nOffsetView: Kokkos::OffsetView: allow offset=0 #2246\nDeepCopy: Missing DeepCopy instrumentation in Kokkos #2522\nnvcc_wrapper: –host-only fails with multiple -W* flags #2484\nnvcc_wrapper: taking first -std option is counterintuitive #2553\nSubview: Error taking subviews of views with static_extents of min rank #2448\nTeamPolicy: reducers with valuetypes without += broken on CUDA #2410\nLibs: Fix inconsistency of Kokkos library names in Kokkos and Trilinos #1902\nComplex: operator&gt;&gt; for complex&lt;T&gt; uses std::ostream, not std::istream #2313\nMacros: Restrict not honored for non-intel compilers #1922"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-22",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-22",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\nImplemented enhancements:\n\nCapability: CUDA Streams #1723\nCapability: CUDA Stream support for parallel_reduce #2061\nCapability: Feature Request: TeamVectorRange #713\nCapability: Adding HPX backend #2080\nCapability: TaskScheduler to have multiple queues #565\nCapability: Support for additional reductions in ScatterView #1674\nCapability: Request: deep_copy within parallel regions #689\nCapability: Feature Request: create\\_mirror\\_view\\_without\\_initializing #1765\nView: Use SFINAE to restrict possible View type conversions #2127\nDeprecation: Deprecate ExecutionSpace::fence() as static function and make it non-static #2140\nDeprecation: Deprecate LayoutTileLeft #2122\nMacros: KOKKOS_RESTRICT defined for non-Intel compilers #2038\n\nFixed bugs:\n\nCuda: TeamThreadRange loop count on device is passed by reference to host static constexpr #1733\nCuda: Build error with relocatable device code with CUDA 10.1 GCC 7.3 #2134\nCuda: cudaFuncSetCacheConfig is setting CachePreferShared too often #2066\nCuda: TeamPolicy doesn’t throw then created with non-viable vector length and also doesn’t backscale to viable one #2020\nCuda: cudaMemcpy error for large league sizes on V100 #1991\nCuda: illegal warp sync in parallel_reduce by functor on Turing 75 #1958\nTeamThreadRange: Inconsistent results from TeamThreadRange reduction #1905\nAtomics: atomic_fetch_oper & atomic_oper_fetch don’t build for complex&lt;float&gt; #1964\nViews: Kokkos randomread Views leak memory #2155\nScatterView: LayoutLeft overload currently non-functional #2165\nKNL: With intel 17.2.174 illegal instruction in random number test #2078\nBitset: Enable copy constructor on device #2094\nExamples: do not compile due to template deduction error (multi_fem) #1928"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-23",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-23",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\nImplemented enhancements:\n\nCapability, Tests: C++14 support and testing #1914\nCapability: Add environment variables for all command line arguments #1798\nCapability: –kokkos-ndevices not working for Slurm #1920\nView: Undefined behavior when deep copying from and to an empty unmanaged view #1967\nBuildSystem: nvcc_wrapper should stop immediately if nvcc is not in PATH #1861\n\nFixed bugs:\n\nCuda: Fix Volta Issues 1 Non-deterministic behavior on Volta, runs fine on Pascal #1949\nCuda: Fix Volta Issues 2 CUDA Team Scan gives wrong values on Volta with -G compile flag #1942\nCuda: illegal warp sync in parallel_reduce by functor on Turing 75 #1958\nThreads: Pthreads backend does not handle RangePolicy with offset correctly #1976\nAtomics: atomic_fetch_oper has no case for Kokkos::complex&lt;double&gt; or other 16-byte types #1951\nMDRangePolicy: Fix zero-length range #1948\nTeamThreadRange: TeamThreadRange MaxLoc reduce doesnt compile #1909"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-24",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-24",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\nImplemented enhancements:\n\nDualView: Add non-templated functions for sync, need_sync, view, modify #1858\nDualView: Avoid needlessly allocates and initializes modify_host and modify_device flag views #1831\nDualView: Incorrect deduction of “not device type” #1659\nBuildSystem: Add KOKKOS_ENABLE_CXX14 and KOKKOS_ENABLE_CXX17 #1602\nBuildSystem: Installed kokkos_generated_settings.cmake contains build directories instead of install directories #1838\nBuildSystem: KOKKOS_ARCH: add ticks to printout of improper arch setting #1649\nBuildSystem: Make core/src/Makefile for Cuda use needed nvcc_wrapper #1296\nBuild: Support PGI as host compiler for NVCC #1828\nBuild: Many Warnings Fixed e.g.#1786\nCapability: OffsetView with non-zero begin index #567\nCapability: Reductions into device side view #1788\nCapability: Add max_size to Kokkos::Array #1760\nCapability: View Assignment: LayoutStride -&gt; LayoutLeft and LayoutStride -&gt; LayoutRight #1594\nCapability: Atomic function allow implicit conversion of update argument #1571\nCapability: Add team_size_max with tagged functors #663\nCapability: Fix allignment of views from Kokkos_ScratchSpace should use different alignment #1700\nCapabilitiy: create_mirror_view_and_copy for DynRankView #1651\nCapability: DeepCopy HBWSpace / HostSpace #548\nROCm: support team vector scan #1645\nROCm: Merge from rocm-hackathon2 #1636\nROCm: Add ParallelScanWithTotal #1611\nROCm: Implement MDRange in ROCm #1314\nROCm: Implement Reducers for Nested Parallelism Levels #963\nROCm: Add asynchronous deep copy #959\nTests: Memory pool test seems to allocate 8GB #1830\nTests: Add unit_test for team_broadcast #734\n\nFixed bugs:\n\nBuildSystem: Makefile.kokkos gets gcc-toolchain wrong if gcc is cached #1841\nBuildSystem: kokkos_generated_settings.cmake placement is inconsistent #1771\nBuildSystem: Invalid escape sequence . in kokkos_functions.cmake #1661\nBuildSystem: Problem in Kokkos generated cmake file #1770\nBuildSystem: invalid file names on windows #1671\nTests: reducers min/max_loc test fails randomly due to multiple min values and thus multiple valid locations #1681\nTests: cuda.scatterview unit test causes “Bus error” when force_uvm and enable_lambda are enabled #1852\nTests: cuda.cxx11 unit test fails when force_uvm and enable_lambda are enabled #1850\nTests: threads.reduce_device_view_range_policy failing with Cuda/8.0.44 and RDC #1836\nBuild: compile error when compiling Kokkos with hwloc 2.0.1 (on OSX 10.12.6, with g++ 7.2.0) #1506\nBuild: dual_view.view broken with UVM #1834\nBuild: White cuda/9.2 + gcc/7.2 warnings triggering errors #1833\nBuild: warning: enum constant in boolean context #1813\nCapability: Fix overly conservative max_team_size thingy #1808\nDynRankView: Ctors taking ViewAllocateWithoutInitializing broken #1783\nCuda: Apollo cuda.team_broadcast test fail with clang-6.0 #1762\nCuda: Clang spurious test failure in impl_view_accessible #1753\nCuda: Kokkos::complex&lt;double&gt; atomic deadlocks with Clang 6 Cuda build with -O0 #1752\nCuda: LayoutStride Test fails for UVM as default memory space #1688\nCuda: Scan wrong values on Volta #1676\nCuda: Kokkos::deep_copy error with CudaUVM and Kokkos::Serial spaces #1652\nCuda: cudaErrorInvalidConfiguration with debug build #1647\nCuda: parallel_for with TeamPolicy::team_size_recommended with launch bounds not working – reported by Daniel Holladay #1283\nCuda: Using KOKKOS_CLASS_LAMBDA in a class with Kokkos::Random_XorShift64_Pool member data #1696\nLong Build Times on Darwin #1721\nCapability: Typo in Kokkos_Sort.hpp - BinOp3D - wrong comparison #1720\nBuffer overflow in SharedAllocationRecord in Kokkos_HostSpace.cpp #1673\nSerial unit test failure #1632"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-25",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-25",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\nPart of the Kokkos C++ Performance Portability Programming EcoSystem 2.7\nImplemented enhancements:\n\nDeprecate team_size auto adjusting to maximal value possible #1618\nDynamicView - remove restrictions to std::is_trivial types and value_type is power of two #1586\nKokkos::StaticCrsGraph does not propagate memory traits (e.g., Unmanaged) #1581\nAdding ETI for DeepCopy / ViewFill etc. #1578\nDeprecate all the left over KOKKOS_HAVE_ Macros and Kokkos_OldMacros.hpp #1572\nError if Kokkos_ARCH set in CMake #1555\nDeprecate ExecSpace::initialize / ExecSpace::finalize #1532\nNew API for TeamPolicy property setting #1531\nclang 6.0 + cuda debug out-of-memory test failure #1521\nCuda UniqueToken interface not consistent with other backends #1505\nMove Reducers out of Experimental namespace #1494\nProvide scope guard for initialize/finalize #1479\nCheck Kokkos::is_initialized in SharedAllocationRecord dtor #1465\nRemove static list of allocations #1464\nMakefiles: Support single compile/link line use case #1402\nThreadVectorRange with a range #1400\nExclusive scan + last value API #1358\nInstall kokkos_generated_settings.cmake #1348\nKokkos arrays (not views!) don’t do bounds checking in debug mode #1342\nExpose round-robin GPU assignment outside of initialize(int, char**) #1318\nDynamicView misses use_count and label function #1298\nView constructor should check arguments #1286\nFalse Positive on Oversubscription Warning #1207\nAllow (require) execution space for 1st arg of VerifyExecutionCanAccessMemorySpace #1192\nROCm: Add ROCmHostPinnedSpace #958\npower of two functions #656\nCUDA 8 has 64bit __shfl #361\nAdd TriBITS/CMake configure information about node types #243\n\nFixed bugs:\n\nCUDA atomic_fetch_sub for doubles is hitting CAS instead of intrinsic #1624\nBug: use of ballot on Volta #1612\nKokkos::deep_copy memory access failures #1583\ng++ -std option doubly set for cmake project #1548\nViewFill for 1D Views of larger 32bit entries fails #1541\nCUDA Volta another warpsync bug #1520\ntriple_nested_parallelism fails with KOKKOS_DEBUG and CUDA #1513\nJenkins errors in Kokkos_SharedAlloc.cpp with debug build #1511\nKokkos::Sort out-of-bounds with empty bins #1504\nGet rid of deprecated functions inside Kokkos #1484\nget_work_partition casts int64_t to int, causing a seg fault #1481\nNVCC bug with __device__ on defaulted function #1470\nCMake example broken with CUDA backend #1468"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-26",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-26",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\nPart of the Kokkos C++ Performance Portability Programming EcoSystem 2.6\nImplemented enhancements:\n\nSupport NVIDIA Volta microarchitecture #1466\nKokkos - Define empty functions when profiling disabled #1424\nDon’t use __constant__ cache for lock arrays, enable once per run update instead of once per call #1385\ntask dag enhancement. #1354\nCuda task team collectives and stack size #1353\nReplace View operator acceptance of more than rank integers with ‘access’ function #1333\nInteroperability: Do not shut down backend execution space runtimes upon calling finalize. #1305\nshmem_size for LayoutStride #1291\nKokkos::resize performs poorly on 1D Views #1270\nstride() is inconsistent with dimension(), extent(), etc. #1214\nKokkos::sort defaults to std::sort on host #1208\nDynamicView with host size grow #1206\nUnmanaged View with Anonymous Memory Space #1175\nSort subset of Kokkos::DynamicView #1160\nMDRange policy doesn’t support lambda reductions #1054\nAdd ability to set hook on Kokkos::finalize #714\nAtomics with Serial Backend - Default should be Disable? #549\nKOKKOS_ENABLE_DEPRECATED_CODE #1359\n\nFixed bugs:\n\ncuda_internal_maximum_warp_count returns 8, but I believe it should return 16 for P100 #1269\nCuda: level 1 scratch memory bug (reported by Stan Moore) #1434\nMDRangePolicy Reduction requires value_type typedef in Functor #1379\nKokkos DeepCopy between empty views fails #1369\nSeveral issues with new CMake build infrastructure (reported by Eric Phipps) #1365\ndeep_copy between rank-1 host/device views of differing layouts without UVM no longer works (reported by Eric Phipps) #1363\nProfiling can’t be disabled in CMake, and a parallel_for is missing for tasks (reported by Kyungjoo Kim) #1349\nget_work_partition int overflow (reported by berryj5) #1327\nKokkos::deep_copy must fence even if the two views are the same #1303\nCudaUVMSpace::allocate/deallocate must fence #1302\nViewResize on CUDA fails in Debug because of too many resources requested #1299\nCuda 9 and intrepid2 calls from Panzer. #1183\nSlowdown due to tracking_enabled() in 2.04.00 (found by Albany app) #1016\nBounds checking fails with zero-span Views (reported by Stan Moore) #1411"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-27",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-27",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\nPart of the Kokkos C++ Performance Portability Programming EcoSystem 2.5\nImplemented enhancements:\n\nProvide Makefile.kokkos logic for CMake and TriBITS #878\nAdd Scatter View #825\nDrop gcc 4.7 and intel 14 from supported compiler list #603\nEnable construction of unmanaged view using common_view_alloc_prop #1170\nUnused Function Warning with XL #1267\nAdd memory pool parameter check #1218\nCUDA9: Fix warning for unsupported long double #1189\nCUDA9: fix warning on defaulted function marking #1188\nCUDA9: fix warnings for deprecated warp level functions #1187\nAdd CUDA 9.0 nightly testing #1174\n{OMPI,MPICH}_CXX hack breaks nvcc_wrapper use case #1166\nKOKKOS_HAVE_CUDA_LAMBDA became KOKKOS_CUDA_USE_LAMBDA #1274\n\nFixed bugs:\n\nMinMax Reducer with tagged operator doesn’t compile #1251\nReducers for Tagged operators give wrong answer #1250\nKokkos not Compatible with Big Endian Machines? #1235\nParallel Scan hangs forever on BG/Q #1234\nThreads backend doesn’t compile with Clang on OS X #1232\n$(shell date) needs quote #1264\nUnqualified parallel_for call conflicts with user-defined parallel_for #1219\nKokkosAlgorithms: CMake issue in unit tests #1212\nIntel 18 Error: “simd pragma has been deprecated” #1210\nMemory leak in Kokkos::initialize #1194\nCUDA9: compiler error with static assert template arguments #1190\nKokkos::Serial::is_initialized returns always true #1184\nTriple nested parallelism still fails on bowman #1093\nOpenMP openmp.range on Develop Runs Forever on POWER7+ with RHEL7 and GCC4.8.5 #995\nRendezvous performance at global scope #985"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-28",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-28",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\nImplemented enhancements:\n\nAdd Subview pattern. #648\nAdd Kokkos “global” is_initialized #1060\nAdd create_mirror_view_and_copy #1161\nAdd KokkosConcepts SpaceAccessibility function #1092\nOption to Disable Initialize Warnings #1142\nMature task-DAG capability #320\nPromote Work DAG from experimental #1126\nImplement new WorkGraph push/pop #1108\nKokkos_ENABLE_Cuda_Lambda should default ON #1101\nAdd multidimensional parallel for example and improve unit test #1064\nFix ROCm: Performance tests not building #1038\nMake KOKKOS_ALIGN_SIZE a configure-time option #1004\nMake alignment consistent #809\nImprove subview construction on Cuda backend #615\n\nFixed bugs:\n\nKokkos::vector fixes for application #1134\nDynamicView non-power of two value_type #1177\nMemory pool bug #1154\nCuda launch bounds performance regression bug #1140\nSignificant performance regression in LAMMPS after updating Kokkos #1139\nCUDA compile error #1128\nMDRangePolicy neg idx test failure in debug mode #1113\nsubview construction on Cuda backend #615"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-29",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-29",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\nImplemented enhancements:\n\nOpenMP partition: set number of threads on nested level #1082\nAdd StaticCrsGraph row() method #1071\nEnhance Kokkos complex operator overloading #1052\nTell Trilinos packages about host+device lambda #1019\nFunction markup for defaulted class members #952\nAdd deterministic random number generator #857\n\nFixed bugs:\n\nFix reduction_identity&lt;T&gt;::max for floating point numbers #1048\nFix MD iteration policy ignores lower bound on GPUs #1041\n(Experimental) HBWSpace Linking issues in KokkosKernels #1094\n(Experimental) ROCm: algorithms/unit_tests test_sort failing with segfault #1070"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-30",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-30",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\nImplemented enhancements:\n\nAdded ROCm backend to support AMD GPUs\nKokkos::complex&lt;T&gt; behaves slightly differently from std::complex&lt;T&gt; #1011\nKokkos::Experimental::Crs constructor arguments were in the wrong order #992\nWork graph construction ease-of-use (one lambda for count and fill) #991\nwhen_all returns pointer of futures (improved interface) #990\nAllow assignment of LayoutLeft to LayoutRight or vice versa for rank-0 Views #594\nChanged the meaning of Kokkos_ENABLE_CXX11_DISPATCH_LAMBDA #1035\n\nFixed bugs:\n\nmemory pool default constructor does not properly set member variables. #1007"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-31",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-31",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\nImplemented enhancements:\n\nDisallow enabling both OpenMP and Threads in the same executable #406\nMake Kokkos::OpenMP respect OMP environment even if hwloc is available #630\nImprove Atomics Performance on KNL/Broadwell where PREFETCHW/RFO is Available #898\nKokkos::resize should test whether dimensions have changed before resizing #904\nDevelop performance-regression/acceptance tests #737\nMake the deep_copy Profiling hook a start/end system #890\nAdd deep_copy Profiling hook #843\nAppend tag name to parallel construct name for Profiling #842\nAdd view label to View bounds error message for CUDA backend #870\nDisable printing the loaded profiling library #824\n“Declared but never referenced” warnings #853\nWarnings about lock_address_cuda_space #852\nWorkGraph execution policy #771\nSimplify makefiles by guarding compilation with appropriate KOKKOS_ENABLE_### macros #716\nCmake build: wrong include install directory #668\nDerived View type and allocation #566\nFix Compiler warnings when compiling core unit tests for Cuda #214\n\nFixed bugs:\n\nOut-of-bounds read in Kokkos_Layout.hpp #975\nCudaClang: Fix failing test with Clang 4.0 #941\nRespawn when memory pool allocation fails (not available memory) #940\nMemory pool aborts on zero allocation request, returns NULL for &lt; minimum #939\nError with TaskScheduler query of underlying memory pool #917\nProfiling::*Callee static variables declared in header #863\ncalling *Space::name() causes compile error #862\nbug in Profiling::deallocateData #860\ntask_depend test failing, CUDA 8.0 + Pascal + RDC #829\n[develop branch] Standalone cmake issues #826\nKokkos CUDA failes to compile with OMPI_CXX and MPICH_CXX wrappers #776\nTask Team reduction on Pascal #767\nCUDA stack overflow with TaskDAG test #758\nTeamVector test on Cuda #670\nClang 4.0 Cuda Build broken again #560"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-32",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-32",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\nImplemented enhancements:\n\nHarmonize Custom Reductions over nesting levels #802\nPrevent users directly including KokkosCore_config.h #815\nDualView aborts on concurrent host/device modify (in debug mode) #814\nAbort when running on a NVIDIA CC5.0 or higher architecture with code compiled for CC &lt; 5.0 #813\nAdd “name” function to ExecSpaces #806\nAllow null Future in task spawn dependences #795\nAdd Unit Tests for Kokkos::complex #785\nAdd pow function for Kokkos::complex #784\nSquare root of a complex #729\nCommand line processing of –threads argument prevents users from having any commandline arguments starting with –threads #760\nProtected deprecated API with appropriate macro #756\nAllow task scheduler memory pool to be used by tasks #747\nView bounds checking on host-side performance: constructing a std::string #723\nAdd check for AppleClang as compiler distinct from check for Clang. #705\nUninclude source files for specific configurations to prevent link warning. #701\nAdd –small option to snapshot script #697\nCMake Standalone Support #674\nCMake build unit test and install #808\nCMake: Fix having kokkos as a subdirectory in a pure cmake project #629\nTribits macro assumes build directory is in top level source directory #654\nUse bin/nvcc_wrapper, not config/nvcc_wrapper #562\nAllow MemoryPool::allocate() to be called from multiple threads per warp. #487\nAllow MemoryPool::allocate\\(\\) to be called from multiple threads per warp. #487\nMove OpenMP 4.5 OpenMPTarget backend into Develop #456\nTesting on ARM testbed #288\n\nFixed bugs:\n\nFix label in OpenMP parallel_reduce verify_initialized #834\nTeamScratch Level 1 on Cuda hangs #820\n[bug] memory pool. #786\nSome Reduction Tests fail on Intel 18 with aggressive vectorization on #774\nError copying dynamic view on copy of memory pool #773\nCUDA stack overflow with TaskDAG test #758\nThreadVectorRange Customized Reduction Bug #739\nset_scratch_size overflows #726\nGet wrong results for compiler checks in Makefile on OS X. #706\nFix check if multiple host architectures enabled. #702\nThreads Backend Does not Pass on Cray Compilers #609\nRare bug in memory pool where allocation can finish on superblock in empty state #452\nLDFLAGS in core/unit_test/Makefile: potential “undefined reference” to pthread lib #148"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-33",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-33",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\nImplemented enhancements:\n\nUnorderedMap: make it accept Devices or MemorySpaces #711\nsort to accept DynamicView and [begin,end) indices #691\nENABLE Macros should only be used via #ifdef or #if defined #675\nRemove impl/Kokkos_Synchronic_* #666\nTurning off IVDEP for Intel 14. #638\nUsing an installed Kokkos in a target application using CMake #633\nCreate Kokkos Bill of Materials #632\nMDRangePolicy and tagged evaluators #547\nAdd PGI support #289\n\nFixed bugs:\n\nOutput from PerTeam fails #733\nCuda: architecture flag not added to link line #688\nGetting large chunks of memory for a thread team in a universal way #664\nKokkos RNG normal() function hangs for small seed value #655\nKokkos Tests Errors on Shepard/HSW Builds #644"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-34",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-34",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\nImplemented enhancements:\n\nContainers: Adding block partitioning to StaticCrsGraph #625\nKokkos Make System can induce Errors on Cray Volta System #610\nOpenMP: error out if KOKKOS_HAVE_OPENMP is defined but not _OPENMP #605\nCMake: fix standalone build with tests #604\nChange README (that GitHub shows when opening Kokkos project page) to tell users how to submit PRs #597\nAdd correctness testing for all operators of Atomic View #420\nAllow assignment of Views with compatible memory spaces #290\nBuild only one version of Kokkos library for tests #213\nClean out old KOKKOS_HAVE_CXX11 macros clauses #156\nHarmonize Macro names #150\n\nFixed bugs:\n\nCray and PGI: Kokkos_Parallel_Reduce #634\nKokkos Make System can induce Errors on Cray Volta System #610\nNormal() function random number generator doesn’t give the expected distribution #592"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-35",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-35",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\nImplemented enhancements:\n\nAdd CMake option to enable Cuda Lambda support #589\nAdd CMake option to enable Cuda RDC support #588\nAdd Initial Intel Sky Lake Xeon-HPC Compiler Support to Kokkos Make System #584\nBuilding Tutorial Examples #582\nInternal way for using ThreadVectorRange without TeamHandle #574\nTesting: Add testing for uvm and rdc #571\nProfiling: Add Memory Tracing and Region Markers #557\nnvcc_wrapper not installed with Kokkos built with CUDA through CMake #543\nImprove DynRankView debug check #541\nBenchmarks: Add Gather benchmark #536\nTesting: add spot_check option to test_all_sandia #535\nDeprecate Kokkos::Impl::VerifyExecutionCanAccessMemorySpace #527\nAdd AtomicAdd support for 64bit float for Pascal #522\nAdd Restrict and Aligned memory trait #517\nKokkos Tests are Not Run using Compiler Optimization #501\nAdd support for clang 3.7 w/ openmp backend #393\nProvide an error throw class #79\n\nFixed bugs:\n\nCuda UVM Allocation test broken with UVM as default space #586\nBug (develop branch only): multiple tests are now failing when forcing uvm usage. #570\nError in generate_makefile.sh for Kokkos when Compiler is Empty String/Fails #568\nXL 13.1.4 incorrect C++11 flag #553\nImprove DynRankView debug check #541\nInstalling Library on MAC broken due to cp -u #539\nIntel Nightly Testing with Debug enabled fails #534"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-36",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-36",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\nImplemented enhancements:\n\nAdd Changelog generation to our process. #506\n\nFixed bugs:\n\nTest scratch_request fails in Serial with Debug enabled #520\nBug In BoundsCheck for DynRankView #516"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-37",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-37",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\nImplemented enhancements:\n\nAdd PowerPC assembly for grabbing clock register in memory pool #511\nAdd GCC 6.x support #508\nTest install and build against installed library #498\nMakefile.kokkos adds expt-extended-lambda to cuda build with clang #490\nAdd top-level makefile option to just test kokkos-core unit-test #485\nSplit and harmonize Object Files of Core UnitTests to increase build parallelism #484\nLayoutLeft to LayoutLeft subview for 3D and 4D views #473\nAdd official Cuda 8.0 support #468\nAllow C++1Z Flag for Class Lambda capture #465\nAdd Clang 4.0+ compilation of Cuda code #455\nPossible Issue with Intel 17.0.098 and GCC 6.1.0 in Develop Branch #445\nAdd name of view to “View bounds error” #432\nMove Sort Binning Operators into Kokkos namespace #421\nTaskPolicy - generate error when attempt to use uninitialized #396\nImport WithoutInitializing and AllowPadding into Kokkos namespace #325\nTeamThreadRange requires begin, end to be the same type #305\nCudaUVMSpace should track # allocations, due to CUDA limit on # UVM allocations #300\nRemove old View and its infrastructure #259\n\nFixed bugs:\n\nBug in TestCuda_Other.cpp: most likely assembly inserted into Device code #515\nCuda Compute Capability check of GPU is outdated #509\nmulti_scratch test with hwloc and pthreads seg-faults. #504\ngenerate_makefile.bash: “make install” is broken #503\nmake clean in Out of Source Build/Tests Does Not Work Correctly #502\nMakefiles for test and examples have issues in Cuda when CXX is not explicitly specified #497\nDispatch lambda test directly inside GTEST macro doesn’t work with nvcc #491\nUnitTests with HWLOC enabled fail if run with mpirun bound to a single core #489\nFailing Reducer Test on Mac with Pthreads #479\nmake test Dumps Error with Clang Not Found #471\nOpenMP TeamPolicy member broadcast not using correct volatile shared variable #424\nTaskPolicy - generate error when attempt to use uninitialized #396\nNew task policy implementation is pulling in old experimental code. #372\nMemoryPool unit test hangs on Power8 with GCC 6.1.0 #298"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-38",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-38",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\nImplemented enhancements:\n\nEnable Profiling by default in Tribits build #438\nparallel_reduce(0), parallel_scan(0) unit tests #436\ndata()==NULL after realloc with LayoutStride #351\nFix tutorials to track new Kokkos::View #323\nRename team policy set_scratch_size. #195\n\nFixed bugs:\n\nPossible Issue with Intel 17.0.098 and GCC 6.1.0 in Develop Branch #445\nMakefile spits syntax error #435\nKokkos::sort fails for view with all the same values #422\nGeneric Reducers: can’t accept inline constructed reducer #404\ndata\\(\\)==NULL after realloc with LayoutStride #351\nconst subview of const view with compile time dimensions on Cuda backend #310\nKokkos (in Trilinos) Causes Internal Compiler Error on CUDA 8.0.21-EA on POWER8 #307\nCore Oversubscription Detection Broken? #159"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-39",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-39",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\nImplemented enhancements:\n\nAdd “standard” reducers for lambda-supportable customized reduce #411\nTaskPolicy - single thread back-end execution #390\nKokkos master clone tag #387\nQuery memory requirements from task policy #378\nOutput order of test_atomic.cpp is confusing #373\nMissing testing for atomics #341\nFeature request for Kokkos to provide Kokkos::atomic_fetch_max and atomic_fetch_min #336\nTaskPolicy&lt;Cuda&gt; performance requires teams mapped to warps #218\n\nFixed bugs:\n\nReduce with Teams broken for custom initialize #407\nFailing Kokkos build on Debian #402\nFailing Tests on NVIDIA Pascal GPUs #398\nAlgorithms: fill_random assumes dimensions fit in unsigned int #389\nKokkos::subview with RandomAccess Memory Trait #385\nBuild warning (signed / unsigned comparison) in Cuda implementation #365\nwrong results for a parallel_reduce with CUDA8 / Maxwell50 #352\nHierarchical parallelism - 3 level unit test #344\nCan I allocate a View w/ both WithoutInitializing & AllowPadding? #324\nsubview View layout determination #309\nUnit tests with Cuda - Maxwell #196"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#section-40",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#section-40",
    "title": "CHANGELOG",
    "section": "",
    "text": "Full Changelog\nImplemented enhancements:\n\nEdit ViewMapping so assigning Views with the same custom layout compiles when const casting #327\nDynRankView: Performance improvement for operator() #321\nInteroperability between static and dynamic rank views #295\nsubview member function ? #280\nInter-operatibility between View and DynRankView. #245\n(Trilinos) build warning in atomic_assign, with Kokkos::complex #177\nView&lt;&gt;::shmem_size should runtime check for number of arguments equal to rank #176\nCustom reduction join via lambda argument #99\nDynRankView with 0 dimensions passed in at construction #293\nInject view_alloc and friends into Kokkos namespace #292\nLess restrictive TeamPolicy reduction on Cuda #286\ndeep_copy using remap with source execution space #267\nSuggestion: Enable opt-in L1 caching via nvcc-wrapper #261\nMore flexible create_mirror functions #260\nRename View::memory_span to View::required_allocation_size #256\nUse of subviews and views with compile-time dimensions #237\nUse of subviews and views with compile-time dimensions #237\nKokkos::Timer #234\nFence CudaUVMSpace allocations #230\nView::operator() accept std::is_integral and std::is_enum #227\nAllocating zero size View #216\nThread scalable memory pool #212\nAdd a way to disable memory leak output #194\nKokkos exec space init should init Kokkos profiling #192\nRuntime rank wrapper for View #189\nProfiling Interface #158\nFix View assignment (of managed to unmanaged) #153\nAdd unit test for assignment of managed View to unmanaged View #152\nCheck for oversubscription of threads with MPI in Kokkos::initialize #149\nDynamic resizeable 1dimensional view #143\nDevelop TaskPolicy for CUDA #142\nNew View : Test Compilation Downstream #138\nNew View Implementation #135\nAdd variant of subview that lets users add traits #134\nNVCC-WRAPPER: Add –host-only flag #121\nAddress gtest issue with TriBITS Kokkos build outside of Trilinos #117\nMake tests pass with -expt-extended-lambda on CUDA #108\nDynamic scheduling for parallel_for and parallel_reduce #106\nRuntime or compile time error when reduce functor’s join is not properly specified as const member function or with volatile arguments #105\nError out when the number of threads is modified after kokkos is initialized #104\nPorting to POWER and remove assumption of X86 default #103\nDynamic scheduling option for RangePolicy #100\nSharedMemory Support for Lambdas #81\nRecommended TeamSize for Lambdas #80\nAdd Aggressive Vectorization Compilation mode #72\nDynamic scheduling team execution policy #53\nUVM allocations in multi-GPU systems #50\nSynchronic in Kokkos::Impl #44\nindex and dimension types in for loops #28\nSubview assign of 1D Strided with stride 1 to LayoutLeft/Right #1\n\nFixed bugs:\n\nmisspelled variable name in Kokkos_Atomic_Fetch + missing unit tests #340\nseg fault Kokkos::Impl::CudaInternal::print_configuration #338\nClang compiler error with named parallel_reduce, tags, and TeamPolicy. #335\nShared Memory Allocation Error at parallel_reduce #311\nDynRankView: Fix resize and realloc #303\nScratch memory and dynamic scheduling #279\nMemoryPool infinite loop when out of memory #312\nKokkos DynRankView changes break Sacado and Panzer #299\nMemoryPool fails to compile on non-cuda non-x86 #297\nRandom Number Generator Fix #296\nView template parameter ordering Bug #282\nSerial task policy broken. #281\ndeep_copy with LayoutStride should not memcpy #262\nDualView::need_sync should be a const method #248\nArbitrary-sized atomics on GPUs broken; loop forever #238\nboolean reduction value_type changes answer #225\nCustom init() function for parallel_reduce with array value_type #210\nunit_test Makefile is Broken - Recursively Calls itself until Machine Apocalypse. #202\nnvcc_wrapper Does Not Support -Xcompiler &lt;compiler option&gt; #198\nKokkos exec space init should init Kokkos profiling #192\nKokkos Threads Backend impl_shared_alloc Broken on Intel 16.1 (Shepard Haswell) #186\npthread back end hangs if used uninitialized #182\nparallel_reduce of size 0, not calling init/join #175\nBug in Threads with OpenMP enabled #173\nKokkosExp_SharedAlloc, m_team_work_index inaccessible #166\n128-bit CAS without Assembly Broken? #161\nfatal error: Cuda/Kokkos_Cuda_abort.hpp: No such file or directory #157\nPower8: Fix OpenMP backend #139\nData race in Kokkos OpenMP initialization #131\nparallel_launch_local_memory and cuda 7.5 #125\nResize can fail with Cuda due to asynchronous dispatch #119\nQthread taskpolicy initialization bug. #92\nWindows: sys/mman.h #89\nWindows: atomic_fetch_sub() #88\nWindows: snprintf #87\nParallel_Reduce with TeamPolicy and league size of 0 returns garbage #85\nThrow with Cuda when using (2D) team_policy parallel_reduce with less than a warp size #76\nScalar views don’t work with Kokkos::Atomic memory trait #69\nReduce the number of threads per team for Cuda #63\nNamed Kernels fail for reductions with CUDA #60\nKokkos View dimension_() for long returning unsigned int #20\natomic test hangs with LLVM #6\nOpenMP Test should set omp_set_num_threads to 1 #4\n\nClosed issues:\n\ndevelop branch broken with CUDA 8 and –expt-extended-lambda #354\n–arch=KNL with Intel 2016 build failure #349\nError building with Cuda when passing -DKOKKOS_CUDA_USE_LAMBDA to generate_makefile.bash #343\nCan I safely use int indices in a 2-D View with capacity &gt; 2B? #318\nKokkos::ViewAllocateWithoutInitializing is not working #317\nIntel build on Mac OS X #277\ndeleted #271\nBroken Mira build #268\n32-bit build #246\nparallel_reduce with RDC crashes linker #232\nbuild of Kokkos_Sparse_MV_impl_spmv_Serial.cpp.o fails if you use nvcc and have cuda disabled #209\nKokkos Serial execution space is not tested with TeamPolicy. #207\nUnit test failure on Hansen KokkosCore_UnitTest_Cuda_MPI_1 #200\nnvcc compiler warning: calling a __host__ function from a __host__ __device__ function is not allowed #180\nIntel 15 build error with defaulted “move” operators #171\nmissing libkokkos.a during Trilinos 12.4.2 build, yet other libkokkos*.a libs are there #165\nTie atomic updates to execution space or even to thread team? (speculation) #144\nNew View: Compiletime/size Test #137\nNew View : Performance Test #136\nSigned/unsigned comparison warning in CUDA parallel #130\nKokkos::complex: Need op* w/ std::complex & real #126\nUse uintptr_t for casting pointers #110\nDefault thread mapping behavior between P and Q threads. #91\nWindows: Atomic_Fetch_Exchange() return type #90\nSynchronic unit test is way too long #84\nnvcc_wrapper -&gt; $(NVCC_WRAPPER) #42\nCheck compiler version and print helpful message #39\nKokkos shared memory on Cuda uses a lot of registers #31\nCan not pass unit test cuda.space without a GT 720 #25\nMakefile.kokkos lacks bounds checking option that CMake has #24\nKokkos can not complete unit tests with CUDA UVM enabled #23\nSimplify teams + shared memory histogram example to remove vectorization #21\nKokkos needs to rever to ${PROJECT_NAME}_ENABLE_CXX11 not Trilinos_ENABLE_CXX11 #17\nKokkos Base Makefile adds AVX to KNC Build #16\nMS Visual Studio 2013 Build Errors #9\nsubview(X, ALL(), j) for 2-D LayoutRight View X: should it view a column? #5"
  },
  {
    "objectID": "mylammps/lib/kokkos/CHANGELOG.html#end_c98-2015-04-15",
    "href": "mylammps/lib/kokkos/CHANGELOG.html#end_c98-2015-04-15",
    "title": "CHANGELOG",
    "section": "",
    "text": "* This Change Log was automatically generated by github_changelog_generator"
  },
  {
    "objectID": "mylammps/lib/kokkos/BUILD.html",
    "href": "mylammps/lib/kokkos/BUILD.html",
    "title": "Installing and Using Kokkos",
    "section": "",
    "text": "Kokkos"
  },
  {
    "objectID": "mylammps/lib/kokkos/BUILD.html#kokkos-philosophy",
    "href": "mylammps/lib/kokkos/BUILD.html#kokkos-philosophy",
    "title": "Installing and Using Kokkos",
    "section": "Kokkos Philosophy",
    "text": "Kokkos Philosophy\nKokkos provides a modern CMake style build system. As C++ continues to develop for C++20 and beyond, CMake is likely to provide the most robust support for C++. Applications heavily leveraging Kokkos are strongly encouraged to use a CMake build system.\nYou can either use Kokkos as an installed package (encouraged) or use Kokkos in-tree in your project. Modern CMake is exceedingly simple at a high-level (with the devil in the details). Once Kokkos is installed In your CMakeLists.txt simply use:\nfind_package(Kokkos REQUIRED)\nThen for every executable or library in your project:\ntarget_link_libraries(myTarget Kokkos::kokkos)\nThat’s it! There is no checking Kokkos preprocessor, compiler, or linker flags. Kokkos propagates all the necessary flags to your project. This means not only is linking to Kokkos easy, but Kokkos itself can actually configure compiler and linker flags for your project. When configuring your project just set:\n&gt; cmake ${srcdir} \\\n  -DKokkos_ROOT=${kokkos_install_prefix} \\\n  -DCMAKE_CXX_COMPILER=${compiler_used_to_build_kokkos}\nNote: You may need the following if your project requires a minimum CMake version older than 3.12:\ncmake_policy(SET CMP0074 NEW)\nIf building in-tree, there is no find_package. You can use add_subdirectory(kokkos) with the Kokkos source and again just link with target_link_libraries(Kokkos::kokkos). The examples in examples/cmake_build_installed and examples/cmake_build_in_tree can help get you started."
  },
  {
    "objectID": "mylammps/lib/kokkos/BUILD.html#configuring-cmake",
    "href": "mylammps/lib/kokkos/BUILD.html#configuring-cmake",
    "title": "Installing and Using Kokkos",
    "section": "Configuring CMake",
    "text": "Configuring CMake\nA very basic installation of Kokkos is done with:\n&gt; cmake ${srcdir} \\\n -DCMAKE_CXX_COMPILER=g++ \\\n -DCMAKE_INSTALL_PREFIX=${kokkos_install_folder}\nwhich builds and installed a default Kokkos when you run make install. There are numerous device backends, options, and architecture-specific optimizations that can be configured, e.g.\n&gt; cmake ${srcdir} \\\n -DCMAKE_CXX_COMPILER=g++ \\\n -DCMAKE_INSTALL_PREFIX=${kokkos_install_folder} \\\n -DKokkos_ENABLE_OPENMP=ON\nwhich activates the OpenMP backend. All of the options controlling device backends, options, architectures, and third-party libraries (TPLs) are given below.\nKokkos requires as a minimum C++17, however C++20 and C++23 are supported depending on the compiler.\nThe latest minimum compiler versions can be found in cmake/kokkos_compiler_id.cmake."
  },
  {
    "objectID": "mylammps/lib/kokkos/BUILD.html#known-issues",
    "href": "mylammps/lib/kokkos/BUILD.html#known-issues",
    "title": "Installing and Using Kokkos",
    "section": "Known Issues",
    "text": "Known Issues\n\nCray\n\nThe Cray compiler wrappers do static linking by default. This seems to break the Kokkos build. You will likely need to set the environment variable CRAYPE_LINK_TYPE=dynamic in order to link correctly. Kokkos warns during configure if this is missing.\nThe Cray compiler identifies to CMake as Clang, but it sometimes has its own flags that differ from Clang. We try to include all exceptions, but flag errors may occur in which a Clang-specific flag is passed that the Cray compiler does not recognize.\n\n\n\nFortran\n\nIn a mixed C++/Fortran code, CMake will use the C++ linker by default. If you override this behavior and use Fortran as the link language, the link may break because Kokkos adds linker flags expecting the linker to be C++. Prior to CMake 3.18, Kokkos has no way of detecting in downstream projects that the linker was changed to Fortran. From CMake 3.18, Kokkos can use generator expressions to avoid adding flags when the linker is not C++. Note: Kokkos will not add any linker flags in this Fortran case. The user will be entirely on their own to add the appropriate linker flags."
  },
  {
    "objectID": "mylammps/lib/kokkos/BUILD.html#spack",
    "href": "mylammps/lib/kokkos/BUILD.html#spack",
    "title": "Installing and Using Kokkos",
    "section": "Spack",
    "text": "Spack\nAn alternative to manually building with the CMake is to use the Spack package manager. Make sure you have downloaded Spack. The easiest way to configure the Spack environment is:\n&gt; source spack/share/spack/setup-env.sh\nwith other scripts available for other shells. You can display information about how to install packages with:\n&gt; spack info kokkos\nA basic installation would be done as:\n````bash\n&gt; spack install kokkos\nSpack allows options and and compilers to be tuned in the install command.\n&gt; spack install kokkos@3.0 %gcc@7.3.0 +openmp\nThis example illustrates the three most common parameters to Spack: * Variants: specified with, e.g. +openmp, this activates (or deactivates with, e.g. ~openmp) certain options. * Version: immediately following kokkos the @version can specify a particular Kokkos to build * Compiler: a default compiler will be chosen if not specified, but an exact compiler version can be given with the %option.\nFor a complete list of Kokkos options, run:\n&gt; spack info kokkos\nMore details can be found in the Spack README\n\nSpack Development\nSpack currently installs packages to a location determined by a unique hash. This hash name is not really “human readable”. Generally, Spack usage should never really require you to reference the computer-generated unique install folder. If you must know, you can locate Spack Kokkos installations with:\n&gt; spack find -p kokkos ...\nwhere ... is the unique spec identifying the particular Kokkos configuration and version.\nA better way to use Spack for doing Kokkos development is the dev-build feature of Spack. For dev-build details, consult the kokkos-spack repository README."
  },
  {
    "objectID": "mylammps/lib/lepton/asmjit/LICENSE.html",
    "href": "mylammps/lib/lepton/asmjit/LICENSE.html",
    "title": "Bristol Active Matter Group",
    "section": "",
    "text": "Copyright (c) 2008-2020 The AsmJit Authors\nThis software is provided ‘as-is’, without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.\nPermission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:\n\nThe origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.\nAltered source versions must be plainly marked as such, and must not be misrepresented as being the original software.\nThis notice may not be removed or altered from any source distribution."
  },
  {
    "objectID": "mylammps/doc/github-development-workflow.html",
    "href": "mylammps/doc/github-development-workflow.html",
    "title": "Outline of the GitHub Development Workflow",
    "section": "",
    "text": "The purpose of this document is to provide a point of reference for the core LAMMPS developers and other LAMMPS contributors to understand the choices the LAMMPS developers have agreed on. Git and GitHub provide the tools, but do not set policies, so it is up to the developers to come to an agreement as to how to define and interpret policies. This document is likely to change as our experiences and needs change, and we try to adapt it accordingly. Last change 2023-02-10.\n\n\n\nGitHub Merge Management\nPull Requests\n\nPull Request Assignments\nPull Request Reviews\nPull Request Discussions\nChecklist for Pull Requests\n\nGitHub Issues\nMilestones and Release Planning\n\n\n\n\nIn the interest of consistency, ONLY ONE of the core LAMMPS developers should do the merging. This is currently @akohlmey (Axel Kohlmeyer). If this assignment needs to be changed, it shall be done right after a stable release. If the currently assigned developer cannot merge outstanding pull requests in a timely manner, or in other extenuating circumstances, other core LAMMPS developers with merge permission may merge pull requests.\n\n\n\nALL changes to the LAMMPS code and documentation, however trivial, MUST be submitted as a pull request to GitHub. All changes to the “develop” branch must be made exclusively through merging pull requests. The “release” and “stable” branches, respectively, are only to be updated upon “feature releases” or “stable releases” based on the associated tags. Updates to the stable release in between stable releases (for example, back-ported bug fixes) are first merged into the “maintenance” branch and then into the “stable” branch as “stable update releases”.\nPull requests may also be submitted to (long-running) feature branches created by LAMMPS developers inside the LAMMPS project, if needed. Those are not subject to the merge and review restrictions discussed in this document, though, but get managed as needed on a case-by-case basis.\n\n\nPull requests can be “chaperoned” by one of the LAMMPS core developers. This is indicated by whom the pull request is assigned to. LAMMPS core developers can self-assign, or they can decide to assign a pull request to a different LAMMPS developer. Being assigned to a pull request means, that this pull request may need some work and the assignee is tasked to determine whether this might be needed or not. The assignee may either choose to implement required changes or ask the submitter of the pull request to implement them. Even though, all LAMMPS developers may have write access to pull requests (if enabled by the submitter, which is the default), only the submitter or the assignee of a pull request should do so. During this period, the work_in_progress label may be applied to the pull request. The assignee gets to decide what happens to the pull request next, e.g. whether it should be assigned to a different developer for additional checks and changes, or is recommended to be merged. Removing the work_in_progress label and assigning the pull request to the developer tasked with merging signals that a pull request is ready to be merged. In addition, a ready_for_merge label may also be assigned to signal urgency to merge this pull request quickly.\n\n\n\nPeople can be assigned to review a pull request in two ways:\n\nThey can be assigned manually to review a pull request by the submitter or a LAMMPS developer\nThey can be automatically assigned, because a developer’s GitHub handle matches a file pattern in the .github/CODEOWNERS file, which associates developers with the code they contributed and maintain.\n\nReviewers are requested to state their appraisal of the proposed changes and either approve or request changes. People may unassign themselves from review, if they feel not competent about the changes proposed. At least two approvals from LAMMPS developers with write access are required before merging, in addition to passing all automated compilation and unit tests. Merging counts as implicit approval, so does submission of a pull request (by a LAMMPS developer). So the person doing the merge may not also submit an approving review. The GitHub feature, that reviews from code owners are “hard” reviews (i.e. they must all approve before merging is allowed), is currently disabled. It is in the discretion of the merge maintainer to assess when a sufficient degree of approval has been reached, especially from external collaborators. Reviews may be (automatically) dismissed, when the reviewed code has been changed. Review may be requested a second time.\n\n\n\nAll discussions about a pull request should be kept as much as possible on the pull request discussion page on GitHub, so that other developers can later review the entire discussion after the fact and understand the rationale behind choices that were made. Exceptions to this policy are technical discussions, that are centered on tools or policies themselves (git, GitHub, c++) rather than on the content of the pull request.\n\n\n\n\nThe GitHub issue tracker is the location where the LAMMPS developers and other contributors or LAMMPS users can report issues or bugs with the LAMMPS code or request new features to be added. Bug reports have a [Bug] marker in the subject line; suggestions for changes or adding new functionality are indicated by a [Feature Request] marker in the subject. This is automatically done when using the corresponding template for submitting an issue. Issues may be assigned to one or more developers, if they are working on this feature or working to resolve an issue. Issues that have nobody working on them at the moment, or in the near future, have the label volunteer needed attached.\nWhen an issue, say #125 is resolved by a specific pull request, the comment for the pull request shall contain the text closes #125 or fixes #125, so that the issue is automatically deleted when the pull request is merged. The template for pull requests includes a header where connections between pull requests and issues can be listed, and thus where this comment should be placed.\n\n\n\nLAMMPS uses a continuous release development model with incremental changes, i.e. significant effort is made – including automated pre-merge testing – that the code in the branch “develop” does not get easily broken. These tests are run after every update to a pull request. More extensive and time-consuming tests (including regression testing) are performed after code is merged to the “develop” branch. There are feature releases of LAMMPS made about every 4-8 weeks at a point, when the LAMMPS developers feel, that a sufficient number of changes have been included and all post-merge testing has been successful. These feature releases are marked with a patch_&lt;version date&gt; tag and the “release” branch follows only these versions with fast-forward merges. While “develop” may be temporarily broken through issues only detected by the post-merge tests, The “release” branch is always supposed to be of production quality.\nAbout once each year, there is a “stable” release of LAMMPS. These have seen additional, manual testing and review of results from testing with instrumented code and static code analysis. Also, the last few feature releases before a stable release are “release candidate” versions which only contain bug fixes, feature additions to peripheral functionality, and documentation updates. In between stable releases, bug fixes and infrastructure updates are back-ported from the “develop” branch to the “maintenance” branch and occasionally merged into “stable” and published as update releases.\n\n\n\nFor release planning and the information of code contributors, issues and pull requests are being managed with GitHub Project Boards. There are currently three boards: LAMMPS Feature Requests, LAMMPS Bug Reports, and LAMMPS Pull Requests. Each board is organized in columns where submissions are categorized. Within each column the entries are (manually) sorted according their priority."
  },
  {
    "objectID": "mylammps/doc/github-development-workflow.html#table-of-contents",
    "href": "mylammps/doc/github-development-workflow.html#table-of-contents",
    "title": "Outline of the GitHub Development Workflow",
    "section": "",
    "text": "GitHub Merge Management\nPull Requests\n\nPull Request Assignments\nPull Request Reviews\nPull Request Discussions\nChecklist for Pull Requests\n\nGitHub Issues\nMilestones and Release Planning"
  },
  {
    "objectID": "mylammps/doc/github-development-workflow.html#github-merge-management",
    "href": "mylammps/doc/github-development-workflow.html#github-merge-management",
    "title": "Outline of the GitHub Development Workflow",
    "section": "",
    "text": "In the interest of consistency, ONLY ONE of the core LAMMPS developers should do the merging. This is currently @akohlmey (Axel Kohlmeyer). If this assignment needs to be changed, it shall be done right after a stable release. If the currently assigned developer cannot merge outstanding pull requests in a timely manner, or in other extenuating circumstances, other core LAMMPS developers with merge permission may merge pull requests."
  },
  {
    "objectID": "mylammps/doc/github-development-workflow.html#pull-requests",
    "href": "mylammps/doc/github-development-workflow.html#pull-requests",
    "title": "Outline of the GitHub Development Workflow",
    "section": "",
    "text": "ALL changes to the LAMMPS code and documentation, however trivial, MUST be submitted as a pull request to GitHub. All changes to the “develop” branch must be made exclusively through merging pull requests. The “release” and “stable” branches, respectively, are only to be updated upon “feature releases” or “stable releases” based on the associated tags. Updates to the stable release in between stable releases (for example, back-ported bug fixes) are first merged into the “maintenance” branch and then into the “stable” branch as “stable update releases”.\nPull requests may also be submitted to (long-running) feature branches created by LAMMPS developers inside the LAMMPS project, if needed. Those are not subject to the merge and review restrictions discussed in this document, though, but get managed as needed on a case-by-case basis.\n\n\nPull requests can be “chaperoned” by one of the LAMMPS core developers. This is indicated by whom the pull request is assigned to. LAMMPS core developers can self-assign, or they can decide to assign a pull request to a different LAMMPS developer. Being assigned to a pull request means, that this pull request may need some work and the assignee is tasked to determine whether this might be needed or not. The assignee may either choose to implement required changes or ask the submitter of the pull request to implement them. Even though, all LAMMPS developers may have write access to pull requests (if enabled by the submitter, which is the default), only the submitter or the assignee of a pull request should do so. During this period, the work_in_progress label may be applied to the pull request. The assignee gets to decide what happens to the pull request next, e.g. whether it should be assigned to a different developer for additional checks and changes, or is recommended to be merged. Removing the work_in_progress label and assigning the pull request to the developer tasked with merging signals that a pull request is ready to be merged. In addition, a ready_for_merge label may also be assigned to signal urgency to merge this pull request quickly.\n\n\n\nPeople can be assigned to review a pull request in two ways:\n\nThey can be assigned manually to review a pull request by the submitter or a LAMMPS developer\nThey can be automatically assigned, because a developer’s GitHub handle matches a file pattern in the .github/CODEOWNERS file, which associates developers with the code they contributed and maintain.\n\nReviewers are requested to state their appraisal of the proposed changes and either approve or request changes. People may unassign themselves from review, if they feel not competent about the changes proposed. At least two approvals from LAMMPS developers with write access are required before merging, in addition to passing all automated compilation and unit tests. Merging counts as implicit approval, so does submission of a pull request (by a LAMMPS developer). So the person doing the merge may not also submit an approving review. The GitHub feature, that reviews from code owners are “hard” reviews (i.e. they must all approve before merging is allowed), is currently disabled. It is in the discretion of the merge maintainer to assess when a sufficient degree of approval has been reached, especially from external collaborators. Reviews may be (automatically) dismissed, when the reviewed code has been changed. Review may be requested a second time.\n\n\n\nAll discussions about a pull request should be kept as much as possible on the pull request discussion page on GitHub, so that other developers can later review the entire discussion after the fact and understand the rationale behind choices that were made. Exceptions to this policy are technical discussions, that are centered on tools or policies themselves (git, GitHub, c++) rather than on the content of the pull request."
  },
  {
    "objectID": "mylammps/doc/github-development-workflow.html#github-issues",
    "href": "mylammps/doc/github-development-workflow.html#github-issues",
    "title": "Outline of the GitHub Development Workflow",
    "section": "",
    "text": "The GitHub issue tracker is the location where the LAMMPS developers and other contributors or LAMMPS users can report issues or bugs with the LAMMPS code or request new features to be added. Bug reports have a [Bug] marker in the subject line; suggestions for changes or adding new functionality are indicated by a [Feature Request] marker in the subject. This is automatically done when using the corresponding template for submitting an issue. Issues may be assigned to one or more developers, if they are working on this feature or working to resolve an issue. Issues that have nobody working on them at the moment, or in the near future, have the label volunteer needed attached.\nWhen an issue, say #125 is resolved by a specific pull request, the comment for the pull request shall contain the text closes #125 or fixes #125, so that the issue is automatically deleted when the pull request is merged. The template for pull requests includes a header where connections between pull requests and issues can be listed, and thus where this comment should be placed."
  },
  {
    "objectID": "mylammps/doc/github-development-workflow.html#release-planning",
    "href": "mylammps/doc/github-development-workflow.html#release-planning",
    "title": "Outline of the GitHub Development Workflow",
    "section": "",
    "text": "LAMMPS uses a continuous release development model with incremental changes, i.e. significant effort is made – including automated pre-merge testing – that the code in the branch “develop” does not get easily broken. These tests are run after every update to a pull request. More extensive and time-consuming tests (including regression testing) are performed after code is merged to the “develop” branch. There are feature releases of LAMMPS made about every 4-8 weeks at a point, when the LAMMPS developers feel, that a sufficient number of changes have been included and all post-merge testing has been successful. These feature releases are marked with a patch_&lt;version date&gt; tag and the “release” branch follows only these versions with fast-forward merges. While “develop” may be temporarily broken through issues only detected by the post-merge tests, The “release” branch is always supposed to be of production quality.\nAbout once each year, there is a “stable” release of LAMMPS. These have seen additional, manual testing and review of results from testing with instrumented code and static code analysis. Also, the last few feature releases before a stable release are “release candidate” versions which only contain bug fixes, feature additions to peripheral functionality, and documentation updates. In between stable releases, bug fixes and infrastructure updates are back-ported from the “develop” branch to the “maintenance” branch and occasionally merged into “stable” and published as update releases."
  },
  {
    "objectID": "mylammps/doc/github-development-workflow.html#project-management",
    "href": "mylammps/doc/github-development-workflow.html#project-management",
    "title": "Outline of the GitHub Development Workflow",
    "section": "",
    "text": "For release planning and the information of code contributors, issues and pull requests are being managed with GitHub Project Boards. There are currently three boards: LAMMPS Feature Requests, LAMMPS Bug Reports, and LAMMPS Pull Requests. Each board is organized in columns where submissions are categorized. Within each column the entries are (manually) sorted according their priority."
  },
  {
    "objectID": "index.html#theme-showdown",
    "href": "index.html#theme-showdown",
    "title": "Purpose of this Website",
    "section": "Theme Showdown",
    "text": "Theme Showdown\nFrom a pool of 25 themes, the chosen ones are:\n• default\n• flatly\n• minty\n• sandstone\n• united\n• yeti\nCue the dramatic music…\nRound 1: flatly vs default\nWinner: flatly!\nRound 2: minty vs sandstone\nResult: A tie!\nRound 3: united vs yeti\nWinner: united!\n\n\nSemi-Finals\nMatch 1: flatly vs minty\nWinner: flatly (Minty was fresh, but flatly had the edge!)\nMatch 2: united vs sandstone\nWinner: united!\n\n\n\nFinal Round!\nflatly vs united\nWinner: flatly! More professional, less adorable. But honestly, united put up a cute fight.\nFor now, flatly reigns supreme… but united is right there, ready for a rematch."
  },
  {
    "objectID": "index.html#semi-finals",
    "href": "index.html#semi-finals",
    "title": "Project Description",
    "section": "Semi-Finals",
    "text": "Semi-Finals\nMatch 1: flatly vs minty\nWinner: flatly (Minty was fresh, but flatly had the edge!)\nMatch 2: united vs sandstone\nWinner: united!",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#final-round",
    "href": "index.html#final-round",
    "title": "Project Description",
    "section": "Final Round!",
    "text": "Final Round!\nflatly vs united\nWinner: flatly! More professional, less adorable. But honestly, united put up a cute fight.\nFor now, flatly reigns supreme… but united is right there, ready for a rematch.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "mylammps/python/examples/pylammps/dihedrals/dihedral.html",
    "href": "mylammps/python/examples/pylammps/dihedrals/dihedral.html",
    "title": "Validating a dihedral potential",
    "section": "",
    "text": "%matplotlib notebook\n\n\nimport matplotlib.pyplot as plt\n\n\nfrom lammps import IPyLammps\n\n\nL = IPyLammps()\n\n\nimport math\n\nL.units(\"real\")\nL.atom_style(\"molecular\")\n\nL.boundary(\"f f f\")\nL.neighbor(0.3, \"bin\")\n\nL.dihedral_style(\"harmonic\")\n\n\nL.read_data(\"data.dihedral\")\n\n\nL.pair_style(\"zero\", 5)\nL.pair_coeff(\"*\", \"*\")\n\n\nL.mass(1, 1.0)\n\n\nL.velocity(\"all\", \"set\", 0.0, 0.0, 0.0)\n\n\nL.run(0);\n\n\nL.image(zoom=1.0)\n\n\nL.atoms[3].position\n\n\nL.atoms[3].position = (1.0, 0.0, 1.0)\n\n\nL.image(zoom=1.0)\n\n\nL.eval(\"pe\")\n\n\nL.atoms[3].position = (1.0, 0.0, -1.0)\n\n\nL.run(0);\n\n\nphi = [d * math.pi / 180 for d in range(360)]\n\n\npos = [(1.0, math.cos(p), math.sin(p)) for p in phi]\n\n\nK = 80.0\nd = 1\nn = 2\nE_analytical = [K * (1 + d * math.cos(n*p)) for p in phi]\n\n\npe = []\nfor p in pos:\n    L.atoms[3].position = p\n    L.run(0);\n    pe.append(L.eval(\"pe\"))\n\n\nplt.plot(range(360), pe, range(360), E_analytical)\nplt.xlabel('angle')\nplt.ylabel('E')"
  },
  {
    "objectID": "mylammps/python/examples/pylammps/simple.html",
    "href": "mylammps/python/examples/pylammps/simple.html",
    "title": "Example 1: Using LAMMPS with PyLammps",
    "section": "",
    "text": "The LAMMPS Python package provides multiple interfaces. The PyLammps interface is a high-level abstration of the low-level lammps interface. IPyLammps further extends this interface with functions that are useful for Jupyter notebooks to enable embedding generated graphics and videos."
  },
  {
    "objectID": "mylammps/python/examples/pylammps/simple.html#prerequisites",
    "href": "mylammps/python/examples/pylammps/simple.html#prerequisites",
    "title": "Example 1: Using LAMMPS with PyLammps",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore Running this example, make sure your Python environment can find the LAMMPS shared library (liblammps.so) and the LAMMPS Python package is installed. If you followed the README in this folder, this should already be the case. You can also find more information about how to compile LAMMPS and install the LAMMPS Python package in the LAMMPS manual. There is also a dedicated PyLammps HowTo."
  },
  {
    "objectID": "mylammps/python/examples/pylammps/simple.html#creating-a-new-simulation",
    "href": "mylammps/python/examples/pylammps/simple.html#creating-a-new-simulation",
    "title": "Example 1: Using LAMMPS with PyLammps",
    "section": "Creating a new simulation",
    "text": "Creating a new simulation\nOnce the LAMMPS shared library and the LAMMPS Python package are installed, you can create a new LAMMMPS instance in your Python interpreter as follows:\n\nfrom lammps import IPyLammps\nL = IPyLammps()\n\nWith PyLammps/IPyLammps you can write LAMMPS simulations similar to the input script language. Take the following LAMMPS input script:\n# 3d Lennard-Jones melt\n\nunits        lj\natom_style   atomic\n\nlattice      fcc 0.8442\nregion       box block 0 4 0 4 0 4\ncreate_box   1 box\ncreate_atoms 1 box\nmass         1 1.0\n\nvelocity     all create 1.44 87287 loop geom\n\npair_style   lj/cut 2.5\npair_coeff   1 1 1.0 1.0 2.5\n\nneighbor     0.3 bin\nneigh_modify delay 0 every 20 check no\n\nfix          1 all nve\n\nthermo       50\nThe equivalent can be written with PyLammps/IPyLammps:\n\n# 3d Lennard-Jones melt\n\nL.units(\"lj\")\nL.atom_style(\"atomic\")\n\nL.lattice(\"fcc\", 0.8442)\nL.region(\"box\", \"block\", 0, 4, 0, 4, 0, 4)\nL.create_box(1, \"box\")\nL.create_atoms(1, \"box\")\nL.mass(1, 1.0)\n\nL.velocity(\"all\", \"create\", 1.44, 87287, \"loop geom\")\n\nL.pair_style(\"lj/cut\", 2.5)\nL.pair_coeff(1, 1, 1.0, 1.0, 2.5)\n\nL.neighbor(0.3, \"bin\")\nL.neigh_modify(\"delay\", 0, \"every\", 20, \"check no\")\n\nL.fix(\"1\", \"all\", \"nve\")\n\nL.thermo(50)"
  },
  {
    "objectID": "mylammps/python/examples/pylammps/simple.html#visualizing-the-initial-state",
    "href": "mylammps/python/examples/pylammps/simple.html#visualizing-the-initial-state",
    "title": "Example 1: Using LAMMPS with PyLammps",
    "section": "Visualizing the initial state",
    "text": "Visualizing the initial state\nIPyLammps allows you to visualize the current simulation state with the image command. Here we use it to create an image of the initial state of the system.\n\nL.image(zoom=1.0)"
  },
  {
    "objectID": "mylammps/python/examples/pylammps/simple.html#running-simulations",
    "href": "mylammps/python/examples/pylammps/simple.html#running-simulations",
    "title": "Example 1: Using LAMMPS with PyLammps",
    "section": "Running simulations",
    "text": "Running simulations\nUse the run command to start the simulation. In Jupyter the return value of the last command will be displayed. The run command will return the output of the simulation.\n\nL.run(150)\n\nYou can suppress it by adding a semicolon ;.\n\nL.run(100);\n\nVisualizing the system will now show us how the atoms have moved.\n\nL.image(zoom=1.0)"
  },
  {
    "objectID": "mylammps/python/examples/pylammps/simple.html#post-processing-thermo-output",
    "href": "mylammps/python/examples/pylammps/simple.html#post-processing-thermo-output",
    "title": "Example 1: Using LAMMPS with PyLammps",
    "section": "Post-processing thermo output",
    "text": "Post-processing thermo output\nIndependent of whether or not you suppress or show the output of the run command, PyLammps will record the output. Each run command creates a new entry in the L.runs list. So far our PyLammps instance L executed two run commands:\n\nlen(L.runs)\n\nEach entry contains information about the simulation run, including the thermo output for the printed out time steps.\n# thermo output of a LAMMPS simulation run\nStep Temp E_pair E_mol TotEng Press\n       0         1.44   -6.7733681            0   -4.6218056   -5.0244179\n      50   0.70303849   -5.6796164            0    -4.629178   0.50453907\n     100   0.72628044   -5.7150774            0   -4.6299123   0.29765862\n     150   0.78441711    -5.805142            0   -4.6331125 -0.086709661\nPyLammps already parses this information and makes it available as dictionaries and arrays.\n\nL.runs[0]\n\n\nL.runs[1]\n\nFor example, the first run was 150 time steps, with printing out a line every 50 steps. You can access the list of time steps using {entry}.thermo.Step.\n\nL.runs[0].thermo.Step\n\nThe corresponding values of each thermo quantity are also accessed this way:\n\nL.runs[0].thermo.TotEng\n\nTogether you can use this information to run post-processing on these values or even plot it using matplotlib:\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\nplt.xlabel('time step')\nplt.ylabel('Total Energy')\nplt.plot(L.runs[0].thermo.Step, L.runs[0].thermo.TotEng)"
  },
  {
    "objectID": "mylammps/python/examples/pylammps/interface_usage_bonds.html",
    "href": "mylammps/python/examples/pylammps/interface_usage_bonds.html",
    "title": "Example 3: 2D circle of particles inside of box with LJ walls",
    "section": "",
    "text": "Before running this example, make sure your Python environment can find the LAMMPS shared library (liblammps.so) and the LAMMPS Python package is installed. If you followed the README in this folder, this should already be the case. You can also find more information about how to compile LAMMPS and install the LAMMPS Python package in the LAMMPS manual. There is also a dedicated PyLammps HowTo."
  },
  {
    "objectID": "mylammps/python/examples/pylammps/interface_usage_bonds.html#prerequisites",
    "href": "mylammps/python/examples/pylammps/interface_usage_bonds.html#prerequisites",
    "title": "Example 3: 2D circle of particles inside of box with LJ walls",
    "section": "",
    "text": "Before running this example, make sure your Python environment can find the LAMMPS shared library (liblammps.so) and the LAMMPS Python package is installed. If you followed the README in this folder, this should already be the case. You can also find more information about how to compile LAMMPS and install the LAMMPS Python package in the LAMMPS manual. There is also a dedicated PyLammps HowTo."
  },
  {
    "objectID": "mylammps/python/examples/pylammps/interface_usage_bonds.html#setup-system",
    "href": "mylammps/python/examples/pylammps/interface_usage_bonds.html#setup-system",
    "title": "Example 3: 2D circle of particles inside of box with LJ walls",
    "section": "Setup system",
    "text": "Setup system\n\nfrom lammps import IPyLammps\n\n\nL = IPyLammps()\n\n\n# 2d circle of particles inside a box with LJ walls\nimport math\n\nb = 0\nx = 50\ny = 20\nd = 20\n\n# careful not to slam into wall too hard\n\nv = 0.3\nw = 0.08\n                \nL.units(\"lj\")\nL.dimension(2)\nL.atom_style(\"bond\")\nL.boundary(\"f f p\")\n\nL.lattice(\"hex\", 0.85)\nL.region(\"box\", \"block\", 0, x, 0, y, -0.5, 0.5)\nL.create_box(1, \"box\", \"bond/types\", 1, \"extra/bond/per/atom\", 6)\nL.region(\"circle\", \"sphere\", d/2.0+1.0, d/2.0/math.sqrt(3.0)+1, 0.0, d/2.0)\nL.create_atoms(1, \"region\", \"circle\")\nL.mass(1, 1.0)\n\nL.velocity(\"all create 0.5 87287 loop geom\")\nL.velocity(\"all set\", v, w, 0, \"sum yes\")\n\nL.pair_style(\"lj/cut\", 2.5)\nL.pair_coeff(1, 1, 10.0, 1.0, 2.5)\n\nL.bond_style(\"harmonic\")\nL.bond_coeff(1, 10.0, 1.2)\n\nL.create_bonds(\"many\", \"all\", \"all\", 1, 1.0, 1.5)\n\nL.neighbor(0.3, \"bin\")\nL.neigh_modify(\"delay\", 0, \"every\", 1, \"check yes\")\n\nL.fix(1, \"all\", \"nve\")\n\nL.fix(2, \"all wall/lj93 xlo 0.0 1 1 2.5 xhi\", x, \"1 1 2.5\")\nL.fix(3, \"all wall/lj93 ylo 0.0 1 1 2.5 yhi\", y, \"1 1 2.5\")"
  },
  {
    "objectID": "mylammps/python/examples/pylammps/interface_usage_bonds.html#visualize-initial-state",
    "href": "mylammps/python/examples/pylammps/interface_usage_bonds.html#visualize-initial-state",
    "title": "Example 3: 2D circle of particles inside of box with LJ walls",
    "section": "Visualize initial state",
    "text": "Visualize initial state\n\nL.image(zoom=1.8)"
  },
  {
    "objectID": "mylammps/python/examples/pylammps/interface_usage_bonds.html#run-simulation-and-visualize-new-state",
    "href": "mylammps/python/examples/pylammps/interface_usage_bonds.html#run-simulation-and-visualize-new-state",
    "title": "Example 3: 2D circle of particles inside of box with LJ walls",
    "section": "Run simulation and visualize new state",
    "text": "Run simulation and visualize new state\n\nL.thermo_style(\"custom step temp epair press\")\nL.thermo(100)\noutput = L.run(40000)\nL.image(zoom=1.8)"
  },
  {
    "objectID": "mylammps/python/examples/pylammps/interface_usage_bonds.html#queries-about-lammps-simulation",
    "href": "mylammps/python/examples/pylammps/interface_usage_bonds.html#queries-about-lammps-simulation",
    "title": "Example 3: 2D circle of particles inside of box with LJ walls",
    "section": "Queries about LAMMPS simulation",
    "text": "Queries about LAMMPS simulation\n\nL.system\n\n\nL.system.natoms\n\n\nL.system.nbonds\n\n\nL.system.nbondtypes\n\n\nL.communication\n\n\nL.fixes\n\n\nL.computes\n\n\nL.dumps\n\n\nL.groups"
  },
  {
    "objectID": "mylammps/python/examples/pylammps/interface_usage_bonds.html#working-with-lammps-variables",
    "href": "mylammps/python/examples/pylammps/interface_usage_bonds.html#working-with-lammps-variables",
    "title": "Example 3: 2D circle of particles inside of box with LJ walls",
    "section": "Working with LAMMPS Variables",
    "text": "Working with LAMMPS Variables\n\nL.variable(\"a index 2\")\n\n\nL.variables\n\n\nL.variable(\"t equal temp\")\n\n\nL.variables\n\n\nimport sys\n\nif sys.version_info &lt; (3, 0):\n    # In Python 2 'print' is a restricted keyword, which is why you have to use the lmp_print function instead.\n    x = float(L.lmp_print('\"${a}\"'))\nelse:\n    # In Python 3 the print function can be redefined.\n    # x = float(L.print('\"${a}\"')\")\n    \n    # To avoid a syntax error in Python 2 executions of this notebook, this line is packed into an eval statement\n    x = float(eval(\"L.print('\\\"${a}\\\"')\"))\nx\n\n\nL.variables['t'].value\n\n\nL.eval(\"v_t/2.0\")\n\n\nL.variable(\"b index a b c\")\n\n\nL.variables['b'].value\n\n\nL.eval(\"v_b\")\n\n\nL.variables['b'].definition\n\n\nL.variable(\"i loop 10\")\n\n\nL.variables['i'].value\n\n\nL.next(\"i\")\nL.variables['i'].value\n\n\nL.eval(\"ke\")"
  },
  {
    "objectID": "mylammps/python/examples/pylammps/interface_usage_bonds.html#accessing-atom-data",
    "href": "mylammps/python/examples/pylammps/interface_usage_bonds.html#accessing-atom-data",
    "title": "Example 3: 2D circle of particles inside of box with LJ walls",
    "section": "Accessing Atom data",
    "text": "Accessing Atom data\n\nL.atoms[0]\n\n\ndir(L.atoms[0])\n\n\nL.atoms[0].position\n\n\nL.atoms[0].id\n\n\nL.atoms[0].velocity\n\n\nL.atoms[0].force\n\n\nL.atoms[0].type"
  },
  {
    "objectID": "mylammps/tools/lammps-gui/TODO.html",
    "href": "mylammps/tools/lammps-gui/TODO.html",
    "title": "Short term goals (v1.x)",
    "section": "",
    "text": "LAMMPS-GUI TODO list:\n\nShort term goals (v1.x)\n\nimplement a timed “Auto-Save” feature that saves after some idle time. set timeout in Editor preferences.\nadd a “Filter data” checkbox to the “Charts” window to select whether data should be dropped.\nadd a “Charts tab” to the preferences with the following (default) settings:\n\ndefault filter data yes/no\ndefault smooth parameters\ndefault plot colors\nenable “raw” or “smooth” or “both”\n\nadd QLineEdit field to enter plot title\nadd a “Colors” menu to the image viewer to adjust color settings for the current image (unlike the defaults in the perferences) including assigning colors to individual atom types.\nSupport color by property (e.g. scan computes or fixes with per-atom data), define colormaps etc.\nAdd a “Diameters” dialog where diamaters can by specified by atom type\nfigure out how widgets can be resized to fraction of available screen size.\nfigure out stacking order of frames and whether it can be more flexible\nimplement indenting regions for (nested) loops?\nimplement data file manager GUI with the following features:\n\nimport coordinates and topology via VMD molfile plugins\nimport coordinates and topology from intermol\nimport coordinates and topology from OpenBabel\nstore data internally in a generalized YAML format\nadd/remove columns to per-atom data\nchange atom style for export to data file\nmerge one system to another\nedit mapping between numeric and symbolic types. create labelmaps.\nimport/export LAMMPS data and molecule files\nstore coordinates internally as unwrapped coordinates\nrecenter coordinates\nedit box boundaries\nreadjust box to extent of atoms (with or without estimated radius)\ncall to LAMMPS to create geometries from lattices (with/without molecule files) and STL files\ncall to LAMMPS to generate visualizations of geometries\nedit force field parameters, e.g. apply charmm\nedit / manage labelmap\n\n\n\n\nLong term ideas (v2.x)\n\nrewrite entire application to build the App and its layout manually\nalso a rewrite should establish consistent naming conventions. now we have a mix of LAMMPS style, Qt style, and others.\nadd option to attach a debugger to the running program (highly non-portable, need customization support in preferences)\nwrite a “wizard” dialog that can be used for beginners to create an input file template for a few typical use scenarios (could perhaps use some LLM based KI to look up suggestions for answers?)."
  },
  {
    "objectID": "mylammps/python/examples/pylammps/interface_usage.html",
    "href": "mylammps/python/examples/pylammps/interface_usage.html",
    "title": "Example 2: Using the PyLammps interface",
    "section": "",
    "text": "Before running this example, make sure your Python environment can find the LAMMPS shared library (liblammps.so) and the LAMMPS Python package is installed. If you followed the README in this folder, this should already be the case. You can also find more information about how to compile LAMMPS and install the LAMMPS Python package in the LAMMPS manual. There is also a dedicated PyLammps HowTo."
  },
  {
    "objectID": "mylammps/python/examples/pylammps/interface_usage.html#prerequisites",
    "href": "mylammps/python/examples/pylammps/interface_usage.html#prerequisites",
    "title": "Example 2: Using the PyLammps interface",
    "section": "",
    "text": "Before running this example, make sure your Python environment can find the LAMMPS shared library (liblammps.so) and the LAMMPS Python package is installed. If you followed the README in this folder, this should already be the case. You can also find more information about how to compile LAMMPS and install the LAMMPS Python package in the LAMMPS manual. There is also a dedicated PyLammps HowTo."
  },
  {
    "objectID": "mylammps/python/examples/pylammps/interface_usage.html#setup-system",
    "href": "mylammps/python/examples/pylammps/interface_usage.html#setup-system",
    "title": "Example 2: Using the PyLammps interface",
    "section": "Setup system",
    "text": "Setup system\n\nfrom lammps import IPyLammps\n\n\nL = IPyLammps()\n\n\n# 3d Lennard-Jones melt\nL.units(\"lj\")\nL.atom_style(\"atomic\")\nL.atom_modify(\"map array\")\n\nL.lattice(\"fcc\", 0.8442)\nL.region(\"box block\", 0, 4, 0, 4, 0, 4)\nL.create_box(1, \"box\")\nL.create_atoms(1, \"box\")\nL.mass(1, 1.0)\n\nL.velocity(\"all create\", 1.44, 87287, \"loop geom\")\n\nL.pair_style(\"lj/cut\", 2.5)\nL.pair_coeff(1, 1, 1.0, 1.0, 2.5)\n\nL.neighbor(0.3, \"bin\")\nL.neigh_modify(\"delay 0 every 20 check no\")\n\nL.fix(\"1 all nve\")\n\nL.variable(\"fx atom fx\")\n\nL.run(10)"
  },
  {
    "objectID": "mylammps/python/examples/pylammps/interface_usage.html#visualize-the-initial-state",
    "href": "mylammps/python/examples/pylammps/interface_usage.html#visualize-the-initial-state",
    "title": "Example 2: Using the PyLammps interface",
    "section": "Visualize the initial state",
    "text": "Visualize the initial state\n\nL.image(zoom=1)"
  },
  {
    "objectID": "mylammps/python/examples/pylammps/interface_usage.html#queries-about-lammps-simulation",
    "href": "mylammps/python/examples/pylammps/interface_usage.html#queries-about-lammps-simulation",
    "title": "Example 2: Using the PyLammps interface",
    "section": "Queries about LAMMPS simulation",
    "text": "Queries about LAMMPS simulation\n\nL.system\n\n\nL.system.natoms\n\n\nL.communication\n\n\nL.fixes\n\n\nL.computes\n\n\nL.dumps\n\n\nL.groups"
  },
  {
    "objectID": "mylammps/python/examples/pylammps/interface_usage.html#working-with-lammps-variables",
    "href": "mylammps/python/examples/pylammps/interface_usage.html#working-with-lammps-variables",
    "title": "Example 2: Using the PyLammps interface",
    "section": "Working with LAMMPS Variables",
    "text": "Working with LAMMPS Variables\n\nL.variable(\"a index 2\")\n\n\nL.variables\n\n\nL.variable(\"t equal temp\")\n\n\nL.variables\n\n\nimport sys\n\nif sys.version_info &lt; (3, 0):\n    # In Python 2 'print' is a restricted keyword, which is why you have to use the lmp_print function instead.\n    x = float(L.lmp_print('\"${a}\"'))\nelse:\n    # In Python 3 the print function can be redefined.\n    # x = float(L.print('\"${a}\"')\")\n    \n    # To avoid a syntax error in Python 2 executions of this notebook, this line is packed into an eval statement\n    x = float(eval(\"L.print('\\\"${a}\\\"')\"))\nx\n\n\nL.variables['t'].value\n\n\nL.eval(\"v_t/2.0\")\n\n\nL.variable(\"b index a b c\")\n\n\nL.variables['b'].value\n\n\nL.eval(\"v_b\")\n\n\nL.variables['b'].definition\n\n\nL.lmp.command('variable i loop 10')\n\n\nL.variable(\"i loop 10\")\n\n\nL.variables['i'].value\n\n\nL.next(\"i\")\nL.variables['i'].value\n\n\nL.eval(\"ke\")"
  },
  {
    "objectID": "mylammps/python/examples/pylammps/interface_usage.html#accessing-atom-data",
    "href": "mylammps/python/examples/pylammps/interface_usage.html#accessing-atom-data",
    "title": "Example 2: Using the PyLammps interface",
    "section": "Accessing Atom data",
    "text": "Accessing Atom data\n\nL.atoms[0]\n\n\ndir(L.atoms[0])\n\n\nL.atoms[0].position\n\n\nL.atoms[0].id\n\n\nL.atoms[0].velocity\n\n\nL.atoms[0].force\n\n\nL.atoms[0].type\n\n\nL.variables['fx'].value"
  },
  {
    "objectID": "mylammps/python/examples/pylammps/interface_usage.html#accessing-thermo-data",
    "href": "mylammps/python/examples/pylammps/interface_usage.html#accessing-thermo-data",
    "title": "Example 2: Using the PyLammps interface",
    "section": "Accessing thermo data",
    "text": "Accessing thermo data\n\nL.runs\n\n\nL.runs[0]\n\n\nL.runs[0].thermo\n\n\nL.runs[0].thermo\n\n\ndir(L.runs[0].thermo)"
  },
  {
    "objectID": "mylammps/python/examples/pylammps/interface_usage.html#saving-session-to-as-lammps-input-file",
    "href": "mylammps/python/examples/pylammps/interface_usage.html#saving-session-to-as-lammps-input-file",
    "title": "Example 2: Using the PyLammps interface",
    "section": "Saving session to as LAMMPS input file",
    "text": "Saving session to as LAMMPS input file\nPyLammps can keep track of all LAMMPS commands that are executed. This allows you to prototype a script and then later on save it as a regular input script:\n\nL = IPyLammps()\n\n# enable command history\nL.enable_cmd_history = True\n\n# 3d Lennard-Jones melt\nL.units(\"lj\")\nL.atom_style(\"atomic\")\nL.atom_modify(\"map array\")\n\nL.lattice(\"fcc\", 0.8442)\nL.region(\"box block\", 0, 4, 0, 4, 0, 4)\nL.create_box(1, \"box\")\nL.create_atoms(1, \"box\")\nL.mass(1, 1.0)\n\nL.velocity(\"all create\", 1.44, 87287, \"loop geom\")\n\nL.pair_style(\"lj/cut\", 2.5)\nL.pair_coeff(1, 1, 1.0, 1.0, 2.5)\n\nL.neighbor(0.3, \"bin\")\nL.neigh_modify(\"delay 0 every 20 check no\")\n\nL.fix(\"1 all nve\")\n\nL.run(10)\n\n# write LAMMPS input script with all commands executed so far (including implicit ones)\nL.write_script(\"in.output\")\n\n\n!cat in.output"
  },
  {
    "objectID": "mylammps/python/examples/pylammps/montecarlo/mc.html",
    "href": "mylammps/python/examples/pylammps/montecarlo/mc.html",
    "title": "Monte Carlo Relaxation",
    "section": "",
    "text": "from __future__ import print_function\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport random, math"
  },
  {
    "objectID": "mylammps/python/examples/pylammps/montecarlo/mc.html#setup-perfect-system",
    "href": "mylammps/python/examples/pylammps/montecarlo/mc.html#setup-perfect-system",
    "title": "Monte Carlo Relaxation",
    "section": "Setup perfect system",
    "text": "Setup perfect system\n\nfrom lammps import IPyLammps\n\n\nL = IPyLammps()\n\n\nL.units(\"lj\")\nL.atom_style(\"atomic\")\nL.atom_modify(\"map array sort\", 0, 0.0)\n\nL.dimension(2)\n\nL.lattice(\"hex\", 1.0)\nL.region(\"box block\", 0, 10, 0, 5, -0.5, 0.5)\n\nL.create_box(1, \"box\")\nL.create_atoms(1, \"box\")\nL.mass(1, 1.0)\n\nL.pair_style(\"lj/cut\", 2.5)\nL.pair_coeff(1, 1, 1.0, 1.0, 2.5)\nL.pair_modify(\"shift\", \"yes\")\n\nL.neighbor(0.3, \"bin\")\nL.neigh_modify(\"delay\", 0, \"every\", 1, \"check\", \"yes\")\n\n\nL.image(zoom=1.6)\n\n\nL.run(0);\n\n\nemin = L.eval(\"pe\")\n\n\nL.dump(\"3 all movie 25 movie.mp4 type type zoom 1.6 adiam 1.0\")"
  },
  {
    "objectID": "mylammps/python/examples/pylammps/montecarlo/mc.html#disorder-system",
    "href": "mylammps/python/examples/pylammps/montecarlo/mc.html#disorder-system",
    "title": "Monte Carlo Relaxation",
    "section": "Disorder system",
    "text": "Disorder system\n\nrandom.seed(27848)\ndeltaperturb = 0.2\n\n\nfor i in range(L.system.natoms):\n    x, y = L.atoms[i].position\n    dx = deltaperturb * random.uniform(-1, 1)\n    dy = deltaperturb * random.uniform(-1, 1)\n    L.atoms[i].position = (x+dx, y+dy)\n\n\nL.run(0);\n\n\nL.image(zoom=1.6)"
  },
  {
    "objectID": "mylammps/python/examples/pylammps/montecarlo/mc.html#minimize-using-monte-carlo-moves",
    "href": "mylammps/python/examples/pylammps/montecarlo/mc.html#minimize-using-monte-carlo-moves",
    "title": "Monte Carlo Relaxation",
    "section": "Minimize using Monte Carlo moves",
    "text": "Minimize using Monte Carlo moves\n\nestart = L.eval(\"pe\")\nelast = estart\n\n\nnaccept = 0\n\n\nenergies = [estart]\n\n\nniterations = 3000\ndeltamove = 0.1\nkT = 0.05\n\n\nnatoms = L.system.natoms\n\nfor i in range(niterations):\n    iatom = random.randrange(0, natoms)\n    current_atom = L.atoms[iatom]\n    \n    x0, y0 = current_atom.position\n    \n    dx = deltamove * random.uniform(-1, 1)\n    dy = deltamove * random.uniform(-1, 1)\n    \n    current_atom.position = (x0+dx, y0+dy)\n    \n    L.run(1, \"pre no post no\")\n    \n    e = L.eval(\"pe\")\n    energies.append(e)\n    \n    if e &lt;= elast:\n        naccept += 1\n        elast = e\n    elif random.random() &lt;= math.exp(natoms*(elast-e)/kT):\n        naccept += 1\n        elast = e\n    else:\n        current_atom.position = (x0, y0)\n\n\nplt.xlabel('iteration')\nplt.ylabel('potential energy')\nplt.plot(energies)\n\n\nL.eval(\"pe\")\n\n\nemin\n\n\nestart\n\n\nnaccept\n\n\nL.image(zoom=1.6)\n\n\n# close dump file to access it\nL.undump(3)\n\n\nL.video(\"movie.mp4\")"
  },
  {
    "objectID": "hello.html",
    "href": "hello.html",
    "title": "Basics & Computations",
    "section": "",
    "text": "For a demonstration of a line plot on a polar axis, see Figure 1.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1: A line plot on a polar axis",
    "crumbs": [
      "Project Notes",
      "Quarto Tutorial",
      "Basics & Computations"
    ]
  },
  {
    "objectID": "hello.html#numpy",
    "href": "hello.html#numpy",
    "title": "Basics & Computations",
    "section": "NumPy",
    "text": "NumPy\n\n\nCode\nimport numpy as np\na = np.arange(15).reshape(3, 5)\na\n\n\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14]])",
    "crumbs": [
      "Project Notes",
      "Quarto Tutorial",
      "Basics & Computations"
    ]
  },
  {
    "objectID": "hello.html#matplotlib",
    "href": "hello.html#matplotlib",
    "title": "Basics & Computations",
    "section": "Matplotlib",
    "text": "Matplotlib\n\n\nCode\nfig = plt.figure()\n# fig.set_size_inches(12, 7)\nx = np.arange(10)\ny = 2.5 * np.sin(x / 20 * np.pi)\nyerr = np.linspace(0.05, 0.2, 10)\n\nplt.errorbar(x, y + 3, yerr=yerr, label='both limits (default)')\nplt.errorbar(x, y + 2, yerr=yerr, uplims=True, label='uplims=True')\nplt.errorbar(x, y + 1, yerr=yerr, uplims=True, lolims=True,\n             label='uplims=True, lolims=True')\n\nupperlimits = [True, False] * 5\nlowerlimits = [False, True] * 5\nplt.errorbar(x, y, yerr=yerr, uplims=upperlimits, lolims=lowerlimits,\n             label='subsets of uplims and lolims')\n\nplt.legend(loc='lower right')\nplt.show(fig)\n\n\n\n\n\n\n\n\nFigure 2: Errorbar limit selector",
    "crumbs": [
      "Project Notes",
      "Quarto Tutorial",
      "Basics & Computations"
    ]
  },
  {
    "objectID": "hello.html#plotly",
    "href": "hello.html#plotly",
    "title": "Basics & Computations",
    "section": "Plotly",
    "text": "Plotly\n\nCode\nimport plotly.express as px\nimport plotly.io as pio\ngapminder = px.data.gapminder()\ndef gapminder_plot(year):\n    gapminderYear = gapminder.query(\"year == \" + \n                                    str(year))\n    fig = px.scatter(gapminderYear, \n                     x=\"gdpPercap\", y=\"lifeExp\",\n                     size=\"pop\", size_max=60,\n                     hover_name=\"country\")\n    fig.show()\n    \ngapminder_plot(1957)\ngapminder_plot(2007)\n\n\n\n\n\n\n\n\n\n                                                \n\n\n(a) Gapminder: 1957\n\n\n\n\n\n\n\n\n                                                \n\n\n(b) Gapminder: 2007\n\n\n\n\n\n\n\nFigure 3: Life Expectancy and GDP",
    "crumbs": [
      "Project Notes",
      "Quarto Tutorial",
      "Basics & Computations"
    ]
  },
  {
    "objectID": "reading.html",
    "href": "reading.html",
    "title": "List of My Reading",
    "section": "",
    "text": "By James Ladyman and Karoline Wiesner\nMy final-year MSci project involved the study of a complex system, foreign exchange markets. Each individual currency was treated as a spin in the Ising model, and by applying E.T. Jaynes’s principle of maximum entropy, we discovered the structure of interactions between these entities. Remarkably, this simple model of magnetism can also describe the phase transitions of liquid-gas systems, as they fall into the same universality class. This model has even been extended to study how critical our brain is, giving rise to the field of the critical brain hypothesis. Therefore, many ideas during my research project were derived from neuroscience papers. The financial market and the brain: both are complex systems.\nAbout a year ago, I read a paper published by James Ladyman, a professor of philosophy of science at Bristol, titled ‘What is a Complex System?’ (Ladyman, Lambert, and Wiesner 2013). As I started my PhD at Bristol, my second supervisor, Francesco, mentioned that he also published a book about complexity. It became clear to me that I should read this book.\n\nLadyman, James, James Lambert, and Karoline Wiesner. 2013. “What Is a Complex System?” European Journal for Philosophy of Science 3: 33–67.\nChapter 1 presents The Truisms of Complexity Science as follows:\n1. More is different.\n2. Nonliving systems can generate order.\n3. Complexity can come from simplicity.\n4. Coordinated behaviour does not require an overall controller.\n5. Complex systems are often modelled as networks or information processing systems.\n6. There are various kinds of invariance and forms of universal behaviour in complex systems.\n7. Complexity science is computational and probabilistic.\n8. Complexity science involves multiple disciplines.\n9. There is a difference between the order that complex systems produce and the order of the complex systems themselves.\nFeatures that are necessary and sufficient for which kinds of complexity and complex system are as follows:\n1. Numerosity: complex systems involve many interactions among many components.\n2. Disorder and diversity: the interactions in a complex system are not coordinated or controlled centrally, and the components may differ.\n3. Feedback: the interactions in complex systems are iterated so that there is feedback from previous interactions on a time scale relevant to the system’s emergent dynamics.\n4. Non-equilibrium: complex systems are open to the environment and are often driven by something external.\n5. Spontaneous order and self-organisation: complex systems exhibit structure and order that arises out of the interactions among their parts.\n6. Nonlinearity: complex systems exhibit nonlinear dependence on parameters or external drivers.\n7. Robustness: the structure and function of complex systems is stable under relevant perturbations.\n8. Nested structure and modularity: there may be multiple scales of structure, clustering and specialisation of function in complex systems.\n9. History and memory: complex systems often require a very long history to exist and often store information about history.\n10. Adaptive behaviour: complex systems are often able to modify their behaviour depending on the state of the environment and the predictions they make about it.\n\n2024/9/27\nReading What is a Complex System? by James Ladyman and Karoline Wiesner. The purpose of reading is to understand how systems out of thermodynamic equilibrium (a feature of complex systems) relate to a wide range of concepts associated with complexity.\n• There was a video that helped clarify what is meant by a Markov chain and a stochastic process being stationary: Markov Chains Clearly Explained! Part - 1. His other videos are helpful as well. For example, when I saw \\(P_{ij}^{(n)} = A_{ij}^n\\) from the n-Step Transition Matrix video (Part 3), it was quite surprising. However, the Part 5 video on hidden Markov models wasn’t very helpful, but reading the appendix in the book was sufficient.\n• What I’ve felt from reading this book (currently at p.90) is that it presents a lot of different ideas and has interesting discussions on the history of science, but I only seem to get excited when it starts mentioning the brain. I’m not sure if I’m necessarily interested in quantifying complexity. From the Apple notes on 28/9/2024:\nAs I’m reading through What is a Complex System?, it seems that the description of a complex system arises as we have more representations at different scales of analysis. The concept of ‘complexity’ was destined to arise as the scientific era evolved.\nNon-equilibrium systems arise because we define what systems are in thermodynamic equilibrium, which are idealisations.\nThings that fail to be idealised fall into this dualistic concept: non-equilibrium.\n\n2024/10/3\nIt took about two weeks to finish this book. It was an accessible read until I reached chapter 4, which was Measuring Features of Complex Systems. In the end, I’m glad that I read it, even though I somehow felt rushed to finish as there were other responsibilities to manage continuously, such as setting up clusters for my university Mac, teaching, office setup, etc. Most importantly, from now on, I am going to focus on reading material that is directly related to my project since it may give the impression to my supervisors that I’m not working hard. Reading a book like this takes a long time, as there are many new terms I had not encountered before.\nAnyway, it was a good read. Would I buy a physical copy for myself? Maybe not, but it was a good one.",
    "crumbs": [
      "Project Notes",
      "List of My Reading"
    ]
  },
  {
    "objectID": "reading.html#what-is-a-complex-system",
    "href": "reading.html#what-is-a-complex-system",
    "title": "List of My Reading",
    "section": "",
    "text": "By James Ladyman and Karoline Wiesner\nMy final-year MSci project involved the study of a complex system, foreign exchange markets. Each individual currency was treated as a spin in the Ising model, and by applying E.T. Jaynes’s principle of maximum entropy, we discovered the structure of interactions between these entities. Remarkably, this simple model of magnetism can also describe the phase transitions of liquid-gas systems, as they fall into the same universality class. This model has even been extended to study how critical our brain is, giving rise to the field of the critical brain hypothesis. Therefore, many ideas during my research project were derived from neuroscience papers. The financial market and the brain: both are complex systems.\nAbout a year ago, I read a paper published by James Ladyman, a professor of philosophy of science at Bristol, titled ‘What is a Complex System?’ (Ladyman, Lambert, and Wiesner 2013). As I started my PhD at Bristol, my second supervisor, Francesco, mentioned that he also published a book about complexity. It became clear to me that I should read this book.\n\nLadyman, James, James Lambert, and Karoline Wiesner. 2013. “What Is a Complex System?” European Journal for Philosophy of Science 3: 33–67.\nChapter 1 presents The Truisms of Complexity Science as follows:\n1. More is different.\n2. Nonliving systems can generate order.\n3. Complexity can come from simplicity.\n4. Coordinated behaviour does not require an overall controller.\n5. Complex systems are often modelled as networks or information processing systems.\n6. There are various kinds of invariance and forms of universal behaviour in complex systems.\n7. Complexity science is computational and probabilistic.\n8. Complexity science involves multiple disciplines.\n9. There is a difference between the order that complex systems produce and the order of the complex systems themselves.\nFeatures that are necessary and sufficient for which kinds of complexity and complex system are as follows:\n1. Numerosity: complex systems involve many interactions among many components.\n2. Disorder and diversity: the interactions in a complex system are not coordinated or controlled centrally, and the components may differ.\n3. Feedback: the interactions in complex systems are iterated so that there is feedback from previous interactions on a time scale relevant to the system’s emergent dynamics.\n4. Non-equilibrium: complex systems are open to the environment and are often driven by something external.\n5. Spontaneous order and self-organisation: complex systems exhibit structure and order that arises out of the interactions among their parts.\n6. Nonlinearity: complex systems exhibit nonlinear dependence on parameters or external drivers.\n7. Robustness: the structure and function of complex systems is stable under relevant perturbations.\n8. Nested structure and modularity: there may be multiple scales of structure, clustering and specialisation of function in complex systems.\n9. History and memory: complex systems often require a very long history to exist and often store information about history.\n10. Adaptive behaviour: complex systems are often able to modify their behaviour depending on the state of the environment and the predictions they make about it.\n\n2024/9/27\nReading What is a Complex System? by James Ladyman and Karoline Wiesner. The purpose of reading is to understand how systems out of thermodynamic equilibrium (a feature of complex systems) relate to a wide range of concepts associated with complexity.\n• There was a video that helped clarify what is meant by a Markov chain and a stochastic process being stationary: Markov Chains Clearly Explained! Part - 1. His other videos are helpful as well. For example, when I saw \\(P_{ij}^{(n)} = A_{ij}^n\\) from the n-Step Transition Matrix video (Part 3), it was quite surprising. However, the Part 5 video on hidden Markov models wasn’t very helpful, but reading the appendix in the book was sufficient.\n• What I’ve felt from reading this book (currently at p.90) is that it presents a lot of different ideas and has interesting discussions on the history of science, but I only seem to get excited when it starts mentioning the brain. I’m not sure if I’m necessarily interested in quantifying complexity. From the Apple notes on 28/9/2024:\nAs I’m reading through What is a Complex System?, it seems that the description of a complex system arises as we have more representations at different scales of analysis. The concept of ‘complexity’ was destined to arise as the scientific era evolved.\nNon-equilibrium systems arise because we define what systems are in thermodynamic equilibrium, which are idealisations.\nThings that fail to be idealised fall into this dualistic concept: non-equilibrium.\n\n2024/10/3\nIt took about two weeks to finish this book. It was an accessible read until I reached chapter 4, which was Measuring Features of Complex Systems. In the end, I’m glad that I read it, even though I somehow felt rushed to finish as there were other responsibilities to manage continuously, such as setting up clusters for my university Mac, teaching, office setup, etc. Most importantly, from now on, I am going to focus on reading material that is directly related to my project since it may give the impression to my supervisors that I’m not working hard. Reading a book like this takes a long time, as there are many new terms I had not encountered before.\nAnyway, it was a good read. Would I buy a physical copy for myself? Maybe not, but it was a good one.",
    "crumbs": [
      "Project Notes",
      "List of My Reading"
    ]
  },
  {
    "objectID": "reading.html#section",
    "href": "reading.html#section",
    "title": "List of my reading during PhD",
    "section": "",
    "text": "Reading What is a Complex System? by James Ladyman and Karoline Wiesner. The purpose of reading is to understand how systems out of thermodynamic equilibrium (a feature of complex systems) relate to a wide range of concepts associated with complexity.\n• There was a video that helped clarify what is meant by a Markov chain and a stochastic process being stationary: Markov Chains Clearly Explained! Part - 1. His other videos are helpful as well. For example, when I saw \\(P_{ij}^{(n)} = A_{ij}^n\\) from the n-Step Transition Matrix video (Part 3), it was quite surprising. However, the Part 5 video on hidden Markov models wasn’t very helpful, but reading the appendix in the book was sufficient.\n• What I’ve felt from reading this book (currently at p.90) is that it presents a lot of different ideas and has interesting discussions on the history of science, but I only seem to get excited when it starts mentioning the brain. I’m not sure if I’m necessarily interested in quantifying complexity. From the Apple notes on 28/9/2024:\nAs I’m reading through What is a Complex System?, it seems that the description of a complex system arises as we have more representations at different scales of analysis. The concept of ‘complexity’ was destined to arise as the scientific era evolved.\nNon-equilibrium systems arise because we define what systems are in thermodynamic equilibrium, which are idealisations.\nThings that fail to be idealised fall into this dualistic concept: non-equilibrium."
  },
  {
    "objectID": "reading.html#section-1",
    "href": "reading.html#section-1",
    "title": "List of my reading during PhD",
    "section": "",
    "text": "It took about two weeks to finish this book. It was an accessible read until I met chapter 4, which was measuring features of complex systems."
  },
  {
    "objectID": "reading.html#hydrophobicity-across-length-scales-the-role-of-surface-criticality",
    "href": "reading.html#hydrophobicity-across-length-scales-the-role-of-surface-criticality",
    "title": "List of My Reading",
    "section": "2024/10/4 - Hydrophobicity Across Length Scales: The Role of Surface Criticality",
    "text": "2024/10/4 - Hydrophobicity Across Length Scales: The Role of Surface Criticality\nBy Mary Kathryn Coe\n\nQ1. Resolved\n\n\n\nOn page 35, Chapter 2.1\n\n\nI’m not entirely sure why the surface tension is defined in that way, as it’s normally considered force per unit area. So, I asked ChatGPT:\n\n\nClick to reveal the answer!\n\nThe definition of surface tension in this context is derived from the thermodynamic perspective, which connects surface tension to the grand potential difference between a bulk fluid and a system with an interface. The reasoning follows these steps:\n\nGrand Potential Definition: The grand potential, \\(\\Omega\\), is given by: \\[\n\\Omega = U - TS - \\mu N\n\\] This expression is crucial for systems where particle number and volume are allowed to fluctuate, such as liquid-vapour interfaces.\nSurface Tension from Thermodynamics: Surface tension, \\(\\gamma\\), represents the energy cost per unit area to create an interface. In thermodynamic terms, this corresponds to how much the grand potential increases when introducing an interface between coexisting phases (liquid and vapour).\nDifference between Bulk and Interface: The bulk grand potential, \\(\\Omega_b\\), corresponds to a system without an interface (uniform bulk). When an interface is introduced, the grand potential changes, denoted as \\(\\Omega_{\\text{ex}}\\), the excess grand potential: \\[\n\\Omega_{\\text{ex}} = \\Omega - \\Omega_b\n\\]\nSurface Tension as Excess Grand Potential per Unit Area: The surface tension is then defined as the excess grand potential per unit area, \\(A\\), required to form the interface: \\[\n\\gamma = \\frac{\\Omega_{\\text{ex}}}{A} = \\frac{\\Omega - \\Omega_b}{A}\n\\] This formulation makes sense because surface tension describes the energetic cost to create a unit area of interface between two phases.\n\nIn summary, while surface tension is often discussed in terms of force per unit length in simpler mechanical contexts, in thermodynamics, it is expressed as the excess grand potential per unit area. This ties into how interfaces modify the system’s energy in comparison to the bulk. The two definitions are equivalent but applied in different contexts: mechanical (force/length) vs. thermodynamic (energy/area).\n\n\n\nDerivation of equation 2.1.8, 2.1.9, 2.1.10\n\n\\[\n\\Omega_b(\\mu, V, T) = U - TS - \\mu N = -pV\n\\]\nTaking the differential:\n\\[\nd\\Omega_b = d(U - TS - \\mu N)\n\\]\nUsing the first law of thermodynamics:\n\\[\ndU = TdS - pdV + \\mu dN\n\\]\nDifferentiating \\(TS\\):\n\\[\nd(TS) = TdS + SdT\n\\]\nDifferentiating \\(\\mu N\\):\n\\[\nd(\\mu N) = \\mu dN + N d\\mu\n\\]\nSubstituting these into the differential for \\(\\Omega_b\\):\n\\[\nd\\Omega_b = (TdS - pdV + \\mu dN) - (TdS + SdT) - (\\mu dN + N d\\mu)\n\\]\nSimplifying:\n\\[\nd\\Omega_b = -S_b dT - N_b d\\mu - p dV\n\\]\nFor constant volume (\\(dV = 0\\)), the volume is assumed to remain constant because we are focusing on surface effects rather than bulk volume changes.:\n\\[\nd\\Omega_b = -S_b dT - N_b d\\mu\n\\]\nNow for equation (2.1.6):\n\\[\n\\Omega(\\mu, V, T) = U - TS - \\mu N = -pV + \\gamma A\n\\]\nTaking the differential:\n\\[\nd\\Omega = d(U - TS - \\mu N + \\gamma A)\n\\]\nSubstituting differentials:\n\\[\nd\\Omega = TdS - pdV + \\mu dN - (TdS + SdT) - (\\mu dN + N d\\mu) + \\gamma dA + A d\\gamma\n\\]\nSimplifying:\n\\[\nd\\Omega = -S dT - N d\\mu + \\gamma dA\n\\]\nNow subtract:\n\\[\nd\\Omega - d\\Omega_b = (-S dT - N d\\mu + \\gamma dA) - (-S_b dT - N_b d\\mu)\n\\]\nSimplifying:\n\\[\nd\\Omega - d\\Omega_b = -(S - S_b)dT - (N - N_b)d\\mu + \\gamma dA\n\\]\nThis is equation (2.1.8).\n\nFrom equation (2.1.7):\n\\[\n\\gamma = \\frac{\\Omega_{\\text{ex}}}{A} = \\frac{\\Omega - \\Omega_b}{A}\n\\]\nTaking the differential:\n\\[\nd\\gamma = \\frac{d\\Omega_{\\text{ex}}}{A} = \\frac{d\\Omega - d\\Omega_b}{A}\n\\]\nNow, use the result from equation (2.1.8):\n\\[\nd\\Omega - d\\Omega_b = -(S - S_b) dT - (N - N_b) d\\mu + \\gamma dA\n\\]\nSo:\n\\[\nd\\Omega_{\\text{ex}} = -s_{\\text{ex}} A dT - \\Gamma d\\mu + \\gamma dA\n\\]\nwhere:\n\n\\(s_{\\text{ex}} = \\frac{S - S_b}{A}\\) is the surface excess entropy per unit area,\n\\(\\Gamma = N - N_b\\) is the excess number of particles (adsorption).\n\nDividing through by \\(A\\), we get:\n\\[\n\\frac{d\\Omega_{\\text{ex}}}{A} = -s_{\\text{ex}} dT - \\frac{\\Gamma}{A} d\\mu + \\gamma \\frac{dA}{A}\n\\]\nNow, using the fact that \\(\\gamma \\frac{dA}{A}\\) is small for constant area, we can ignore this term, giving:\n\\[\ns_{\\text{ex}} dT + \\frac{\\Gamma}{A} d\\mu + d\\gamma = 0\n\\]\nThis is equation (2.1.9).\n\nRearrange equation (2.1.9):\n\\[\n\\frac{\\Gamma}{A} d\\mu = -s_{\\text{ex}} dT - d\\gamma\n\\]\nAt constant temperature (\\(dT = 0\\)), this simplifies to:\n\\[\n\\frac{\\Gamma}{A} d\\mu = -d\\gamma\n\\]\nNow, dividing both sides by \\(d\\mu\\), we get:\n\\[\n\\frac{\\Gamma}{A} = -\\left(\\frac{\\partial \\gamma}{\\partial \\mu}\\right)_T\n\\]\nThis is equation (2.1.10).\n\nAnd I need to ask about equations 2.1.11 to 2.1.13, as I cannot find reference [40].\n\n\nQ2. Resolved\n\n\n\nOn page 40, Chapter 2.3\n\n\nI wasn’t sure what the one-particle density is or its use, so I asked ChatGPT:\n\n\nClick to reveal the answer!\n\nThe one-particle density function, often denoted as \\(\\rho^{(1)}(\\mathbf{r})\\), represents the probability density of finding a particle at a specific position \\(\\mathbf{r}\\) in a system of particles. It describes how particles are distributed in space on average and is a key observable in statistical mechanics and the study of fluids.\nThe equation given is:\n\\[\n\\hat{\\rho}^{(1)}(\\mathbf{r}) = \\sum_{j=1}^{N} \\delta(\\mathbf{r} - \\mathbf{r}_j)\n\\]\nThis is the one-particle density operator, and it has the following meaning:\n\nDirac Delta Function: \\(\\delta(\\mathbf{r} - \\mathbf{r}_j)\\) is a Dirac delta function that ‘picks out’ the position of the \\(j\\)-th particle. It is equal to zero everywhere except at \\(\\mathbf{r}_j\\), where it is infinite, ensuring that it integrates to 1. Thus, it counts the presence of a particle at \\(\\mathbf{r}_j\\).\nSummation over All Particles: The sum runs over all particles \\(j\\) from 1 to \\(N\\), so this operator adds up the contributions from all particles in the system, effectively counting the number of particles at position \\(\\mathbf{r}\\).\n\nIn essence, the one-particle density operator \\(\\hat{\\rho}^{(1)}(\\mathbf{r})\\) gives the total number of particles at position \\(\\mathbf{r}\\) in the system. Since it is an operator, the actual one-particle density \\(\\langle \\hat{\\rho}^{(1)}(\\mathbf{r}) \\rangle\\), as defined in equation (2.3.2), is obtained by averaging over all possible configurations of the system in the given ensemble (such as the grand canonical ensemble).\nWhy Does It Look Like This?\nThe form of equation (2.3.1) stems from how we represent the microscopic distribution of particles in space. The Dirac delta function ensures that for each particle, its position contributes to the overall density only at the exact location where that particle exists. This is a standard way to construct density operators in statistical mechanics because:\n\nThe delta function precisely pinpoints the position of a particle.\nSumming over all particles ensures that the density operator accounts for the total number of particles present in the system.\n\nThis representation allows us to describe spatially inhomogeneous systems where the density may vary across different regions (e.g., near a surface or an external potential). For homogeneous fluids, where particles are evenly distributed, this density would reduce to a constant value (the bulk density \\(\\rho_b\\)).\nSummary\nThe one-particle density operator, \\(\\hat{\\rho}^{(1)}(\\mathbf{r})\\), reflects how particles are distributed in space at a microscopic level. The delta functions track the positions of individual particles, and summing over all particles gives the total density at position \\(\\mathbf{r}\\). The actual one-particle density function \\(\\rho^{(1)}(\\mathbf{r})\\) is then the ensemble average of this operator over all configurations of the system.\n\n\n\nQ3. Resolved\n\n\n\nOn page 43, Chapter 2.3\n\n\nI wasn’t sure why each variable is specifically chosen to form those equations. For example, in section 2.4.3, I do not understand why λ can be factored out of g on the right-hand side when λ has two different exponents, a and b. So, I asked ChatGPT:\n\n\nClick to reveal the answer!\n\nStarting with Equation (2.4.3):\n\\[\ng(\\lambda^a u, \\lambda^b v) = \\lambda g(u, v)\n\\]\nThis equation states that the function \\(g(u, v)\\) is a generalised homogeneous function. To understand why it takes this form and why \\(\\lambda\\) appears outside the function on the right-hand side, let’s break this down:\n\nHomogeneous Functions: A function is called homogeneous of degree \\(\\alpha\\) if, when all its arguments are scaled by a factor \\(\\lambda\\), the function itself scales by \\(\\lambda^\\alpha\\). Mathematically, for a homogeneous function \\(f(x, y)\\), we would have: \\[\nf(\\lambda x, \\lambda y) = \\lambda^\\alpha f(x, y)\n\\] This property is common in critical phenomena where we are dealing with power-law behaviour near critical points.\nGeneralised Homogeneous Functions: The function \\(g(u, v)\\) is a generalised homogeneous function because it allows different exponents for different variables. In this case, the variables \\(u\\) and \\(v\\) scale with different exponents \\(a\\) and \\(b\\) under the same scaling factor \\(\\lambda\\).\n\n\\(\\lambda^a u\\): Here, \\(u\\) is scaled by \\(\\lambda^a\\). This implies that \\(u\\) behaves differently under scaling compared to \\(v\\).\n\\(\\lambda^b v\\): Similarly, \\(v\\) is scaled by \\(\\lambda^b\\).\n\nWhy \\(\\lambda\\) can be factored out: The key to understanding why \\(\\lambda\\) can be factored out on the right-hand side despite having different exponents for \\(u\\) and \\(v\\) lies in the definition of a generalised homogeneous function. By construction, we impose that when the variables are scaled in a particular way (with exponents \\(a\\) and \\(b\\)), the function scales by \\(\\lambda\\) itself. This is a property we assign to \\(g(u, v)\\). It doesn’t mean that \\(\\lambda\\) is constant; rather, the entire function \\(g(u, v)\\) is designed to respond to the scaling in this specific manner.\nThe exponents \\(a\\) and \\(b\\) control how \\(u\\) and \\(v\\) individually respond to scaling, but the overall response of the function is to scale as \\(\\lambda\\). The scaling of the function on the right-hand side doesn’t contradict the fact that \\(\\lambda\\) has different exponents inside the arguments. This is simply a mathematical constraint on how the function \\(g(u, v)\\) behaves under scaling.\nIn other words, the form: \\[\ng(\\lambda^a u, \\lambda^b v)\n\\] ensures that the function scales uniformly by \\(\\lambda\\), despite the individual variables scaling differently.\n\nEquation (2.4.4):\nNow, let’s explain how this scaling idea applies to the singular part of the free energy in equation (2.4.4):\n\\[\n\\omega_{\\text{sing}}(\\delta \\mu, t) = \\lambda^{-d} \\omega_{\\text{sing}}(\\lambda^a \\delta \\mu, \\lambda^b t)\n\\]\n\nVariables:\n\n\\(\\delta \\mu = \\mu - \\mu_{\\text{co}}\\) is the difference between the chemical potential \\(\\mu\\) and the critical chemical potential \\(\\mu_{\\text{co}}\\).\n\\(t\\) is the reduced temperature: \\(t = \\frac{T - T_c}{T_c}\\).\n\\(d\\) is the dimensionality of the system (important for scaling relations).\n\nApplying the Scaling Relation: Here, the function \\(\\omega_{\\text{sing}}\\), which represents the singular part of the free energy, is assumed to be a generalised homogeneous function. This means it should follow a scaling law similar to the one introduced in equation (2.4.3).\nThe variables \\(\\delta \\mu\\) and \\(t\\) are scaled by \\(\\lambda^a\\) and \\(\\lambda^b\\), respectively, where \\(a\\) and \\(b\\) are scaling exponents that determine how \\(\\delta \\mu\\) and \\(t\\) change when scaled by \\(\\lambda\\).\nWhy \\(\\lambda^{-d}\\)?\n\nThe factor \\(\\lambda^{-d}\\) appears because we are dealing with free energy, which is an extensive quantity. In thermodynamics, extensive quantities scale with the volume of the system, and in \\(d\\)-dimensional space, the volume scales as \\(\\lambda^d\\). Since we are dealing with the singular part of the free energy, the scaling reflects the dimensionality of the system. The minus sign arises because, under scaling, the free energy decreases as the system grows larger.\n\nThe Free Choice of \\(\\lambda\\): The scaling factor \\(\\lambda\\) is arbitrary, meaning you can choose its value to simplify the equation. In this case, we choose \\(\\lambda^b = t^{-1}\\), which simplifies the second argument (the temperature dependence) of \\(\\omega_{\\text{sing}}\\). By doing this, we reduce the complexity of the equation and make the temperature scaling explicit.\n\nEquation (2.4.5):\nThis equation shows the final form after choosing \\(\\lambda^b = t^{-1}\\):\n\\[\n\\omega_{\\text{sing}}(\\delta \\mu, t) = t^{d/b} \\omega_{\\text{sing}}(t^{-a/b} \\delta \\mu, 1)\n\\]\n\nWhy this form? By setting \\(\\lambda^b = t^{-1}\\), we have scaled out the temperature dependence in the second argument of \\(\\omega_{\\text{sing}}\\). This isolates the temperature dependence into the prefactor \\(t^{d/b}\\), while leaving a scaling function that depends only on the ratio \\(\\delta \\mu / t^{a/b}\\), which is now the only scaling variable.\n\n\\(t^{d/b}\\): This represents how the singular part of the free energy depends on temperature near the critical point. The exponent \\(d/b\\) dictates how strongly the free energy diverges as \\(t \\to 0\\) (the critical point).\n\\(\\Sigma\\left( \\frac{\\delta \\mu}{t^{a/b}} \\right)\\): The function \\(\\Sigma\\) is the scaling function, which encodes the remaining dependence on the scaled chemical potential \\(\\delta \\mu / t^{a/b}\\).\n\n\nIn Summary: - In equation (2.4.3), the exponents \\(a\\) and \\(b\\) control how the variables \\(u\\) and \\(v\\) scale. Despite their different scaling behaviours, the overall function scales by \\(\\lambda\\) because it is designed as a generalised homogeneous function. - In equation (2.4.4), the singular part of the free energy near the critical point follows a similar scaling law, with the dimensionality \\(d\\) appearing as a factor to reflect the extensive nature of free energy. - In equation (2.4.5), we choose \\(\\lambda^b = t^{-1}\\) to simplify the scaling form, making the dependence on temperature explicit and reducing the complexity of the equation. The resulting expression separates the prefactor \\(t^{d/b}\\) and leaves a scaling function that depends only on the ratio \\(\\delta \\mu / t^{a/b}\\), which captures the critical behaviour.\n\n\n\nFluctuations? One correlated entity?\n\nIn the context of phase transitions, particularly near a critical point, the term “fluctuations” refers to fluctuations in the local density of the system. Let’s explain in detail what this means, especially in the context of critical opalescence and long-range correlations.\n\nDensity Fluctuations: When we talk about “density” in this context, we mean the number density of particles in a given volume. In simple terms, it’s how densely packed the particles are in a particular region. The density can fluctuate due to thermal motion, and these fluctuations are typically small and localised in non-critical conditions.\n\nHowever, as a system approaches the critical point of a phase transition (e.g., a liquid-vapour transition), the magnitude of these fluctuations grows dramatically.\n\nWhat happens near the critical point?\n\nCorrelation Length (\\(\\xi\\)): The correlation length \\(\\xi\\) represents the distance over which particles in the system are correlated or “communicate” with each other. Normally, this length is finite, and beyond this distance, the properties of the system in one region do not affect another region.\nNear the critical point, however, \\(\\xi \\to \\infty\\). This means that particles separated by very large distances (even macroscopic scales) are correlated with each other. The entire system essentially becomes one correlated entity.\nDiverging Fluctuations: As the correlation length grows, the fluctuations in the local density (i.e., how many particles are in a given region at any time) also grow larger. This happens because, when the correlation length is large, particles across large distances influence each other. As a result, fluctuations occur over all length scales, from small to very large.\nDensity Fluctuations: Specifically, these are fluctuations in the number of particles in a given volume. Imagine regions in a fluid where the particle density becomes temporarily higher or lower than the average. At the critical point, these fluctuations become very large and occur over very large distances, leading to the system appearing “cloudy” or “milky” — this is the phenomenon of critical opalescence.\n\n\nWhat exactly is fluctuating? At the critical point, density is the key fluctuating quantity, but more generally, the term “fluctuations” can refer to:\n\n\nOrder Parameter Fluctuations: Near a critical point, there is typically an order parameter that characterises the phase transition. For example, in the liquid-vapour transition, this order parameter could be the difference in density between the liquid and vapour phases. As the system approaches the critical point, the fluctuations in the order parameter become large.\nFor example, in a fluid near the liquid-vapour critical point:\n\nIn the liquid phase, particles are densely packed.\nIn the vapour phase, particles are more spread out.\n\nNear the critical point, there is no sharp distinction between liquid and vapour phases. Instead, the system fluctuates between states that resemble both phases. You might see a region that has the density of a liquid next to a region that has the density of a vapour, and these regions appear and disappear rapidly.\n\n\nWhy do these fluctuations occur? At the critical point, the system is in a delicate balance between two phases (e.g., liquid and vapour). The free energy landscape becomes very flat near the critical point, meaning that the system can fluctuate easily between different configurations with very little energy cost. These fluctuations span all length scales, leading to the phenomenon where large regions of the system can fluctuate in density.\nCritical Opalescence: The critical opalescence mentioned in the text is a direct consequence of these large fluctuations in density. Light passing through the fluid is scattered by the density fluctuations. Since the fluctuations occur over a wide range of length scales (from very small to very large), they scatter light across all wavelengths, leading to the “milky” appearance of the fluid near the critical point.\n\n\nWhy does light scatter? Light is scattered by regions of varying density because the refractive index of the fluid depends on its density. When the density fluctuates significantly over large distances, light passing through the fluid encounters regions of different densities, leading to scattering in all directions.\n\nSummary:\n\nWhat is fluctuating near the critical point?: Primarily, the number density (i.e., the number of particles per unit volume) fluctuates near the critical point.\nWhy do these fluctuations grow?: As the correlation length \\(\\xi\\) becomes large, regions of the system separated by large distances become correlated, allowing large-scale fluctuations in density.\nWhat’s the physical manifestation?: These fluctuations lead to observable phenomena such as critical opalescence, where light is scattered by the large fluctuations in density, causing the fluid to appear milky or cloudy.\n\nIn short, the “fluctuations” near the critical point refer to density fluctuations, which are tied to the divergence of the correlation length, and these fluctuations grow larger and affect larger regions of the system as the critical point is approached.\n\n\nFrom chapter 2.4.3, I decided to skim through this document as it became too technical to understand the entire thesis when it began with perturbation theory. Additionally, many concepts here are primarily from equilibrium statistical physics.\n\n\n\n\n\n\nNote\n\n\n\nChapter 2.4.5: Wetting and Drying Phase Transitions is very well written and full of useful knowledge. For the next project meeting, let’s prepare a slide to go over this.\n\n\nWetting and Drying Phase Transitions",
    "crumbs": [
      "Project Notes",
      "List of My Reading"
    ]
  },
  {
    "objectID": "tutorial-document.html",
    "href": "tutorial-document.html",
    "title": "Quarto Document",
    "section": "",
    "text": "Quarto Document",
    "crumbs": [
      "Website Design",
      "Quarto Tutorial",
      "Quarto Document"
    ]
  },
  {
    "objectID": "tutorial-basics.html",
    "href": "tutorial-basics.html",
    "title": "Quarto Basics",
    "section": "",
    "text": "Quarto Basics\nFor a demonstration of a line plot on a polar axis, see Figure 1.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1: A line plot on a polar axis",
    "crumbs": [
      "Website Design",
      "Quarto Tutorial",
      "Quarto Basics"
    ]
  },
  {
    "objectID": "tutorial-basics.html#numpy",
    "href": "tutorial-basics.html#numpy",
    "title": "Quarto Basics",
    "section": "NumPy",
    "text": "NumPy\n\n\nCode\nimport numpy as np\na = np.arange(15).reshape(3, 5)\na\n\n\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14]])",
    "crumbs": [
      "Project Notes",
      "Quarto Tutorial",
      "Quarto Basics"
    ]
  },
  {
    "objectID": "tutorial-basics.html#matplotlib",
    "href": "tutorial-basics.html#matplotlib",
    "title": "Quarto Basics",
    "section": "Matplotlib",
    "text": "Matplotlib\n\n\nCode\nfig = plt.figure()\n# fig.set_size_inches(12, 7)\nx = np.arange(10)\ny = 2.5 * np.sin(x / 20 * np.pi)\nyerr = np.linspace(0.05, 0.2, 10)\n\nplt.errorbar(x, y + 3, yerr=yerr, label='both limits (default)')\nplt.errorbar(x, y + 2, yerr=yerr, uplims=True, label='uplims=True')\nplt.errorbar(x, y + 1, yerr=yerr, uplims=True, lolims=True,\n             label='uplims=True, lolims=True')\n\nupperlimits = [True, False] * 5\nlowerlimits = [False, True] * 5\nplt.errorbar(x, y, yerr=yerr, uplims=upperlimits, lolims=lowerlimits,\n             label='subsets of uplims and lolims')\n\nplt.legend(loc='lower right')\nplt.show(fig)\n\n\n\n\n\n\n\n\nFigure 2: Errorbar limit selector",
    "crumbs": [
      "Project Notes",
      "Quarto Tutorial",
      "Quarto Basics"
    ]
  },
  {
    "objectID": "tutorial-basics.html#plotly",
    "href": "tutorial-basics.html#plotly",
    "title": "Quarto Basics",
    "section": "Plotly",
    "text": "Plotly\n\nCode\nimport plotly.express as px\nimport plotly.io as pio\ngapminder = px.data.gapminder()\ndef gapminder_plot(year):\n    gapminderYear = gapminder.query(\"year == \" + \n                                    str(year))\n    fig = px.scatter(gapminderYear, \n                     x=\"gdpPercap\", y=\"lifeExp\",\n                     size=\"pop\", size_max=60,\n                     hover_name=\"country\")\n    fig.show()\n    \ngapminder_plot(1957)\ngapminder_plot(2007)\n\n\n\n\n\n\n\n\n\n                                                \n\n\n(a) Gapminder: 1957\n\n\n\n\n\n\n\n\n                                                \n\n\n(b) Gapminder: 2007\n\n\n\n\n\n\n\nFigure 3: Life Expectancy and GDP",
    "crumbs": [
      "Project Notes",
      "Quarto Tutorial",
      "Quarto Basics"
    ]
  },
  {
    "objectID": "tutorial-computations.html",
    "href": "tutorial-computations.html",
    "title": "Quarto Computations",
    "section": "",
    "text": "Quarto Computations",
    "crumbs": [
      "Website Design",
      "Quarto Tutorial",
      "Quarto Computations"
    ]
  },
  {
    "objectID": "tutorial-computations.html#numpy",
    "href": "tutorial-computations.html#numpy",
    "title": "Quarto Computations",
    "section": "NumPy",
    "text": "NumPy\n\n\nCode\nimport numpy as np\na = np.arange(15).reshape(3, 5)\na\n\n\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14]])",
    "crumbs": [
      "Website Design",
      "Quarto Tutorial",
      "Quarto Computations"
    ]
  },
  {
    "objectID": "tutorial-computations.html#matplotlib",
    "href": "tutorial-computations.html#matplotlib",
    "title": "Quarto Computations",
    "section": "Matplotlib",
    "text": "Matplotlib\n\n\nCode\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\n# fig.set_size_inches(12, 7)\nx = np.arange(10)\ny = 2.5 * np.sin(x / 20 * np.pi)\nyerr = np.linspace(0.05, 0.2, 10)\n\nplt.errorbar(x, y + 3, yerr=yerr, label='both limits (default)')\nplt.errorbar(x, y + 2, yerr=yerr, uplims=True, label='uplims=True')\nplt.errorbar(x, y + 1, yerr=yerr, uplims=True, lolims=True,\n             label='uplims=True, lolims=True')\n\nupperlimits = [True, False] * 5\nlowerlimits = [False, True] * 5\nplt.errorbar(x, y, yerr=yerr, uplims=upperlimits, lolims=lowerlimits,\n             label='subsets of uplims and lolims')\n\nplt.legend(loc='lower right')\nplt.show(fig)\n\n\n\n\n\n\n\n\nFigure 1: Errorbar limit selector",
    "crumbs": [
      "Website Design",
      "Quarto Tutorial",
      "Quarto Computations"
    ]
  },
  {
    "objectID": "tutorial-computations.html#plotly",
    "href": "tutorial-computations.html#plotly",
    "title": "Quarto Computations",
    "section": "Plotly",
    "text": "Plotly\n\nCode\n\"\"\"\nThis allows our figure display to span out beyond the normal body text column.\n#| column: page\n\"\"\"\n\nimport plotly.express as px\nimport plotly.io as pio\ngapminder = px.data.gapminder()\ndef gapminder_plot(year):\n    gapminderYear = gapminder.query(\"year == \" + \n                                    str(year))\n    fig = px.scatter(gapminderYear, \n                     x=\"gdpPercap\", y=\"lifeExp\",\n                     size=\"pop\", size_max=60,\n                     hover_name=\"country\")\n    fig.show()\n    \ngapminder_plot(1957)\ngapminder_plot(2007)\n\n\n\n\n\n\n\n\n\n                                                \n\n\n(a) Gapminder: 1957\n\n\n\n\n\n\n\n\n                                                \n\n\n(b) Gapminder: 2007\n\n\n\n\n\n\n\nFigure 2: Life Expectancy and GDP",
    "crumbs": [
      "Website Design",
      "Quarto Tutorial",
      "Quarto Computations"
    ]
  },
  {
    "objectID": "tutorial-document.html#colors",
    "href": "tutorial-document.html#colors",
    "title": "Quarto Document",
    "section": "1.1 Colors",
    "text": "1.1 Colors\n\nRed\nGreen\nBlue",
    "crumbs": [
      "Website Design",
      "Quarto Tutorial",
      "Quarto Document"
    ]
  },
  {
    "objectID": "tutorial-document.html#shapes",
    "href": "tutorial-document.html#shapes",
    "title": "Quarto Document",
    "section": "1.2 Shapes",
    "text": "1.2 Shapes\n\nSquare\nCircle\nTriangle",
    "crumbs": [
      "Website Design",
      "Quarto Tutorial",
      "Quarto Document"
    ]
  },
  {
    "objectID": "tutorial-document.html#textures",
    "href": "tutorial-document.html#textures",
    "title": "Quarto Document",
    "section": "1.3 Textures",
    "text": "1.3 Textures\n\nSmooth\nBumpy\nFuzzy",
    "crumbs": [
      "Website Design",
      "Quarto Tutorial",
      "Quarto Document"
    ]
  },
  {
    "objectID": "tutorial-document.html#overview",
    "href": "tutorial-document.html#overview",
    "title": "Quarto Document",
    "section": "4 Overview",
    "text": "4 Overview\nMary says Hydrophobicity is ubiquitous. Many aquatic and semi-aquatic plants, such as the lotus, utilise hydrophobicity in their self-cleaning mechanisms which reduce their chances of infection from harmful pathogens present in the bodies of water in which they grow [2]. Butterflies have been found to utilise hydrophobicity to ensure that rain droplets which fall on their wings roll off away from their bodies [3]. Proteins have been found to utilise localised hydrophobicity to evacuate surrounding water and enable ligand binding [4]. Detergents utilise the hydrophobicity driven self assembly of amphiphilic molecules into micelle structures to remove grease from clothes [5]. The influence of hydrophobicity is felt in every aspect of our lives. (Coe, n.d.).",
    "crumbs": [
      "Project Notes",
      "Quarto Tutorial",
      "Quarto Document"
    ]
  },
  {
    "objectID": "tutorial-document.html#references",
    "href": "tutorial-document.html#references",
    "title": "Quarto Document",
    "section": "5 References",
    "text": "5 References",
    "crumbs": [
      "Project Notes",
      "Quarto Tutorial",
      "Quarto Document"
    ]
  },
  {
    "objectID": "tutorial-document.html#overview-1",
    "href": "tutorial-document.html#overview-1",
    "title": "Quarto Document",
    "section": "6 Overview",
    "text": "6 Overview\nSee Figure 1 in Section 7 for a demonstration of a simple plot.\nSee Equation 1 to better understand standard deviation.",
    "crumbs": [
      "Project Notes",
      "Quarto Tutorial",
      "Quarto Document"
    ]
  },
  {
    "objectID": "tutorial-document.html#sec-plot",
    "href": "tutorial-document.html#sec-plot",
    "title": "Quarto Document",
    "section": "3.1 Plot",
    "text": "3.1 Plot\n\n\nCode\nimport matplotlib.pyplot as plt\nplt.plot([1,23,2,4])\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1: Simple Plot",
    "crumbs": [
      "Website Design",
      "Quarto Tutorial",
      "Quarto Document"
    ]
  },
  {
    "objectID": "tutorial-document.html#sec-equation",
    "href": "tutorial-document.html#sec-equation",
    "title": "Quarto Document",
    "section": "3.2 Equation",
    "text": "3.2 Equation\n\ns = \\sqrt{\\frac{1}{N-1} \\sum_{i=1}^N (x_i - \\overline{x})^2}\n\\tag{1}",
    "crumbs": [
      "Website Design",
      "Quarto Tutorial",
      "Quarto Document"
    ]
  },
  {
    "objectID": "tutorial-document.html#equations",
    "href": "tutorial-document.html#equations",
    "title": "Quarto Document",
    "section": "1.4 Equations",
    "text": "1.4 Equations\nEinstein’s theory of special relatively that expresses the equivalence of mass and energy:\nE = mc^{2}",
    "crumbs": [
      "Website Design",
      "Quarto Tutorial",
      "Quarto Document"
    ]
  },
  {
    "objectID": "tutorial-document.html#citations",
    "href": "tutorial-document.html#citations",
    "title": "Quarto Document",
    "section": "1.5 Citations",
    "text": "1.5 Citations\nMary says Hydrophobicity is ubiquitous. Many aquatic and semi-aquatic plants, such as the lotus, utilise hydrophobicity in their self-cleaning mechanisms which reduce their chances of infection from harmful pathogens present in the bodies of water in which they grow [2]. Butterflies have been found to utilise hydrophobicity to ensure that rain droplets which fall on their wings roll off away from their bodies [3]. Proteins have been found to utilise localised hydrophobicity to evacuate surrounding water and enable ligand binding [4]. Detergents utilise the hydrophobicity driven self assembly of amphiphilic molecules into micelle structures to remove grease from clothes [5]. The influence of hydrophobicity is felt in every aspect of our lives. (Coe, n.d.).",
    "crumbs": [
      "Project Notes",
      "Quarto Tutorial",
      "Quarto Document"
    ]
  },
  {
    "objectID": "tutorial-document.html#cross-references",
    "href": "tutorial-document.html#cross-references",
    "title": "Quarto Document",
    "section": "1.6 Cross References",
    "text": "1.6 Cross References\nSee Figure 1 in Section 1.6.1 for a demonstration of a simple plot.\nSee Equation 1 to better understand standard deviation.\n\n1.6.1 Plot\n\n\nCode\nimport matplotlib.pyplot as plt\nplt.plot([1,23,2,4])\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1: Simple Plot\n\n\n\n\n\n\n\n1.6.2 Equation\n\ns = \\sqrt{\\frac{1}{N-1} \\sum_{i=1}^N (x_i - \\overline{x})^2}\n\\tag{1}",
    "crumbs": [
      "Project Notes",
      "Quarto Tutorial",
      "Quarto Document"
    ]
  },
  {
    "objectID": "tutorial-document.html#sections",
    "href": "tutorial-document.html#sections",
    "title": "Quarto Document",
    "section": "1 Sections",
    "text": "1 Sections\n\n1.1 Colors\n\nRed\nGreen\nBlue\n\n\n\n1.2 Shapes\n\nSquare\nCircle\nTriangle\n\n\n\n1.3 Textures\n\nSmooth\nBumpy\nFuzzy\n\n\n\n1.4 Equations\nEinstein’s theory of special relatively that expresses the equivalence of mass and energy:\nE = mc^{2}",
    "crumbs": [
      "Project Notes",
      "Quarto Tutorial",
      "Quarto Document"
    ]
  },
  {
    "objectID": "tutorial-document.html#footnotes",
    "href": "tutorial-document.html#footnotes",
    "title": "Quarto Document",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nSee the Matplotlib Gallery to explore colorbars further↩︎",
    "crumbs": [
      "Project Notes",
      "Quarto Tutorial",
      "Quarto Document"
    ]
  },
  {
    "objectID": "theme.html",
    "href": "theme.html",
    "title": "Theme Showdown",
    "section": "",
    "text": "From a pool of 25 themes, the chosen ones are:\n• default\n• flatly\n• minty\n• sandstone\n• united\n• yeti\nCue the dramatic music…\n\n\n\nRound 1: flatly vs default\nWinner: flatly!\nRound 2: minty vs sandstone\nResult: A tie!\nRound 3: united vs yeti\nWinner: united!\n\n\n\nMatch 1: flatly vs minty\nWinner: flatly (Minty was fresh, but flatly had the edge!)\nMatch 2: united vs sandstone\nWinner: united!\n\n\n\n\nflatly vs united\nWinner: flatly! More professional, less adorable. But honestly, united put up a cute fight.\nFor now, flatly reigns supreme… but united is right there, ready for a rematch.",
    "crumbs": [
      "Website Design",
      "Theme Showdown"
    ]
  },
  {
    "objectID": "theme.html#semi-finals",
    "href": "theme.html#semi-finals",
    "title": "Theme Showdown",
    "section": "",
    "text": "Match 1: flatly vs minty\nWinner: flatly (Minty was fresh, but flatly had the edge!)\nMatch 2: united vs sandstone\nWinner: united!",
    "crumbs": [
      "Website Design",
      "Theme Showdown"
    ]
  },
  {
    "objectID": "theme.html#final-round",
    "href": "theme.html#final-round",
    "title": "Theme Showdown",
    "section": "",
    "text": "flatly vs united\nWinner: flatly! More professional, less adorable. But honestly, united put up a cute fight.\nFor now, flatly reigns supreme… but united is right there, ready for a rematch.",
    "crumbs": [
      "Website Design",
      "Theme Showdown"
    ]
  },
  {
    "objectID": "notes.html#week-4",
    "href": "notes.html#week-4",
    "title": "Weekly Notes",
    "section": "Week 4",
    "text": "Week 4\n\n2024/10/7 Weekly project meeting\n\nThings to discuss\n\nOverleaf template for the thesis, as I will start writing what I learn for either the introduction or theory sections. Found one: Link\n\n\n\n\n2024/10/8 Analytical Mechanics\nI’ve been watching Tom’s lectures on Analytical Mechanics once more. I’ve just finished part 2. The topics are:\n\nCalculus of variations\nLagrangian mechanics\nHamiltonian mechanics\n\nWhy did I start watching it?\nWell, during the last project meeting, I had a naïve question about whether we could formulate a Lagrangian for the drying scenario. For example, in my supervisor’s papers, they couldn’t manage to observe the drying transition in their setup. So, I asked if, when the trajectory of all particles is away from the surface, we could possibly derive an analytical equation of forces between the particles and the wall to induce torque. Just a pure naïve idea.\nNigel mentioned that the principle of least action makes sense in equilibrium settings, so I had to revise that concept. The Lagrangian is the kinetic energy minus the potential energy, whatever this quantity is. In non-equilibrium systems, energy keeps changing since active agents continuously consume energy. Also, the effective potential depends on the properties of the wall. So, the Lagrangian would become time-dependent, which now makes sense based on what Nigel said.\nThe beautiful theorem was revisited from his lectures: Noether’s theorem.\n\nIf the laws of physics don’t depend on time, energy is conserved.\nSimilarly, if the system has translational or rotational invariance, momentum or angular momentum is conserved, respectively.\n\nThis is beautiful: conserved quantities derive from the symmetries of the system. It also implies that since energy is not conserved for the system I’m interested in, the equations of motion would be time-dependent. I think it would be useful to pay attention to how the equations of motion for active Brownian particles are formulated once I revise their papers.\nAs for his lectures, I’ll continue with part 3 since I’ve already watched the first two. That said, I remember his lecture notes being better than the video recordings, although his video lectures on phase transitions were much more inspiring. So, a note for my future self: when revising the content of the analytical formulation of mechanics, read his lecture notes.\n\n\nPrograms I made\nBefore doing that, I made a Python program that:\n\ndownloads all lectures from Mediasite from the unit I select,\ndetects and removes sections of silence in both the video and audio tracks, applying a buffer of 0.5 seconds before and after each silence to make the transitions smoother,\nsyncs the video and audio together seamlessly to create an mp4 file (the original files were mov, which were almost 10x larger in size),\nkeeps the system active throughout the process by using caffeinate to prevent the computer from going to sleep,\ntracks and reports the download status, ensuring that any interrupted downloads are handled smoothly by automatically updating cookies for authentication,\nensures frame rate consistency to avoid any sync issues that might arise due to different frame rates,\nautomatically manages temporary files created during the silence detection process, keeping the system clean after the task is done.\n\nI’m not sure if I’m allowed to share this code on GitHub, but it was a fun project.\n\n\n\nDownloaded lectures\n\n\nWhy did I make it? Because…\n\nI’ve always felt lazy logging into Blackboard (the university website) every time I wanted to watch videos during my undergraduate years.\nI personally wanted to collect the lectures before they disappeared from the website.\nThere are many pauses in the lectures where the lecturer doesn’t speak while writing equations or words. Removing these pauses also saves total viewing time. Observe the difference:\n\nTotal time to watch all videos of AM (Analytical Mechanics):\n\nAM: 9 hours, 18 minutes, 34 seconds\nProcessed_AM: 8 hours, 23 minutes, 50 seconds\nProcessed_AM (no buffer of 0.5s): 7 hours, 23 minutes, 28 seconds\n\nTotal time to watch all videos of PT (Physics of Phase Transitions):\n\nPT: 11 hours, 42 minutes, 19 seconds\nProcessed_PT: 10 hours, 49 minutes, 18 seconds\nProcessed_PT (no buffer of 0.5s): 9 hours, 45 minutes, 29 seconds\n\nThe buffer is necessary as it makes the transitions feel more natural by introducing a brief pause rather than cutting the silences completely. Watch an example below (duration change: 18:09 (before processing) → 15:29 (after processing with buffers)):\n\n\nVideo\nAM 2.5a Noether’s Theorem",
    "crumbs": [
      "Project Notes",
      "Weekly Notes"
    ]
  }
]